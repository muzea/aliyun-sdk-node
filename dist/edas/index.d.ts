interface EDAS {
    DeleteApplication(query: {
        "RegionId"?: string;
        "AppId": string;
    }): Promise<{}>;
    DeleteEcu(query: {
        "RegionId"?: string;
        "EcuId": string;
    }): Promise<{}>;
    GetK8sApplication(query: {
        "RegionId"?: string;
        "AppId": string;
        "From"?: string;
    }): Promise<{}>;
    InsertFlowControl(query: {
        "RegionId"?: string;
        "AppId": string;
        "Granularity": string;
        "RuleType": string;
        "Threshold": number;
        "ConsumerAppId"?: string;
        "MethodName"?: string;
        "ServiceName"?: string;
        "Strategy"?: string;
        "UrlVar"?: string;
    }): Promise<{}>;
    ListAuthority(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListBuildPack(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListClusterMembers(query: {
        "RegionId"?: string;
        "ClusterId": string;
        "CurrentPage"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    AuthorizeApplication(query: {
        "RegionId"?: string;
        "TargetUserId": string;
        "AppIds"?: string;
    }): Promise<{}>;
    AuthorizeResourceGroup(query: {
        "RegionId"?: string;
        "TargetUserId": string;
        "ResourceGroupIds"?: string;
    }): Promise<{}>;
    AuthorizeRole(query: {
        "RegionId"?: string;
        "TargetUserId": string;
        "RoleIds"?: string;
    }): Promise<{}>;
    BindK8sSlb(query: {
        "RegionId"?: string;
        "AppId": string;
        "ClusterId": string;
        "Type": string;
        "SlbProtocol": string;
        "TargetPort": string;
        "Port": string;
        "SlbId"?: string;
    }): Promise<{}>;
    BindSlb(query: {
        "RegionId"?: string;
        "AppId": string;
        "SlbId": string;
        "SlbIp": string;
        "Type": string;
        "ListenerPort"?: number;
        "VServerGroupId"?: string;
    }): Promise<{}>;
    ChangeDeployGroup(query: {
        "RegionId"?: string;
        "AppId": string;
        "EccInfo": string;
        "GroupName": string;
        "ForceStatus"?: boolean;
    }): Promise<{}>;
    ContinuePipeline(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "Confirm"?: boolean;
    }): Promise<{}>;
    DeleteCluster(query: {
        "RegionId"?: string;
        "ClusterId": string;
    }): Promise<{
        "Data": boolean;
        "Message": string;
        "RequestId": string;
        "Code": number;
    }>;
    DeleteClusterMember(query: {
        "RegionId"?: string;
        "ClusterId": string;
        "ClusterMemberId": string;
    }): Promise<{}>;
    DeleteConfigCenter(query: {
        "RegionId"?: string;
        "DataId": string;
        "Group": string;
        "LogicalRegionId": string;
    }): Promise<{}>;
    DeleteDegradeControl(query: {
        "RegionId"?: string;
        "AppId": string;
        "RuleId": string;
    }): Promise<{}>;
    DeleteK8sApplication(query: {
        "RegionId"?: string;
        "AppId": string;
    }): Promise<{}>;
    DeleteRole(query: {
        "RegionId"?: string;
        "RoleId": number;
    }): Promise<{}>;
    DeleteServiceGroup(query: {
        "RegionId"?: string;
        "GroupId": string;
    }): Promise<{}>;
    DeployApplication(query: {
        "RegionId"?: string;
        "AppId": string;
        "PackageVersion": string;
        "DeployType": string;
        "GroupId": string;
        "Desc"?: string;
        "WarUrl"?: string;
        "ImageUrl"?: string;
        "Batch"?: number;
        "BatchWaitTime"?: number;
        "AppEnv"?: string;
        "BuildPackId"?: number;
        "ComponentIds"?: string;
        "ReleaseType"?: number;
    }): Promise<{}>;
    DeployK8sApplication(query: {
        "RegionId"?: string;
        "AppId": string;
        "PreStop"?: string;
        "Envs"?: string;
        "ImageTag"?: string;
        "BatchWaitTime"?: number;
        "Command"?: string;
        "PostStart"?: string;
        "Readiness"?: string;
        "Liveness"?: string;
        "Args"?: string;
        "Replicas"?: number;
        "Image"?: string;
        "CpuLimit"?: number;
        "MemoryLimit"?: number;
        "CpuRequest"?: number;
        "MemoryRequest"?: number;
        "NasId"?: string;
        "MountDescs"?: string;
        "StorageType"?: string;
        "LocalVolume"?: string;
        "PackageUrl"?: string;
        "PackageVersion"?: string;
        "JDK"?: string;
        "WebContainer"?: string;
        "EdasContainerVersion"?: string;
    }): Promise<{}>;
    DisableFlowControl(query: {
        "RegionId"?: string;
        "AppId": string;
        "RuleId": string;
    }): Promise<{}>;
    EnableDegradeControl(query: {
        "RegionId"?: string;
        "AppId": string;
        "RuleId": string;
    }): Promise<{}>;
    EnableFlowControl(query: {
        "RegionId"?: string;
        "AppId": string;
        "RuleId": string;
    }): Promise<{}>;
    GetApplication(query: {
        "RegionId"?: string;
        "AppId": string;
    }): Promise<{}>;
    GetChangeOrderInfo(query: {
        "RegionId"?: string;
        "ChangeOrderId": string;
    }): Promise<{}>;
    GetContainerConfiguration(query: {
        "RegionId"?: string;
        "AppId": string;
        "GroupId"?: string;
    }): Promise<{}>;
    GetJvmConfiguration(query: {
        "RegionId"?: string;
        "AppId": string;
        "GroupId"?: string;
    }): Promise<{}>;
    GetPackageStorageCredential(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    GetSecureToken(query: {
        "RegionId"?: string;
        "NamespaceId": string;
    }): Promise<{}>;
    ImportK8sCluster(query: {
        "RegionId"?: string;
        "ClusterId": string;
        "NamespaceId"?: string;
    }): Promise<{}>;
    InsertCluster(query: {
        "RegionId"?: string;
        "ClusterName": string;
        "ClusterType": number;
        "NetworkMode": number;
        "LogicalRegionId"?: string;
        "VpcId"?: string;
        "OversoldFactor"?: number;
        "IaasProvider"?: string;
    }): Promise<{}>;
    InsertConfigCenter(query: {
        "RegionId"?: string;
        "DataId": string;
        "Group": string;
        "Data": string;
        "LogicalRegionId": string;
        "AppName"?: string;
    }): Promise<{}>;
    InsertDegradeControl(query: {
        "RegionId"?: string;
        "AppId": string;
        "Duration": number;
        "RtThreshold": number;
        "RuleType": string;
        "MethodName"?: string;
        "ServiceName"?: string;
        "UrlVar"?: string;
    }): Promise<{}>;
    InsertDeployGroup(query: {
        "RegionId"?: string;
        "AppId": string;
        "GroupName": string;
    }): Promise<{}>;
    InsertK8sApplication(query: {
        "RegionId"?: string;
        "AppName": string;
        "ClusterId": string;
        "ImageUrl"?: string;
        "PackageType"?: string;
        "IntranetTargetPort"?: number;
        "IntranetSlbPort"?: number;
        "ApplicationDescription"?: string;
        "RepoId"?: string;
        "Replicas"?: number;
        "LimitCpu"?: number;
        "LimitMem"?: number;
        "RequestsCpu"?: number;
        "RequestsMem"?: number;
        "Command"?: string;
        "CommandArgs"?: string;
        "IntranetSlbProtocol"?: string;
        "IntranetSlbId"?: string;
        "InternetSlbId"?: string;
        "InternetSlbProtocol"?: string;
        "InternetSlbPort"?: number;
        "InternetTargetPort"?: number;
        "Envs"?: string;
        "PreStop"?: string;
        "PostStart"?: string;
        "Liveness"?: string;
        "Readiness"?: string;
        "NasId"?: string;
        "MountDescs"?: string;
        "StorageType"?: string;
        "LocalVolume"?: string;
        "Namespace"?: string;
        "LogicalRegionId"?: string;
        "PackageUrl"?: string;
        "PackageVersion"?: string;
        "JDK"?: string;
        "WebContainer"?: string;
        "EdasContainerVersion"?: string;
    }): Promise<{}>;
    InsertOrUpdateRegion(query: {
        "RegionId"?: string;
        "RegionTag": string;
        "RegionName": string;
        "Description"?: string;
        "Id"?: number;
        "DebugEnable"?: boolean;
    }): Promise<{}>;
    InsertServiceGroup(query: {
        "RegionId"?: string;
        "GroupName": string;
    }): Promise<{}>;
    ListApplication(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListApplicationEcu(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListCluster(query: {
        "RegionId"?: string;
        "LogicalRegionId"?: string;
    }): Promise<{}>;
    ListConsumedServices(query: {
        "RegionId"?: string;
        "AppId": string;
    }): Promise<{}>;
    ListConvertableEcu(query: {
        "RegionId"?: string;
        "clusterId": string;
    }): Promise<{}>;
    ListDegradeControls(query: {
        "RegionId"?: string;
        "AppId": string;
    }): Promise<{}>;
    ListFlowControls(query: {
        "RegionId"?: string;
        "AppId": string;
    }): Promise<{}>;
    ListHistoryDeployVersion(query: {
        "RegionId"?: string;
        "AppId": string;
    }): Promise<{}>;
    ListPublishedServices(query: {
        "RegionId"?: string;
        "AppId": string;
    }): Promise<{}>;
    ListRecentChangeOrder(query: {
        "RegionId"?: string;
        "AppId": string;
    }): Promise<{}>;
    ListResourceGroup(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListRole(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListScaleOutEcu(query: {
        "RegionId"?: string;
        "LogicalRegionId"?: string;
        "ClusterId"?: string;
        "AppId"?: string;
        "GroupId"?: string;
        "Cpu"?: number;
        "Mem"?: number;
        "InstanceNum"?: number;
    }): Promise<{}>;
    ListServiceGroups(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListSlb(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListSubAccount(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListUserDefineRegion(query: {
        "RegionId"?: string;
        "DebugEnable"?: boolean;
    }): Promise<{}>;
    ListVpc(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    MigrateEcu(query: {
        "RegionId"?: string;
        "InstanceIds": string;
        "LogicalRegionId"?: string;
    }): Promise<{}>;
    ModifyScalingRule(query: {
        "RegionId"?: string;
        "AppId": string;
        "GroupId": string;
        "InEnable"?: boolean;
        "InCpu"?: number;
        "InDuration"?: number;
        "InInstanceNum"?: number;
        "InLoad"?: number;
        "InRT"?: number;
        "InStep"?: number;
        "OutCPU"?: number;
        "OutDuration"?: number;
        "OutEnable"?: boolean;
        "OutInstanceNum"?: number;
        "OutLoad"?: number;
        "OutRT"?: number;
        "OutStep"?: number;
        "InCondition"?: string;
        "OutCondition"?: string;
        "ResourceFrom"?: string;
        "MultiAzPolicy"?: string;
        "VpcId"?: string;
        "VSwitchIds"?: string;
        "ScalingPolicy"?: string;
        "TemplateInstanceId"?: string;
        "TemplateInstanceName"?: string;
        "Password"?: string;
        "KeyPairName"?: string;
        "AcceptEULA"?: boolean;
        "TemplateId"?: string;
        "TemplateVersion"?: number;
    }): Promise<{}>;
    QueryApplicationStatus(query: {
        "RegionId"?: string;
        "AppId": string;
    }): Promise<{}>;
    QueryConfigCenter(query: {
        "RegionId"?: string;
        "DataId": string;
        "Group": string;
        "LogicalRegionId": string;
    }): Promise<{}>;
    QueryMigrateRegionList(query: {
        "RegionId"?: string;
        "LogicalRegionId"?: string;
    }): Promise<{}>;
    QueryMonitorInfo(query: {
        "RegionId"?: string;
        "Start": number;
        "End": number;
        "Metric": string;
        "Tags": string;
        "Aggregator": string;
        "Interval"?: string;
    }): Promise<{}>;
    QueryRegionConfig(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ResetApplication(query: {
        "RegionId"?: string;
        "AppId": string;
        "EccInfo": string;
    }): Promise<{}>;
    RollbackApplication(query: {
        "RegionId"?: string;
        "AppId": string;
        "HistoryVersion": string;
        "GroupId": string;
        "Batch"?: number;
        "BatchWaitTime"?: number;
    }): Promise<{}>;
    ScaleInApplication(query: {
        "RegionId"?: string;
        "AppId": string;
        "EccInfo": string;
        "ForceStatus"?: boolean;
    }): Promise<{}>;
    ScaleK8sApplication(query: {
        "RegionId"?: string;
        "AppId": string;
        "Replicas": number;
    }): Promise<{}>;
    StartApplication(query: {
        "RegionId"?: string;
        "AppId": string;
        "EccInfo"?: string;
    }): Promise<{}>;
    StopApplication(query: {
        "RegionId"?: string;
        "AppId": string;
        "EccInfo"?: string;
    }): Promise<{}>;
    SynchronizeResource(query: {
        "RegionId"?: string;
        "Type": string;
    }): Promise<{}>;
    TransformClusterMember(query: {
        "RegionId"?: string;
        "InstanceIds": string;
        "TargetClusterId": string;
        "Password": string;
    }): Promise<{}>;
    UnbindK8sSlb(query: {
        "RegionId"?: string;
        "AppId": string;
        "ClusterId": string;
        "Type": string;
    }): Promise<{}>;
    UnbindSlb(query: {
        "RegionId"?: string;
        "AppId": string;
        "SlbId": string;
        "Type": string;
    }): Promise<{}>;
    UpdateAccountInfo(query: {
        "RegionId"?: string;
        "Name"?: string;
        "Telephone"?: string;
        "Email"?: string;
    }): Promise<{}>;
    UpdateApplicationBaseInfo(query: {
        "RegionId"?: string;
        "AppId": string;
        "AppName"?: string;
        "desc"?: string;
    }): Promise<{}>;
    UpdateContainer(query: {
        "RegionId"?: string;
        "AppId": string;
        "BuildPackId": number;
    }): Promise<{}>;
    UpdateContainerConfiguration(query: {
        "RegionId"?: string;
        "AppId": string;
        "GroupId"?: string;
        "ContextPath"?: string;
        "HttpPort"?: number;
        "MaxThreads"?: number;
        "URIEncoding"?: string;
        "UseBodyEncoding"?: boolean;
    }): Promise<{}>;
    UpdateFlowControl(query: {
        "RegionId"?: string;
        "AppId": string;
        "RuleId": string;
        "Granularity": string;
        "RuleType": string;
        "Threshold": number;
        "ConsumerAppId"?: string;
        "MethodName"?: string;
        "ServiceName"?: string;
        "Strategy"?: string;
        "UrlVar"?: string;
    }): Promise<{}>;
    UpdateHealthCheckUrl(query: {
        "RegionId"?: string;
        "AppId": string;
        "hcURL"?: string;
    }): Promise<{}>;
    UpdateJvmConfiguration(query: {
        "RegionId"?: string;
        "AppId": string;
        "GroupId"?: string;
        "Options"?: string;
        "MinHeapSize"?: number;
        "MaxPermSize"?: number;
        "MaxHeapSize"?: number;
    }): Promise<{}>;
    UpdateK8sApplicationConfig(query: {
        "RegionId"?: string;
        "AppId": string;
        "ClusterId": string;
        "CpuLimit": string;
        "MemoryLimit": string;
    }): Promise<{}>;
    UpdateK8sSlb(query: {
        "RegionId"?: string;
        "AppId": string;
        "ClusterId": string;
        "Type": string;
        "SlbProtocol": string;
        "TargetPort": string;
        "Port": string;
    }): Promise<{}>;
    UpdateRole(query: {
        "RegionId"?: string;
        "RoleId": number;
        "ActionData": string;
    }): Promise<{}>;
    DeleteDeployGroup(query: {
        "RegionId"?: string;
        "AppId": string;
        "GroupName": string;
    }): Promise<{}>;
    DeleteFlowControl(query: {
        "RegionId"?: string;
        "AppId": string;
        "RuleId": string;
    }): Promise<{}>;
    DeleteUserDefineRegion(query: {
        "RegionId"?: string;
        "Id"?: number;
        "RegionTag"?: string;
    }): Promise<{}>;
    DisableDegradeControl(query: {
        "RegionId"?: string;
        "AppId": string;
        "RuleId": string;
    }): Promise<{}>;
    GetCluster(query: {
        "RegionId"?: string;
        "ClusterId": string;
    }): Promise<{}>;
    ListAliyunRegion(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListComponents(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListConfigCenters(query: {
        "RegionId"?: string;
        "Group": string;
        "LogicalRegionId": string;
        "DataIdPattern"?: string;
        "AppName"?: string;
    }): Promise<{}>;
    ListDeployGroup(query: {
        "RegionId"?: string;
        "AppId": string;
    }): Promise<{}>;
    ListMethods(query: {
        "RegionId"?: string;
        "AppId": string;
        "ServiceName": string;
    }): Promise<{}>;
    QueryMigrateEcuList(query: {
        "RegionId"?: string;
        "LogicalRegionId"?: string;
    }): Promise<{}>;
    GetScalingRules(query: {
        "RegionId"?: string;
        "AppId": string;
        "GroupId": string;
        "Mode"?: string;
    }): Promise<{}>;
    InsertApplication(query: {
        "RegionId"?: string;
        "ApplicationName": string;
        "BuildPackId"?: number;
        "ClusterId"?: string;
        "Description"?: string;
        "ReservedPortStr"?: string;
        "EcuInfo"?: string;
        "Cpu"?: number;
        "Mem"?: number;
        "HealthCheckURL"?: string;
        "LogicalRegionId"?: string;
        "Jdk"?: string;
        "WebContainer"?: string;
        "PackageType"?: string;
    }): Promise<{}>;
    InsertClusterMember(query: {
        "RegionId"?: string;
        "clusterId": string;
        "instanceIds": string;
        "password": string;
    }): Promise<{}>;
    InsertRole(query: {
        "RegionId"?: string;
        "RoleName": string;
        "ActionData": string;
    }): Promise<{}>;
    InstallAgent(query: {
        "RegionId"?: string;
        "ClusterId": string;
        "InstanceIds": string;
        "DoAsync"?: boolean;
    }): Promise<{}>;
    ListEcsNotInCluster(query: {
        "RegionId"?: string;
        "NetworkMode": number;
        "VpcId"?: string;
    }): Promise<{}>;
    ListEcuByRegion(query: {
        "RegionId"?: string;
        "Act": string;
        "LogicalRegionId"?: string;
    }): Promise<{}>;
    QueryEccInfo(query: {
        "RegionId"?: string;
        "EccId": string;
    }): Promise<{}>;
    ScaleOutApplication(query: {
        "RegionId"?: string;
        "AppId": string;
        "EcuInfo": string;
        "DeployGroup": string;
    }): Promise<{}>;
    UpdateDegradeControl(query: {
        "RegionId"?: string;
        "AppId": string;
        "RuleId": string;
        "Duration": number;
        "RtThreshold": number;
        "RuleType": string;
        "MethodName"?: string;
        "ServiceName"?: string;
        "UrlVar"?: string;
    }): Promise<{}>;
}
export default EDAS;
