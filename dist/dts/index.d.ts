interface DTS {
    ConfigureMigrationJob(query: {
        "RegionId"?: string;
        "MigrationJobId": string;
        "MigrationJobName": string;
        "SourceEndpoint.InstanceType": string;
        "DestinationEndpoint.InstanceType": string;
        "MigrationMode.StructureIntialization": boolean;
        "MigrationMode.DataIntialization": boolean;
        "MigrationMode.DataSynchronization": boolean;
        "MigrationObject": string;
        "SourceEndpoint.InstanceID"?: string;
        "SourceEndpoint.EngineName"?: string;
        "SourceEndpoint.Region"?: string;
        "SourceEndpoint.IP"?: string;
        "SourceEndpoint.Port"?: string;
        "SourceEndpoint.OracleSID"?: string;
        "SourceEndpoint.DatabaseName"?: string;
        "SourceEndpoint.UserName"?: string;
        "SourceEndpoint.Password"?: string;
        "SourceEndpoint.OwnerID"?: string;
        "SourceEndpoint.Role"?: string;
        "DestinationEndpoint.InstanceID"?: string;
        "DestinationEndpoint.EngineName"?: string;
        "DestinationEndpoint.Region"?: string;
        "DestinationEndpoint.IP"?: string;
        "DestinationEndpoint.Port"?: string;
        "DestinationEndpoint.DataBaseName"?: string;
        "DestinationEndpoint.UserName"?: string;
        "DestinationEndpoint.Password"?: string;
        "MigrationReserved"?: string;
        "Checkpoint"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    ConfigureSubscriptionInstance(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "SubscriptionDataType.DDL": boolean;
        "SubscriptionDataType.DML": boolean;
        "SubscriptionObject": string;
        "SubscriptionInstanceName"?: string;
        "SourceEndpoint.InstanceType"?: string;
        "SourceEndpoint.InstanceID"?: string;
        "SourceEndpoint.IP"?: string;
        "SourceEndpoint.Port"?: string;
        "SourceEndpoint.UserName"?: string;
        "SourceEndpoint.Password"?: string;
        "SourceEndpoint.OracleSID"?: string;
        "SourceEndpoint.DatabaseName"?: string;
        "SourceEndpoint.OwnerID"?: string;
        "SourceEndpoint.Role"?: string;
        "SubscriptionInstanceNetworkType"?: string;
        "SubscriptionInstance.VPCId"?: string;
        "SubscriptionInstance.VSwitchId"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    ConfigureSynchronizationJob(query: {
        "RegionId"?: string;
        "SynchronizationJobId": string;
        "StructureInitialization": boolean;
        "DataInitialization": boolean;
        "SynchronizationObjects": string;
        "SynchronizationJobName"?: string;
        "SynchronizationDirection"?: string;
        "SourceEndpoint.InstanceId"?: string;
        "SourceEndpoint.InstanceType"?: string;
        "SourceEndpoint.IP"?: string;
        "SourceEndpoint.Port"?: string;
        "SourceEndpoint.UserName"?: string;
        "SourceEndpoint.Password"?: string;
        "DestinationEndpoint.InstanceId"?: string;
        "DestinationEndpoint.InstanceType"?: string;
        "DestinationEndpoint.IP"?: string;
        "DestinationEndpoint.Port"?: string;
        "DestinationEndpoint.UserName"?: string;
        "DestinationEndpoint.Password"?: string;
        "SourceEndpoint.OwnerID"?: string;
        "SourceEndpoint.Role"?: string;
        "PartitionKey.ModifyTime_Year"?: boolean;
        "PartitionKey.ModifyTime_Month"?: boolean;
        "PartitionKey.ModifyTime_Day"?: boolean;
        "PartitionKey.ModifyTime_Hour"?: boolean;
        "PartitionKey.ModifyTime_Minute"?: boolean;
        "MigrationReserved"?: string;
        "Checkpoint"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    CreateMigrationJob(query: {
        "RegionId"?: string;
        "Region": string;
        "MigrationJobClass": string;
        "OwnerId"?: string;
        "ClientToken"?: string;
    }): Promise<{}>;
    CreateSubscriptionInstance(query: {
        "RegionId"?: string;
        "Region": string;
        "SourceEndpoint.InstanceType"?: string;
        "PayType"?: string;
        "Period"?: string;
        "UsedTime"?: number;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    CreateSynchronizationJob(query: {
        "RegionId"?: string;
        "SourceRegion": string;
        "DestRegion": string;
        "SynchronizationJobClass": string;
        "PayType": string;
        "Topology"?: string;
        "Period"?: string;
        "UsedTime"?: number;
        "ClientToken"?: string;
        "SourceEndpoint.InstanceType"?: string;
        "DestinationEndpoint.InstanceType"?: string;
        "networkType"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DeleteMigrationJob(query: {
        "RegionId"?: string;
        "MigrationJobId": string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DeleteSubscriptionInstance(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DeleteSynchronizationJob(query: {
        "RegionId"?: string;
        "SynchronizationJobId": string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeEndpointSwitchStatus(query: {
        "RegionId"?: string;
        "TaskId": string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeInitializationStatus(query: {
        "RegionId"?: string;
        "SynchronizationJobId": string;
        "PageSize"?: number;
        "PageNum"?: number;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeMigrationJobDetail(query: {
        "RegionId"?: string;
        "MigrationJobId": string;
        "PageSize"?: number;
        "PageNum"?: number;
        "MigrationMode.StructureInitialization"?: boolean;
        "MigrationMode.DataInitialization"?: boolean;
        "MigrationMode.DataSynchronization"?: boolean;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeMigrationJobStatus(query: {
        "RegionId"?: string;
        "MigrationJobId": string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeMigrationJobs(query: {
        "RegionId"?: string;
        "PageSize"?: number;
        "PageNum"?: number;
        "MigrationJobName"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeSubscriptionInstanceStatus(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeSubscriptionInstances(query: {
        "RegionId"?: string;
        "PageSize"?: number;
        "PageNum"?: number;
        "SubscriptionInstanceName"?: string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeSubscriptionObjectModifyStatus(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeSynchronizationJobStatus(query: {
        "RegionId"?: string;
        "SynchronizationJobId": string;
        "SynchronizationDirection"?: string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeSynchronizationJobs(query: {
        "RegionId"?: string;
        "PageSize"?: number;
        "PageNum"?: number;
        "SynchronizationJobName"?: string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeSynchronizationObjectModifyStatus(query: {
        "RegionId"?: string;
        "TaskId": string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    ModifyConsumptionTimestamp(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "ConsumptionTimestamp": string;
        "OwnerId"?: string;
    }): Promise<{}>;
    ModifyMigrationObject(query: {
        "RegionId"?: string;
        "MigrationJobId": string;
        "MigrationObject": string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    ModifySubscriptionObject(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "SubscriptionObject": string;
        "OwnerId"?: string;
    }): Promise<{}>;
    ModifySynchronizationObject(query: {
        "RegionId"?: string;
        "SynchronizationJobId": string;
        "SynchronizationObjects": string;
        "SynchronizationDirection"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    StartMigrationJob(query: {
        "RegionId"?: string;
        "MigrationJobId": string;
        "OwnerId"?: string;
    }): Promise<{}>;
    StartSubscriptionInstance(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "OwnerId"?: string;
    }): Promise<{}>;
    StartSynchronizationJob(query: {
        "RegionId"?: string;
        "SynchronizationJobId": string;
        "SynchronizationDirection"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    StopMigrationJob(query: {
        "RegionId"?: string;
        "MigrationJobId": string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    SuspendMigrationJob(query: {
        "RegionId"?: string;
        "MigrationJobId": string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    SuspendSynchronizationJob(query: {
        "RegionId"?: string;
        "SynchronizationJobId": string;
        "SynchronizationDirection"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    SwitchSynchronizationEndpoint(query: {
        "RegionId"?: string;
        "SynchronizationJobId": string;
        "Endpoint.Type": string;
        "Endpoint.InstanceType": string;
        "Endpoint.InstanceId": string;
        "Endpoint.Port": string;
        "SynchronizationDirection"?: string;
        "Endpoint.IP"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    CreateConsumerGroup(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "ConsumerGroupName": string;
        "ConsumerGroupUserName": string;
        "ConsumerGroupPassword": string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DeleteConsumerGroup(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "ConsumerGroupID": string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeConsumerGroup(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "PageSize"?: number;
        "PageNum"?: number;
        "OwnerId"?: string;
    }): Promise<{}>;
    ModifyConsumerGroupPassword(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "ConsumerGroupID": string;
        "ConsumerGroupPassword": string;
        "consumerGroupNewPassword": string;
        "ConsumerGroupName"?: string;
        "ConsumerGroupUserName"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    ResetSynchronizationJob(query: {
        "RegionId"?: string;
        "SynchronizationJobId": string;
        "SynchronizationDirection"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    ConfigureMigrationJobAlert(query: {
        "RegionId"?: string;
        "MigrationJobId": string;
        "DelayAlertStatus"?: string;
        "DelayAlertPhone"?: string;
        "ErrorAlertStatus"?: string;
        "ErrorAlertPhone"?: string;
        "DelayOverSeconds"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    ConfigureSubscriptionInstanceAlert(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "DelayAlertStatus"?: string;
        "DelayAlertPhone"?: string;
        "ErrorAlertStatus"?: string;
        "ErrorAlertPhone"?: string;
        "DelayOverSeconds"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    ConfigureSynchronizationJobAlert(query: {
        "RegionId"?: string;
        "SynchronizationJobId": string;
        "SynchronizationDirection"?: string;
        "DelayAlertStatus"?: string;
        "DelayAlertPhone"?: string;
        "ErrorAlertStatus"?: string;
        "ErrorAlertPhone"?: string;
        "DelayOverSeconds"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeMigrationJobAlert(query: {
        "RegionId"?: string;
        "MigrationJobId": string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeSubscriptionInstanceAlert(query: {
        "RegionId"?: string;
        "SubscriptionInstanceId": string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
    DescribeSynchronizationJobAlert(query: {
        "RegionId"?: string;
        "SynchronizationJobId": string;
        "SynchronizationDirection"?: string;
        "ClientToken"?: string;
        "OwnerId"?: string;
    }): Promise<{}>;
}
export default DTS;
