interface EHPC {
    AddContainerApp(query: {
        "RegionId": string;
        "Name": string;
        "Repository": string;
        "Description"?: string;
        "ImageTag"?: string;
        "ContainerType"?: string;
    }): Promise<{}>;
    AddLocalNodes(query: {
        "RegionId": string;
        "ClusterId": string;
        "Nodes": string;
    }): Promise<{}>;
    AddNodes(query: {
        "RegionId": string;
        "ClusterId": string;
        "Count": number;
        "ImageOwnerAlias"?: string;
        "ImageId"?: string;
        "InstanceType"?: string;
        "ComputeSpotStrategy"?: string;
        "ComputeSpotPriceLimit"?: string;
        "EcsChargeType"?: string;
        "Period"?: number;
        "PeriodUnit"?: string;
        "AutoRenew"?: string;
        "AutoRenewPeriod"?: number;
        "JobQueue"?: string;
        "CreateMode"?: string;
        "SystemDiskType"?: string;
        "SystemDiskSize"?: number;
        "ZoneId"?: string;
        "VSwitchId"?: string;
    }): Promise<{}>;
    AddQueue(query: {
        "RegionId": string;
        "ClusterId": string;
        "QueueName": string;
    }): Promise<{}>;
    AddUsers(query: {
        "RegionId": string;
        "ClusterId": string;
        "User": string[];
    }): Promise<{}>;
    CreateCluster(query: {
        "RegionId": string;
        "Name": string;
        "OsTag": string;
        "EcsOrder.Manager.InstanceType": string;
        "EcsOrder.Compute.Count": number;
        "EcsOrder.Compute.InstanceType": string;
        "EcsOrder.Login.Count": number;
        "EcsOrder.Login.InstanceType": string;
        "ZoneId"?: string;
        "Description"?: string;
        "EhpcVersion"?: string;
        "ClientVersion"?: string;
        "AccountType"?: string;
        "SchedulerType"?: string;
        "SecurityGroupId"?: string;
        "SecurityGroupName"?: string;
        "VpcId"?: string;
        "VSwitchId"?: string;
        "VolumeType"?: string;
        "VolumeId"?: string;
        "VolumeProtocol"?: string;
        "VolumeMountpoint"?: string;
        "RemoteDirectory"?: string;
        "DeployMode"?: string;
        "HaEnable"?: boolean;
        "EcsChargeType"?: string;
        "Password"?: string;
        "KeyPairName"?: string;
        "ImageOwnerAlias"?: string;
        "ImageId"?: string;
        "EcsOrder.Manager.Count"?: number;
        "SccClusterId"?: string;
        "ComputeSpotStrategy"?: string;
        "ComputeSpotPriceLimit"?: string;
        "Application"?: string[];
        "AdditionalVolumes"?: string[];
        "PostInstallScript"?: string[];
        "Period"?: number;
        "PeriodUnit"?: string;
        "AutoRenew"?: string;
        "AutoRenewPeriod"?: number;
        "InputFileUrl"?: string;
        "JobQueue"?: string;
        "SystemDiskType"?: string;
        "SystemDiskSize"?: number;
        "RemoteVisEnable"?: string;
        "ResourceGroupId"?: string;
    }): Promise<{}>;
    CreateHybridCluster(query: {
        "RegionId": string;
        "Name": string;
        "OsTag": string;
        "VpcId": string;
        "VSwitchId": string;
        "EcsOrder.Compute.InstanceType": string;
        "ZoneId"?: string;
        "Description"?: string;
        "EhpcVersion"?: string;
        "ClientVersion"?: string;
        "Domain"?: string;
        "Nodes"?: string[];
        "Location"?: string;
        "SecurityGroupId"?: string;
        "SecurityGroupName"?: string;
        "VolumeType"?: string;
        "VolumeId"?: string;
        "VolumeProtocol"?: string;
        "VolumeMountpoint"?: string;
        "RemoteDirectory"?: string;
        "OnPremiseVolumeProtocol"?: string;
        "OnPremiseVolumeMountPoint"?: string;
        "OnPremiseVolumeRemotePath"?: string;
        "OnPremiseVolumeLocalPath"?: string;
        "Password"?: string;
        "KeyPairName"?: string;
        "Application"?: string[];
        "PostInstallScript"?: string[];
        "JobQueue"?: string;
        "ResourceGroupId"?: string;
        "SchedulerPreInstall"?: boolean;
    }): Promise<{}>;
    CreateJobFile(query: {
        "RegionId"?: string;
        "RunasUser": string;
        "RunasUserPassword": string;
        "Content": string;
        "TargetFile": string;
        "ClusterId": string;
    }): Promise<{}>;
    CreateJobTemplate(query: {
        "RegionId"?: string;
        "Name": string;
        "CommandLine": string;
        "RunasUser"?: string;
        "Priority"?: number;
        "PackagePath"?: string;
        "StdoutRedirectPath"?: string;
        "StderrRedirectPath"?: string;
        "ReRunable"?: boolean;
        "ArrayRequest"?: string;
        "Variables"?: string;
    }): Promise<{}>;
    DeleteCluster(query: {
        "RegionId": string;
        "ClusterId": string;
        "ReleaseInstance"?: string;
    }): Promise<{}>;
    DeleteContainerApps(query: {
        "RegionId": string;
        "ContainerApp": string[];
    }): Promise<{}>;
    DeleteImage(query: {
        "RegionId"?: string;
        "ClusterId": string;
        "Repository": string;
        "ImageTag"?: string;
        "ContainerType"?: string;
    }): Promise<{}>;
    DeleteJobTemplates(query: {
        "RegionId"?: string;
        "Templates": string;
    }): Promise<{}>;
    DeleteJobs(query: {
        "RegionId"?: string;
        "Jobs": string;
        "ClusterId": string;
    }): Promise<{}>;
    DeleteNodes(query: {
        "RegionId": string;
        "ClusterId": string;
        "Instance": string[];
        "ReleaseInstance"?: boolean;
    }): Promise<{}>;
    DeleteQueue(query: {
        "RegionId": string;
        "ClusterId": string;
        "QueueName": string;
    }): Promise<{}>;
    DeleteUsers(query: {
        "RegionId": string;
        "ClusterId": string;
        "User": string[];
    }): Promise<{}>;
    DescribeAutoScaleConfig(query: {
        "RegionId": string;
        "ClusterId": string;
    }): Promise<{}>;
    DescribeCluster(query: {
        "RegionId": string;
        "ClusterId": string;
    }): Promise<{}>;
    DescribeContainerApp(query: {
        "RegionId": string;
        "ContainerId": string;
    }): Promise<{}>;
    DescribeImage(query: {
        "RegionId"?: string;
        "ClusterId": string;
        "Repository": string;
        "ImageTag"?: string;
        "ContainerType"?: string;
    }): Promise<{}>;
    DescribeImageGatewayConfig(query: {
        "RegionId": string;
        "ClusterId": string;
    }): Promise<{}>;
    DescribeImagePrice(query: {
        "RegionId": string;
        "ImageId": string;
        "PriceUnit": string;
        "SkuCode": string;
        "Period": number;
        "Amount": number;
        "OrderType"?: string;
    }): Promise<{}>;
    DescribeJob(query: {
        "RegionId": string;
        "ClusterId": string;
        "JobId": string;
    }): Promise<{}>;
    DescribePrice(query: {
        "RegionId": string;
        "Commodities": string[];
        "PriceUnit": string;
        "ChargeType"?: string;
        "OrderType"?: string;
    }): Promise<{}>;
    EditJobTemplate(query: {
        "RegionId"?: string;
        "CommandLine": string;
        "Name": string;
        "TemplateId": string;
        "RunasUser"?: string;
        "Priority"?: number;
        "PackagePath"?: string;
        "StdoutRedirectPath"?: string;
        "StderrRedirectPath"?: string;
        "ReRunable"?: boolean;
        "ArrayRequest"?: string;
        "Variables"?: string;
    }): Promise<{}>;
    GetAccountingReport(query: {
        "RegionId": string;
        "ClusterId": string;
        "StartTime": number;
        "EndTime": number;
        "ReportType"?: string;
    }): Promise<{}>;
    GetAutoScaleConfig(query: {
        "RegionId": string;
        "ClusterId": string;
    }): Promise<{}>;
    GetCloudMetricLogs(query: {
        "RegionId": string;
        "ClusterId": string;
        "From": number;
        "To": number;
        "Reverse"?: boolean;
        "AggregationType"?: string;
        "AggregationInterval"?: number;
        "MetricScope"?: string;
        "Filter"?: string;
        "MetricCategories"?: string;
    }): Promise<{}>;
    GetCloudMetricProfiling(query: {
        "RegionId"?: string;
        "ProfilingId": string;
        "ClusterId": string;
    }): Promise<{}>;
    GetClusterVolumes(query: {
        "RegionId": string;
        "ClusterId": string;
    }): Promise<{}>;
    GetHybridClusterConfig(query: {
        "RegionId": string;
        "ClusterId": string;
        "Node"?: string;
    }): Promise<{}>;
    GetVisualServiceStatus(query: {
        "RegionId"?: string;
        "ClusterId": string;
    }): Promise<{}>;
    InstallSoftware(query: {
        "RegionId": string;
        "ClusterId": string;
        "Application": string;
    }): Promise<{}>;
    InvokeShellCommand(query: {
        "RegionId": string;
        "ClusterId": string;
        "Command": string;
        "Instance"?: string[];
        "WorkingDir"?: string;
        "Timeout"?: number;
    }): Promise<{}>;
    ListAvailableEcsTypes(query: {
        "RegionId": string;
        "ZoneId": string;
        "SpotStrategy"?: string;
        "InstanceChargeType"?: string;
        "ShowSoldOut"?: boolean;
    }): Promise<{}>;
    ListAvailableFileSystemTypes(query: {
        "RegionId": string;
    }): Promise<{}>;
    ListCloudMetricProfilings(query: {
        "RegionId"?: string;
        "ClusterId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListClusterLogs(query: {
        "RegionId": string;
        "ClusterId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListClusters(query: {
        "RegionId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListClustersMeta(query: {
        "RegionId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListCommands(query: {
        "RegionId": string;
        "ClusterId": string;
        "CommandId"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListContainerApps(query: {
        "RegionId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListContainerImages(query: {
        "RegionId"?: string;
        "ClusterId": string;
        "ContainerType"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListCpfsFileSystems(query: {
        "RegionId": string;
        "FileSystemId"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListCurrentClientVersion(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListCustomImages(query: {
        "RegionId"?: string;
        "ImageOwnerAlias"?: string;
        "BaseOsTag"?: string;
    }): Promise<{}>;
    ListFileSystemWithMountTargets(query: {
        "RegionId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListImages(query: {
        "RegionId": string;
    }): Promise<{}>;
    ListInstalledSoftware(query: {
        "RegionId": string;
        "ClusterId": string;
    }): Promise<{}>;
    ListInvocationResults(query: {
        "RegionId": string;
        "ClusterId": string;
        "CommandId": string;
        "InvokeRecordStatus"?: string;
        "Instance"?: string[];
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListInvocationStatus(query: {
        "RegionId": string;
        "ClusterId": string;
        "CommandId": string;
    }): Promise<{}>;
    ListJobTemplates(query: {
        "RegionId"?: string;
        "Name"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListJobs(query: {
        "RegionId"?: string;
        "ClusterId": string;
        "Owner"?: string;
        "State"?: string;
        "Rerunable"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListNodes(query: {
        "RegionId": string;
        "ClusterId": string;
        "Role"?: string;
        "HostName"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListNodesByQueue(query: {
        "RegionId": string;
        "ClusterId": string;
        "QueueName": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListNodesNoPaging(query: {
        "RegionId"?: string;
        "ClusterId": string;
        "Role"?: string;
        "HostName"?: string;
        "OnlyDetached"?: boolean;
    }): Promise<{}>;
    ListPreferredEcsTypes(query: {
        "RegionId": string;
        "ZoneId": string;
        "SpotStrategy"?: string;
        "InstanceChargeType"?: string;
    }): Promise<{}>;
    ListQueues(query: {
        "RegionId": string;
        "ClusterId": string;
    }): Promise<{}>;
    ListRegions(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListSoftwares(query: {
        "RegionId": string;
        "EhpcVersion"?: string;
    }): Promise<{}>;
    ListUsers(query: {
        "RegionId": string;
        "ClusterId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ListVolumes(query: {
        "RegionId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ModifyClusterAttributes(query: {
        "RegionId": string;
        "ClusterId": string;
        "Name"?: string;
        "Description"?: string;
    }): Promise<{}>;
    ModifyContainerAppAttributes(query: {
        "RegionId": string;
        "ContainerId": string;
        "Description"?: string;
    }): Promise<{}>;
    ModifyImageGatewayConfig(query: {
        "RegionId"?: string;
        "ClusterId": string;
        "DBType"?: string;
        "DBUsername"?: string;
        "DBPassword"?: string;
        "DBServerInfo"?: string;
        "DefaultRepoLocation"?: string;
        "PullUpdateTimeout"?: number;
        "ImageExpirationTimeout"?: string;
        "Repo"?: string[];
    }): Promise<{}>;
    ModifyUserGroups(query: {
        "RegionId": string;
        "ClusterId": string;
        "User": string[];
    }): Promise<{}>;
    ModifyUserPasswords(query: {
        "RegionId": string;
        "ClusterId": string;
        "User": string[];
    }): Promise<{}>;
    ModifyVisualServicePasswd(query: {
        "RegionId"?: string;
        "RunasUser": string;
        "RunasUserPassword": string;
        "Passwd": string;
        "ClusterId": string;
    }): Promise<{}>;
    PullImage(query: {
        "RegionId"?: string;
        "Repository": string;
        "ClusterId": string;
        "ImageTag"?: string;
        "ContainerType"?: string;
    }): Promise<{}>;
    RecoverCluster(query: {
        "RegionId": string;
        "ClusterId": string;
        "OsTag"?: string;
        "AccountType"?: string;
        "SchedulerType"?: string;
        "ImageOwnerAlias"?: string;
        "ImageId"?: string;
        "ClientVersion"?: string;
    }): Promise<{}>;
    RerunJobs(query: {
        "RegionId"?: string;
        "Jobs": string;
        "ClusterId": string;
    }): Promise<{}>;
    ResetNodes(query: {
        "RegionId": string;
        "ClusterId": string;
        "Instance": string[];
    }): Promise<{}>;
    RunCloudMetricProfiling(query: {
        "RegionId"?: string;
        "HostName": string;
        "ProcessId": number;
        "ClusterId": string;
        "Duration"?: number;
        "Freq"?: number;
    }): Promise<{}>;
    SetAutoScaleConfig(query: {
        "RegionId": string;
        "ClusterId": string;
        "MaxNodesInCluster": number;
        "EnableAutoGrow"?: boolean;
        "EnableAutoShrink"?: boolean;
        "GrowIntervalInMinutes"?: number;
        "ShrinkIntervalInMinutes"?: number;
        "ShrinkIdleTimes"?: number;
        "GrowTimeoutInMinutes"?: number;
        "ExtraNodesGrowRatio"?: number;
        "GrowRatio"?: number;
        "ExcludeNodes"?: string;
        "SpotStrategy"?: string;
        "SpotPriceLimit"?: number;
        "Queues"?: string[];
    }): Promise<{}>;
    SetJobUser(query: {
        "RegionId"?: string;
        "RunasUser": string;
        "RunasUserPassword": string;
        "ClusterId": string;
    }): Promise<{}>;
    SetQueue(query: {
        "RegionId": string;
        "ClusterId": string;
        "QueueName": string;
        "Node": string[];
    }): Promise<{}>;
    StartCluster(query: {
        "RegionId": string;
        "ClusterId": string;
    }): Promise<{}>;
    StartNodes(query: {
        "RegionId": string;
        "ClusterId": string;
        "Instance": string[];
        "Role"?: string;
    }): Promise<{}>;
    StartVisualService(query: {
        "RegionId"?: string;
        "CidrIp": string;
        "Port": number;
        "ClusterId": string;
    }): Promise<{}>;
    StopCluster(query: {
        "RegionId": string;
        "ClusterId": string;
    }): Promise<{}>;
    StopJobs(query: {
        "RegionId"?: string;
        "Jobs": string;
        "ClusterId": string;
    }): Promise<{}>;
    StopNodes(query: {
        "RegionId": string;
        "ClusterId": string;
        "Instance": string[];
        "Role"?: string;
    }): Promise<{}>;
    StopVisualService(query: {
        "RegionId"?: string;
        "CidrIp": string;
        "Port": number;
        "ClusterId": string;
    }): Promise<{}>;
    SubmitJob(query: {
        "RegionId"?: string;
        "CommandLine": string;
        "RunasUser": string;
        "RunasUserPassword": string;
        "ClusterId": string;
        "Name"?: string;
        "Priority"?: number;
        "PackagePath"?: string;
        "StdoutRedirectPath"?: string;
        "StderrRedirectPath"?: string;
        "ReRunable"?: boolean;
        "ArrayRequest"?: string;
        "Variables"?: string;
        "InputFileUrl"?: string;
        "UnzipCmd"?: string;
        "PostCmdLine"?: string;
        "ContainerId"?: string;
        "JobQueue"?: string;
    }): Promise<{}>;
    UninstallSoftware(query: {
        "RegionId": string;
        "ClusterId": string;
        "Application": string;
    }): Promise<{}>;
    UpdateClusterVolumes(query: {
        "RegionId": string;
        "ClusterId": string;
        "AdditionalVolumes"?: string[];
    }): Promise<{}>;
    UpgradeClient(query: {
        "RegionId": string;
        "ClusterId": string;
        "ClientVersion"?: string;
    }): Promise<{}>;
    QueryServicePackAndPrice(query: {
        "RegionId": string;
    }): Promise<{}>;
    CreateGWSCluster(query: {
        "RegionId"?: string;
        "ClusterType": string;
        "VpcId": string;
        "Name"?: string;
    }): Promise<{}>;
    CreateGWSImage(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "Name"?: string;
    }): Promise<{}>;
    CreateGWSInstance(query: {
        "RegionId"?: string;
        "ImageId": string;
        "SystemDiskSize": number;
        "SystemDiskCategory": string;
        "InstanceType": string;
        "InstanceChargeType": string;
        "WorkMode": string;
        "AllocatePublicAddress": boolean;
        "ClusterId": string;
        "InternetChargeType"?: string;
        "InternetMaxBandwidthIn"?: number;
        "InternetMaxBandwidthOut"?: number;
        "Name"?: string;
        "Period"?: string;
        "PeriodUnit"?: string;
        "AutoRenew"?: boolean;
        "AppList"?: string;
    }): Promise<{}>;
    DeleteGWSCluster(query: {
        "RegionId": string;
        "ClusterId": string;
    }): Promise<{}>;
    DeleteGWSInstance(query: {
        "RegionId": string;
        "InstanceId": string;
    }): Promise<{}>;
    DescribeGWSClusters(query: {
        "RegionId": string;
        "ClusterId"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeGWSImages(query: {
        "RegionId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeGWSInstances(query: {
        "RegionId": string;
        "ClusterId": string;
        "InstanceId"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    GetGWSConnectTicket(query: {
        "RegionId": string;
        "InstanceId": string;
        "AppName"?: string;
    }): Promise<{}>;
    StartGWSInstance(query: {
        "RegionId": string;
        "InstanceId": string;
    }): Promise<{}>;
    StopGWSInstance(query: {
        "RegionId": string;
        "InstanceId": string;
    }): Promise<{}>;
    DescribeNFSClientStatus(query: {
        "RegionId": string;
        "InstanceId": string;
    }): Promise<{}>;
    InstallNFSClient(query: {
        "RegionId": string;
        "InstanceId": string;
    }): Promise<{}>;
    MountNFS(query: {
        "RegionId": string;
        "InstanceId": string;
        "NfsDir": string;
        "MountDir": string;
    }): Promise<{}>;
    UpdateQueueConfig(query: {
        "RegionId": string;
        "ClusterId": string;
        "QueueName": string;
        "ResourceGroupId": string;
        "ComputeInstanceType"?: string;
    }): Promise<{}>;
    SetGWSInstanceUser(query: {
        "RegionId": string;
        "InstanceId": string;
        "UserUid": string;
        "UserName": string;
    }): Promise<{}>;
}
export default EHPC;
