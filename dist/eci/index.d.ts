interface ECI {
    CreateContainerGroup(query: {
        "RegionId": string;
        "SecurityGroupId": string;
        "VSwitchId": string;
        "ContainerGroupName": string;
        "Container": string[];
        "OwnerId"?: number;
        "ZoneId"?: string;
        "RestartPolicy"?: string;
        "Tag"?: string[];
        "ImageRegistryCredential"?: string[];
        "Volume"?: string[];
        "EipInstanceId"?: string;
        "InitContainer"?: string[];
        "DnsConfig.NameServer"?: string[];
        "DnsConfig.Search"?: string[];
        "DnsConfig.Option"?: string[];
        "Cpu"?: number;
        "Memory"?: number;
        "ResourceGroupId"?: string;
        "DnsPolicy"?: string;
        "ClientToken"?: string;
        "HostAliase"?: string[];
        "Arn"?: string[];
        "InstanceType"?: string;
        "SecurityContext.Sysctl"?: string[];
        "SlsEnable"?: boolean;
        "ImageSnapshotId"?: string;
        "RamRoleName"?: string;
        "NtpServer"?: string[];
    }): Promise<{}>;
    DeleteContainerGroup(query: {
        "RegionId": string;
        "ContainerGroupId": string;
        "OwnerId"?: number;
        "ClientToken"?: string;
    }): Promise<{}>;
    DescribeContainerGroups(query: {
        "RegionId": string;
        "OwnerId"?: number;
        "ZoneId"?: string;
        "VSwitchId"?: string;
        "NextToken"?: string;
        "Limit"?: number;
        "Tag"?: string[];
        "ContainerGroupIds"?: string;
        "ContainerGroupName"?: string;
        "Status"?: string;
    }): Promise<{}>;
    DescribeContainerLog(query: {
        "RegionId": string;
        "ContainerGroupId": string;
        "ContainerName": string;
        "OwnerId"?: number;
        "StartTime"?: string;
        "Tail"?: number;
    }): Promise<{}>;
    CreateContainerGroupFromTemplate(query: {
        "RegionId": string;
        "Template": string;
        "OwnerId"?: number;
        "ClientToken"?: string;
    }): Promise<{}>;
    DescribeContainerGroupMetric(query: {
        "RegionId": string;
        "ContainerGroupId": string;
        "OwnerId"?: number;
        "StartTime"?: string;
        "EndTime"?: string;
        "Period"?: string;
    }): Promise<{}>;
    DescribeContainerGroupPrice(query: {
        "RegionId": string;
        "Cpu": number;
        "Memory": number;
        "OwnerId"?: number;
    }): Promise<{}>;
    DescribeMultiContainerGroupMetric(query: {
        "RegionId": string;
        "ContainerGroupIds": string;
        "OwnerId"?: number;
        "ResourceGroupId"?: string;
    }): Promise<{}>;
    ExecContainerCommand(query: {
        "RegionId": string;
        "ContainerGroupId": string;
        "ContainerName": string;
        "Command": string;
        "OwnerId"?: number;
        "TTY"?: boolean;
    }): Promise<{}>;
    ExportContainerGroupTemplate(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "ContainerGroupId"?: string;
    }): Promise<{}>;
    RestartContainerGroup(query: {
        "RegionId": string;
        "ContainerGroupId": string;
        "OwnerId"?: number;
        "ClientToken"?: string;
    }): Promise<{}>;
    UpdateContainerGroup(query: {
        "RegionId": string;
        "ContainerGroupId": string;
        "OwnerId"?: number;
        "RestartPolicy"?: string;
        "Tag"?: string[];
        "Volume"?: string[];
        "DnsConfig.NameServer"?: string[];
        "DnsConfig.Search"?: string[];
        "DnsConfig.Option"?: string[];
        "Container"?: string[];
        "InitContainer"?: string[];
        "ImageRegistryCredential"?: string[];
        "ClientToken"?: string;
        "Cpu"?: number;
        "Memory"?: number;
    }): Promise<{}>;
    UpdateContainerGroupByTemplate(query: {
        "RegionId": string;
        "Template": string;
        "OwnerId"?: number;
        "ClientToken"?: string;
    }): Promise<{}>;
    CreateImageCache(query: {
        "RegionId": string;
        "SecurityGroupId": string;
        "VSwitchId": string;
        "ImageCacheName": string;
        "Image": string[];
        "OwnerId"?: number;
        "ZoneId"?: string;
        "ImageRegistryCredential"?: string[];
        "EipInstanceId"?: string;
        "ResourceGroupId"?: string;
        "ClientToken"?: string;
    }): Promise<{}>;
    DeleteImageCache(query: {
        "RegionId": string;
        "ImageCacheId": string;
        "OwnerId"?: number;
        "ClientToken"?: string;
    }): Promise<{}>;
    DescribeImageCaches(query: {
        "RegionId": string;
        "ImageCacheId"?: string;
        "OwnerId"?: number;
        "ImageCacheName"?: string;
        "SnapshotId"?: string;
        "Image"?: string;
    }): Promise<{}>;
}
export default ECI;
