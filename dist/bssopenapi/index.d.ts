interface BSSOPENAPI {
    ApplyInvoice(query: {
        "RegionId"?: string;
        "InvoiceAmount": number;
        "CustomerId": number;
        "AddressId": number;
        "ApplyUserNick": string;
        "SelectedIds": number[];
        "OwnerId"?: number;
        "InvoicingType"?: number;
        "ProcessWay"?: number;
        "InvoiceByAmount"?: boolean;
    }): Promise<{}>;
    CancelOrder(query: {
        "RegionId"?: string;
        "OrderId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    CreateResourcePackage(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "ProductCode"?: string;
        "PackageType"?: string;
        "EffectiveDate"?: string;
        "Specification"?: string;
        "Duration"?: number;
        "PricingCycle"?: string;
    }): Promise<{}>;
    DescribePricingModule(query: {
        "RegionId"?: string;
        "ProductCode": string;
        "SubscriptionType": string;
        "OwnerId"?: number;
        "ProductType"?: string;
    }): Promise<{}>;
    DescribeResourcePackageProduct(query: {
        "RegionId"?: string;
        "ProductCode"?: string;
    }): Promise<{}>;
    EnableBillGeneration(query: {
        "RegionId"?: string;
        "ProductCode": string;
        "OwnerId": number;
    }): Promise<{}>;
    GetOrderDetail(query: {
        "RegionId"?: string;
        "OrderId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    GetPayAsYouGoPrice(query: {
        "RegionId"?: string;
        "ProductCode": string;
        "SubscriptionType": string;
        "ModuleList": string[];
        "OwnerId"?: number;
        "ProductType"?: string;
        "Region"?: string;
    }): Promise<{}>;
    GetResourcePackagePrice(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "ProductCode"?: string;
        "PackageType"?: string;
        "EffectiveDate"?: string;
        "Specification"?: string;
        "Duration"?: number;
        "PricingCycle"?: string;
        "OrderType"?: string;
        "InstanceId"?: string;
    }): Promise<{}>;
    ModifyInstance(query: {
        "RegionId"?: string;
        "ProductCode": string;
        "SubscriptionType": string;
        "ModifyType": string;
        "OwnerId"?: number;
        "ProductType"?: string;
        "InstanceId"?: string;
        "Parameter"?: string[];
        "ClientToken"?: string;
    }): Promise<{}>;
    QueryAccountBalance(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    QueryAvailableInstances(query: {
        "RegionId"?: string;
        "Region"?: string;
        "OwnerId"?: number;
        "PageNum"?: number;
        "PageSize"?: number;
        "ProductCode"?: string;
        "ProductType"?: string;
        "SubscriptionType"?: string;
        "InstanceIDs"?: string;
        "EndTimeStart"?: string;
        "EndTimeEnd"?: string;
        "CreateTimeStart"?: string;
        "CreateTimeEnd"?: string;
        "RenewStatus"?: string;
    }): Promise<{}>;
    QueryBill(query: {
        "RegionId"?: string;
        "BillingCycle": string;
        "Type"?: string;
        "ProductCode"?: string;
        "ProductType"?: string;
        "SubscriptionType"?: string;
        "IsHideZeroCharge"?: boolean;
        "IsDisplayLocalCurrency"?: boolean;
        "OwnerId"?: number;
        "PageNum"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    QueryBillOverview(query: {
        "RegionId"?: string;
        "BillingCycle": string;
        "ProductCode"?: string;
        "ProductType"?: string;
        "SubscriptionType"?: string;
    }): Promise<{}>;
    QueryCashCoupons(query: {
        "RegionId"?: string;
        "ExpiryTimeEnd"?: string;
        "ExpiryTimeStart"?: string;
        "EffectiveOrNot"?: boolean;
    }): Promise<{}>;
    QueryCustomerAddressList(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
    }): Promise<{}>;
    QueryEvaluateList(query: {
        "RegionId"?: string;
        "Type"?: number;
        "OutBizId"?: string;
        "OwnerId"?: number;
        "PageNum"?: number;
        "PageSize"?: number;
        "StartAmount"?: number;
        "EndAmount"?: number;
        "StartBizTime"?: string;
        "EndBizTime"?: string;
        "SortType"?: number;
        "StartSearchTime"?: string;
        "EndSearchTime"?: string;
        "BillCycle"?: string;
        "BizTypeList"?: string[];
    }): Promise<{}>;
    QueryInstanceBill(query: {
        "RegionId"?: string;
        "BillingCycle": string;
        "ProductCode"?: string;
        "ProductType"?: string;
        "SubscriptionType"?: string;
        "OwnerId"?: number;
        "IsBillingItem"?: boolean;
        "PageNum"?: number;
        "PageSize"?: number;
        "IsHideZeroCharge"?: boolean;
    }): Promise<{}>;
    QueryInstanceGaapCost(query: {
        "RegionId"?: string;
        "BillingCycle": string;
        "PageNum"?: number;
        "PageSize"?: number;
        "ProductCode"?: string;
        "ProductType"?: string;
        "SubscriptionType"?: string;
    }): Promise<{}>;
    QueryInvoicingCustomerList(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
    }): Promise<{}>;
    QueryMonthlyInstanceConsumption(query: {
        "RegionId"?: string;
        "BillingCycle": string;
        "ProductCode"?: string;
        "OwnerId"?: number;
        "PageNum"?: number;
        "PageSize"?: number;
        "ProductType"?: string;
        "SubscriptionType"?: string;
    }): Promise<{}>;
    QueryOrders(query: {
        "RegionId"?: string;
        "CreateTimeEnd"?: string;
        "PageNum"?: number;
        "PageSize"?: number;
        "ProductCode"?: string;
        "ProductType"?: string;
        "SubscriptionType"?: string;
        "OrderType"?: string;
        "PaymentStatus"?: string;
        "CreateTimeStart"?: string;
        "OwnerId"?: number;
    }): Promise<{}>;
    QueryPrepaidCards(query: {
        "RegionId"?: string;
        "ExpiryTimeEnd"?: string;
        "ExpiryTimeStart"?: string;
        "EffectiveOrNot"?: boolean;
    }): Promise<{}>;
    QueryProductList(query: {
        "RegionId"?: string;
        "PageNum": number;
        "QueryTotalCount"?: boolean;
        "PageSize"?: number;
    }): Promise<{}>;
    QueryRedeem(query: {
        "RegionId"?: string;
        "ExpiryTimeStart"?: string;
        "ExpiryTimeEnd"?: string;
        "EffectiveOrNot"?: boolean;
        "PageNum"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    QuerySettlementBill(query: {
        "RegionId"?: string;
        "BillingCycle": string;
        "PageSize"?: number;
        "OwnerId"?: number;
        "PageNum"?: number;
        "StartTime"?: string;
        "EndTime"?: string;
        "Type"?: string;
        "ProductCode"?: string;
        "ProductType"?: string;
        "SubscriptionType"?: string;
        "IsHideZeroCharge"?: boolean;
    }): Promise<{}>;
    QueryUserOmsData(query: {
        "RegionId"?: string;
        "Table": string;
        "DataType": string;
        "StartTime": string;
        "EndTime": string;
        "OwnerId"?: number;
        "Marker"?: string;
        "PageSize"?: number;
    }): Promise<{}>;
    SetRenewal(query: {
        "RegionId"?: string;
        "InstanceIDs": string;
        "RenewalStatus": string;
        "RenewalPeriod"?: number;
        "OwnerId"?: number;
        "ProductCode"?: string;
        "ProductType"?: string;
        "SubscriptionType"?: string;
        "RenewalPeriodUnit"?: string;
    }): Promise<{}>;
    SubscribeBillToOSS(query: {
        "RegionId"?: string;
        "SubscribeBucket": string;
        "SubscribeType"?: string;
        "MultAccountRelSubscribe"?: string;
        "BucketOwnerId"?: number;
    }): Promise<{}>;
    UnsubscribeBillToOSS(query: {
        "RegionId"?: string;
        "SubscribeType": string;
        "MultAccountRelSubscribe"?: string;
    }): Promise<{}>;
    CreateInstance(query: {
        "RegionId"?: string;
        "ProductCode": string;
        "SubscriptionType": string;
        "Parameter"?: string[];
        "OwnerId"?: number;
        "ProductType"?: string;
        "Period"?: number;
        "RenewalStatus"?: string;
        "RenewPeriod"?: number;
        "ClientToken"?: string;
    }): Promise<{}>;
    GetSubscriptionPrice(query: {
        "RegionId"?: string;
        "SubscriptionType": string;
        "ProductCode": string;
        "OrderType": string;
        "ModuleList": string[];
        "ServicePeriodUnit"?: string;
        "OwnerId"?: number;
        "ServicePeriodQuantity"?: number;
        "ProductType"?: string;
        "Region"?: string;
        "InstanceId"?: string;
        "Quantity"?: number;
    }): Promise<{}>;
    ConvertChargeType(query: {
        "RegionId"?: string;
        "SubscriptionType": string;
        "ProductCode": string;
        "InstanceId": string;
        "OwnerId"?: number;
        "ProductType"?: string;
        "Period"?: number;
    }): Promise<{}>;
    QueryMonthlyBill(query: {
        "RegionId"?: string;
        "BillingCycle": string;
    }): Promise<{}>;
    QueryAccountTransactions(query: {
        "RegionId"?: string;
        "TransactionNumber"?: string;
        "RecordID"?: string;
        "TransactionChannelSN"?: string;
        "CreateTimeStart"?: string;
        "CreateTimeEnd"?: string;
        "PageNum"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ChangeResellerConsumeAmount(query: {
        "RegionId"?: string;
        "OwnerId": number;
        "AdjustType": string;
        "Amount": string;
        "Currency": string;
        "BusinessType": string;
        "Source": string;
        "OutBizId": string;
        "ExtendMap"?: string;
    }): Promise<{}>;
    CreateResellerUserQuota(query: {
        "RegionId"?: string;
        "OwnerId": number;
        "Amount": string;
        "Currency": string;
        "OutBizId"?: string;
    }): Promise<{}>;
    QueryResellerAvailableQuota(query: {
        "RegionId"?: string;
        "OwnerId": number;
        "ItemCodes"?: string;
    }): Promise<{}>;
    SetResellerUserAlarmThreshold(query: {
        "RegionId"?: string;
        "OwnerId": number;
        "AlarmType": string;
        "AlarmThresholds"?: string;
    }): Promise<{}>;
    SetResellerUserQuota(query: {
        "RegionId"?: string;
        "OwnerId": number;
        "Amount": string;
        "Currency"?: string;
        "OutBizId"?: string;
    }): Promise<{}>;
    SetResellerUserStatus(query: {
        "RegionId"?: string;
        "OwnerId": string;
        "Status": string;
        "BusinessType": string;
    }): Promise<{}>;
    GetCustomerList(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    GetCustomerAccountInfo(query: {
        "RegionId"?: string;
        "OwnerId": number;
    }): Promise<{}>;
    CreateAgAccount(query: {
        "RegionId"?: string;
        "LoginEmail": string;
        "AccountAttr"?: string;
        "EnterpriseName"?: string;
        "FirstName"?: string;
        "LastName"?: string;
        "NationCode"?: string;
        "ProvinceName"?: string;
        "CityName"?: string;
        "Postcode"?: string;
    }): Promise<{}>;
    QueryResourcePackageInstances(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "ProductCode"?: string;
        "ExpiryTimeStart"?: string;
        "ExpiryTimeEnd"?: string;
        "PageNum"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    RenewInstance(query: {
        "RegionId"?: string;
        "ProductCode": string;
        "InstanceId": string;
        "RenewPeriod": number;
        "ClientToken"?: string;
        "ProductType"?: string;
        "OwnerId"?: number;
    }): Promise<{}>;
    RenewResourcePackage(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "Duration": number;
        "PricingCycle": string;
        "OwnerId"?: number;
        "EffectiveDate"?: string;
    }): Promise<{}>;
    UpgradeResourcePackage(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "InstanceId"?: string;
        "EffectiveDate"?: string;
        "Specification"?: string;
    }): Promise<{}>;
    AllocateFinanceUnitResource(query: {
        "RegionId"?: string;
        "FromUnitUserId": number;
        "FromUnitId": number;
        "ToUnitUserId": number;
        "ToUnitId": number;
        "ResourceInstanceList": string[];
    }): Promise<{}>;
    CreateFinanceUnit(query: {
        "RegionId"?: string;
        "UnitEntityList"?: string[];
    }): Promise<{}>;
    DeleteFinanceUnit(query: {
        "RegionId"?: string;
        "OwnerUid": number;
        "UnitId": number;
    }): Promise<{}>;
    ModifyFinanceUnit(query: {
        "RegionId"?: string;
        "UnitEntityList"?: string[];
    }): Promise<{}>;
    QueryFinanceUnit(query: {
        "RegionId"?: string;
        "OwnerUid": number;
        "UnitId": number;
        "PageNum"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    QueryFinanceUnitResource(query: {
        "RegionId"?: string;
        "OwnerUid": number;
        "UnitId": number;
        "PageNum"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
}
export default BSSOPENAPI;
