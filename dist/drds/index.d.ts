interface DRDS {
    ChangeAccountPassword(query: {
        "RegionId"?: string;
        "AccountName": string;
        "Password": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    ChangeInstanceAzone(query: {
        "RegionId"?: string;
        "OriginAzoneId": string;
        "TargetAzoneId": string;
        "DrdsRegionId": string;
        "DrdsInstanceId": string;
    }): Promise<{
        "code": string;
        "data": {
            "RequestId": string;
            "TaskId": number;
            "Success": boolean;
        };
        "requestId": string;
        "success": boolean;
    }>;
    ChangeInstanceNetwork(query: {
        "RegionId"?: string;
        "SrcInstanceNetworkType": string;
        "DrdsInstanceId": string;
        "VpcId"?: string;
        "VswitchId"?: string;
        "RetainClassic"?: boolean;
        "ClassicExpiredDays"?: number;
    }): Promise<{}>;
    CheckCapacityDataReady(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    CheckDrdsDbName(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    CheckDrdsDefaultRole(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    CheckExpandStatus(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    CheckRdsExpandStatus(query: {
        "RegionId"?: string;
        "DbName": string;
        "InstanceList": string[];
        "DrdsInstanceId": string;
    }): Promise<{}>;
    CheckRdsSuperAccount(query: {
        "RegionId"?: string;
        "DbInstanceId": string;
        "AccountName": string;
        "Password": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    CheckSlsStatus(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    CheckSqlAuditEnableStatus(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    ConfigureDrdsDbInstances(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
        "DbInstance"?: string[];
    }): Promise<{}>;
    CreateDrdsDB(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "DbName"?: string;
        "Encode"?: string;
        "Password"?: string;
        "RdsInstance"?: string[];
        "Type"?: string;
        "DbInstType"?: string;
        "RdsSuperAccount"?: string[];
        "InstDbName"?: string[];
        "DbInstanceIsCreating"?: boolean;
        "AccountName"?: string;
    }): Promise<{}>;
    CreateDrdsDBPreCheck(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "DbName"?: string;
        "Encode"?: string;
        "Password"?: string;
        "RdsInstance"?: string[];
        "Type"?: string;
        "DbInstType"?: string;
        "RdsSuperAccount"?: string[];
        "InstDbName"?: string[];
        "DbInstanceIsCreating"?: boolean;
        "AccountName"?: string;
    }): Promise<{}>;
    CreateDrdsDBPreview(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "DbName"?: string;
        "AccountName"?: string;
        "RdsInstance"?: string[];
        "Type"?: string;
        "DbInstType"?: string;
        "InstDbName"?: string[];
        "DbInstanceIsCreating"?: boolean;
        "OrderId"?: string;
    }): Promise<{}>;
    CreateInstanceAccount(query: {
        "RegionId"?: string;
        "AccountName": string;
        "Password": string;
        "DbPrivilege": string[];
        "DrdsInstanceId": string;
    }): Promise<{}>;
    CreateInstanceInternetAddress(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "DrdsPassword"?: string;
    }): Promise<{}>;
    CreateOrderForRds(query: {
        "RegionId"?: string;
        "Params": string;
    }): Promise<{}>;
    CreateShardTask(query: {
        "RegionId"?: string;
        "DbName": string;
        "SourceTableName": string;
        "TargetTableName": string;
        "TaskType": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DatalinkReplicationPrecheck(query: {
        "RegionId"?: string;
        "DbName": string;
        "SrcTableName": string;
        "DstTableName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DeleteShardTasks(query: {
        "RegionId"?: string;
        "DbName": string;
        "TableName": string[];
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeBackMenu(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeBackupDbs(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "PreferredRestoreTime"?: string;
        "BackupId"?: string;
    }): Promise<{}>;
    DescribeBackupLocal(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeBackupPolicy(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeBackupSets(query: {
        "RegionId"?: string;
        "StartTime": string;
        "EndTime": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeBackupTimes(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeBroadcastTables(query: {
        "RegionId"?: string;
        "DbName": string;
        "Query"?: string;
        "DrdsInstanceId": string;
        "PageSize"?: number;
        "CurrentPage"?: number;
    }): Promise<{}>;
    DescribeCanExpandInstanceDetailList(query: {
        "RegionId"?: string;
        "DbName": string;
        "CurrentPlan": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeCandidateInstanceList(query: {
        "RegionId"?: string;
        "DbName": string;
        "PageSize": number;
        "PageNumber": number;
        "DrdsInstanceId": string;
        "Search"?: string;
        "AcrossZone"?: boolean;
    }): Promise<{}>;
    DescribeConsoleConfig(query: {
        "RegionId"?: string;
        "Type": string;
    }): Promise<{}>;
    DescribeDbInstanceDbs(query: {
        "RegionId"?: string;
        "DbInstanceId": string;
        "DrdsInstanceId": string;
        "AccountName"?: string;
        "Password"?: string;
        "DbInstType"?: string;
    }): Promise<{}>;
    DescribeDbInstances(query: {
        "RegionId": string;
        "DrdsInstanceId": string;
        "Search"?: string;
        "DbInstType"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeDrdsDB(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeDrdsDBCluster(query: {
        "RegionId"?: string;
        "DbName": string;
        "DbInstanceId": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeDrdsDBIpWhiteList(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
        "GroupName"?: string;
    }): Promise<{}>;
    DescribeDrdsDBs(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeDrdsDbInstance(query: {
        "RegionId"?: string;
        "DbName": string;
        "DbInstanceId": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeDrdsDbInstances(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeDrdsDbRdsNameList(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeDrdsDbRdsRelationInfo(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeDrdsDbRelationInfo(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeDrdsDbTasks(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
        "TaskType"?: string;
    }): Promise<{}>;
    DescribeDrdsInstance(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeDrdsInstanceDbMonitor(query: {
        "RegionId"?: string;
        "DbName": string;
        "Key": string;
        "StartTime": number;
        "EndTime": number;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeDrdsInstanceLevelTasks(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeDrdsInstanceMonitor(query: {
        "RegionId"?: string;
        "Key": string;
        "StartTime": number;
        "EndTime": number;
        "DrdsInstanceId": string;
        "PeriodMultiple"?: number;
    }): Promise<{}>;
    DescribeDrdsInstanceVersion(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeDrdsInstances(query: {
        "RegionId": string;
        "Type"?: string;
        "Tag"?: string[];
        "Description"?: string;
        "Expired"?: boolean;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeDrdsParams(query: {
        "RegionId"?: string;
        "ParamLevel": string;
        "DrdsInstanceId": string;
        "DbName"?: string;
    }): Promise<{}>;
    DescribeDrdsRegions(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    DescribeDrdsShardingDbs(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
        "DbNamePattern"?: string;
    }): Promise<{}>;
    DescribeDrdsSlowSqls(query: {
        "RegionId"?: string;
        "StartTime": number;
        "EndTime": number;
        "DrdsInstanceId": string;
        "DbName": string;
        "ExeTime": number;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeDrdsSqlAuditStatus(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeDrdsTasks(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "DbName"?: string;
        "TaskType"?: string;
    }): Promise<{}>;
    DescribeExpandLogicTableInfoList(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeGlobalBroadcastType(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeHiStoreInstanceInfo(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "HistoreInstanceId": string;
    }): Promise<{}>;
    DescribeHotDbList(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeInstDbLogInfo(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeInstDbSlsInfo(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeInstanceAccounts(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeInstanceMenuSwitch(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeInstanceSwitchAzone(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeInstanceSwitchNetwork(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribePreCheckResult(query: {
        "RegionId"?: string;
        "TaskId": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeRDSPerformance(query: {
        "RegionId"?: string;
        "RdsInstanceId": string;
        "Keys": string;
        "DrdsInstanceId": string;
        "StartTime"?: number;
        "EndTime"?: number;
        "DbInstType"?: string;
    }): Promise<{}>;
    DescribeRdsCommodity(query: {
        "RegionId": string;
        "DrdsInstanceId": string;
        "CommodityCode": string;
        "OrderType"?: string;
    }): Promise<{}>;
    DescribeRdsPerformanceSummary(query: {
        "RegionId"?: string;
        "RdsInstanceId": string[];
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeRdsPrice(query: {
        "RegionId"?: string;
        "Params": string;
    }): Promise<{}>;
    DescribeRdsSuperAccountInstances(query: {
        "RegionId"?: string;
        "RdsInstance": string[];
        "DrdsInstanceId": string;
        "DbInstType"?: string;
    }): Promise<{}>;
    DescribeRdsVpcForZone(query: {
        "RegionId": string;
        "ZoneId": string;
    }): Promise<{}>;
    DescribeRecycleBinStatus(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeRecycleBinTables(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeRestoreOrder(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "PreferredBackupTime"?: string;
        "BackupMode"?: string;
        "BackupLevel"?: string;
        "BackupDbNames"?: string;
        "BackupId"?: string;
    }): Promise<{}>;
    DescribeShardTaskInfo(query: {
        "RegionId"?: string;
        "DbName": string;
        "SourceTableName": string;
        "TargetTableName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeShardTaskList(query: {
        "RegionId"?: string;
        "DbName": string;
        "TaskType": string;
        "Query"?: string;
        "DrdsInstanceId": string;
        "PageSize"?: number;
        "CurrentPage"?: number;
    }): Promise<{}>;
    DescribeSqlFlashbakTask(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeSrcRdsList(query: {
        "RegionId"?: string;
        "DbName": string;
        "PartitionMapping": string[];
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeStorageInstanceSubDbInfo(query: {
        "RegionId"?: string;
        "DbName": string;
        "InstanceId": string;
        "DrdsInstanceId": string;
        "InstType"?: string;
    }): Promise<{}>;
    DescribeTable(query: {
        "RegionId"?: string;
        "DbName": string;
        "TableName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeTableListByType(query: {
        "RegionId"?: string;
        "DbName": string;
        "TableType": string;
        "Query"?: string;
        "DrdsInstanceId": string;
        "PageSize"?: number;
        "CurrentPage"?: number;
    }): Promise<{}>;
    DescribeTables(query: {
        "RegionId"?: string;
        "DbName": string;
        "Query"?: string;
        "DrdsInstanceId": string;
        "PageSize"?: number;
        "CurrentPage"?: number;
    }): Promise<{}>;
    DisableSqlAudit(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    EnableInstanceIpv6Address(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "DrdsPassword"?: string;
    }): Promise<{}>;
    EnableSqlAudit(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
        "IsRecall"?: boolean;
        "RecallStartTimestamp"?: string;
        "RecallEndTimestamp"?: string;
    }): Promise<{}>;
    EnableSqlFlashbackMatchSwitch(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    FlashbackRecycleBinTable(query: {
        "RegionId"?: string;
        "DbName": string;
        "TableName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    GetCandidateInstanceList(query: {
        "RegionId"?: string;
        "DbName": string;
        "Search": string;
        "AcrossZone": boolean;
        "PageSize": number;
        "PageNumber": number;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    GetExpandLogicTableInfoList(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    GetHotDbList(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    GetLogicTableInfoList(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    GetSrcRdsList(query: {
        "RegionId"?: string;
        "DbName": string;
        "PartitionMapping": string[];
        "DrdsInstanceId": string;
    }): Promise<{}>;
    ListTagResources(query: {
        "RegionId": string;
        "ResourceType": string;
        "Tag"?: string[];
        "ResourceId"?: string[];
        "NoRole"?: boolean;
        "NextToken"?: string;
    }): Promise<{}>;
    MigrateJstDrdsDbAcrossRegion(query: {
        "RegionId"?: string;
        "DbName": string;
        "DstDrdsInstanceId": string;
        "SrcDrdsInstanceId": string;
    }): Promise<{}>;
    ModifyAccountDescription(query: {
        "RegionId"?: string;
        "AccountName": string;
        "Description": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    ModifyAccountPrivilege(query: {
        "RegionId"?: string;
        "AccountName": string;
        "DbPrivilege": string[];
        "DrdsInstanceId": string;
    }): Promise<{}>;
    ModifyDrdsInstanceDescription(query: {
        "RegionId"?: string;
        "Description": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    ModifyDrdsIpWhiteList(query: {
        "RegionId"?: string;
        "DbName": string;
        "IpWhiteList": string;
        "Mode"?: boolean;
        "GroupName"?: string;
        "GroupAttribute"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    ModifyPolarDbReadWeight(query: {
        "RegionId"?: string;
        "DbName": string;
        "DbNodeIds": string;
        "DbInstanceId": string;
        "Weights": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    ModifyRdsReadWeight(query: {
        "RegionId"?: string;
        "DbName": string;
        "InstanceNames": string;
        "Weights": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    PreCheckCreateHiStoreInstance(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "DrdsPassword"?: string;
    }): Promise<{}>;
    PreCheckSqlFlashbackTask(query: {
        "RegionId"?: string;
        "DbName": string;
        "StartTime": string;
        "EndTime": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    PutRestorePreCheck(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "PreferredBackupTime"?: string;
        "BackupMode"?: string;
        "BackupLevel"?: string;
        "BackupDbNames"?: string;
        "BackupId"?: string;
    }): Promise<{}>;
    PutStartBackup(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "BackupMode"?: string;
        "BackupLevel"?: string;
        "BackupDbNames"?: string;
    }): Promise<{}>;
    RearrangeDbToInstance(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
        "ChooseSubDb"?: string;
        "ChooseRds"?: string;
        "InstanceList"?: string[];
        "OrderId"?: string;
    }): Promise<{}>;
    RefreshDrdsAtomUrl(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    RefreshJstMigrateDrdsDbAtomUrl(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    ReleaseHiStoreInstance(query: {
        "RegionId"?: string;
        "HistoreInstanceId": string;
        "DrdsInstanceId": string;
        "DrdsPassword"?: string;
    }): Promise<{}>;
    ReleaseInstanceInternetAddress(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "DrdsPassword"?: string;
    }): Promise<{}>;
    RemoveBackupsSet(query: {
        "RegionId"?: string;
        "BackupId": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    RemoveDrdsDb(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    RemoveDrdsDbFailedRecord(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    RemoveDrdsInstance(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    RemoveInstanceAccount(query: {
        "RegionId"?: string;
        "AccountName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    RemoveRecycleBinTable(query: {
        "RegionId"?: string;
        "DbName": string;
        "TableName"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    ResetDrdsToRdsConnections(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    RestartDrdsInstance(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    RollbackHiStoreInstance(query: {
        "RegionId"?: string;
        "HistoreInstanceId": string;
        "DrdsInstanceId": string;
        "DrdsPassword"?: string;
    }): Promise<{}>;
    RollbackInstanceVersion(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "DrdsPassword"?: string;
    }): Promise<{}>;
    SetBackupLocal(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "LocalLogRetentionHours"?: string;
        "LocalLogRetentionSpace"?: string;
        "HighSpaceUsageProtection"?: string;
    }): Promise<{}>;
    SetBackupPolicy(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "PreferredBackupPeriod"?: string;
        "PreferredBackupStartTime"?: string;
        "PreferredBackupEndTime"?: string;
        "BackupMode"?: string;
        "BackupLevel"?: string;
        "BackupDbNames"?: string;
        "BackupLog"?: string;
        "DataBackupRetentionPeriod"?: string;
        "LogBackupRetentionPeriod"?: string;
    }): Promise<{}>;
    SetupBroadcastTables(query: {
        "RegionId"?: string;
        "DbName": string;
        "Active": boolean;
        "TableName": string[];
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SetupDrdsParams(query: {
        "RegionId"?: string;
        "ParamLevel": string;
        "Data": string[];
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SetupRecycleBinStatus(query: {
        "RegionId"?: string;
        "DbName": string;
        "StatusAction": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SetupTable(query: {
        "RegionId"?: string;
        "DbName": string;
        "AllowFullTableScan": boolean;
        "TableName": string[];
        "DrdsInstanceId": string;
    }): Promise<{}>;
    StartRestore(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "PreferredBackupTime"?: string;
        "BackupMode"?: string;
        "BackupLevel"?: string;
        "BackupDbNames"?: string;
        "BackupId"?: string;
    }): Promise<{}>;
    SubmitCleanTask(query: {
        "RegionId"?: string;
        "DbName": string;
        "ParentJobId": string;
        "JobId": string;
        "ExpandType": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SubmitHotExpandPreCheckTask(query: {
        "RegionId"?: string;
        "DbName": string;
        "DbInstType": string;
        "DrdsInstanceId": string;
        "TableList"?: string[];
    }): Promise<{}>;
    SubmitHotExpandTask(query: {
        "RegionId"?: string;
        "DbName": string;
        "InstanceDbMapping": string[];
        "Mapping": string[];
        "ExtendedMapping": string[];
        "DrdsInstanceId": string;
        "TaskName"?: string;
        "TaskDesc"?: string;
        "SupperAccountMapping"?: string[];
    }): Promise<{}>;
    SubmitRollbackTask(query: {
        "RegionId"?: string;
        "DbName": string;
        "ParentJobId": string;
        "JobId": string;
        "ExpandType": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SubmitSmoothExpandPreCheck(query: {
        "RegionId"?: string;
        "DbName": string;
        "DbInstType": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SubmitSmoothExpandPreCheckTask(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SubmitSmoothExpandTask(query: {
        "RegionId"?: string;
        "DbName": string;
        "TransferTaskInfos": string[];
        "DrdsInstanceId": string;
        "RdsSuperInstances"?: string[];
        "DbInstanceIsCreating"?: boolean;
    }): Promise<{}>;
    SubmitSqlFlashbackTask(query: {
        "RegionId"?: string;
        "DbName": string;
        "StartTime": string;
        "EndTime": string;
        "RecallRestoreType": number;
        "DrdsInstanceId": string;
        "TraceId"?: string;
        "TableName"?: string;
        "SqlType"?: string;
        "SqlPk"?: string;
        "RecallType"?: number;
    }): Promise<{}>;
    SubmitSwitchTask(query: {
        "RegionId"?: string;
        "DbName": string;
        "ParentJobId": string;
        "JobId": string;
        "ExpandType": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SwitchGlobalBroadcastType(query: {
        "RegionId"?: string;
        "DbName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    TagResources(query: {
        "RegionId": string;
        "ResourceType": string;
        "Tag": string[];
        "ResourceId": string[];
        "NoRole"?: boolean;
    }): Promise<{}>;
    UntagResources(query: {
        "RegionId": string;
        "ResourceType": string;
        "ResourceId": string[];
        "All"?: boolean;
        "NoRole"?: boolean;
        "TagKey"?: string[];
    }): Promise<{}>;
    UpdateInstanceNetwork(query: {
        "RegionId"?: string;
        "SrcInstanceNetworkType": string;
        "DrdsInstanceId": string;
        "RetainClassic"?: boolean;
        "ClassicExpiredDays"?: number;
    }): Promise<{}>;
    UpgradeHiStoreInstance(query: {
        "RegionId"?: string;
        "HistoreInstanceId": string;
        "DrdsInstanceId": string;
        "DrdsPassword"?: string;
    }): Promise<{}>;
    UpgradeInstanceVersion(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "DrdsPassword"?: string;
        "Rpm"?: string;
    }): Promise<{}>;
    ValidateShardTask(query: {
        "RegionId"?: string;
        "DbName": string;
        "SourceTableName": string;
        "TargetTableName": string;
        "TaskType": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    InnerDescribeDrdsInstances(query: {
        "RegionId": string;
        "Aliuid": string;
        "Type"?: string;
        "Bid"?: string;
        "Tag"?: string[];
        "Description"?: string;
        "Expired"?: boolean;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    InnerGetUserList(query: {
        "RegionId": string;
    }): Promise<{}>;
    DescribeEventSummary(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    DescribeEventTasks(query: {
        "RegionId"?: string;
        "PageNumber": number;
        "PageSize": number;
        "Region": string;
        "EventId": string;
    }): Promise<{}>;
    DescribeHistoryEventTasks(query: {
        "RegionId"?: string;
        "PageNumber": number;
        "PageSize": number;
        "EndTime": number;
        "StartTime": number;
    }): Promise<{}>;
    ModifyEventTaskStatus(query: {
        "RegionId"?: string;
        "Region": string;
        "Ids": string;
        "EventId": string;
        "SwitchTime"?: number;
    }): Promise<{}>;
    ListUserReports(query: {
        "RegionId"?: string;
        "ReportId": number;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    ListVersions(query: {
        "RegionId"?: string;
        "DrdsInstanceId": string;
        "DrdsVer"?: string;
    }): Promise<{}>;
    SqlCompatibilityCancel(query: {
        "RegionId"?: string;
        "TaskId": number;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SqlCompatibilityStart(query: {
        "RegionId"?: string;
        "TargetVersion": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    DescribeTableShardingInfo(query: {
        "RegionId"?: string;
        "DbName": string;
        "TableName": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    PreCheckModifyTableShardingKeyParam(query: {
        "RegionId"?: string;
        "DbName": string;
        "SrcTableName": string;
        "TargetTableName": string;
        "IsShard": boolean;
        "DbShardingColumnList"?: string;
        "DbShardingFunction"?: string;
        "DbRightShiftOffset"?: number;
        "TbShardingColumnList"?: string;
        "TbShardingFunction"?: string;
        "TbRightShiftOffset"?: string;
        "TbPartitions"?: string;
        "TbComputeLength"?: string;
        "DbComputeLength"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SubmitCleanTableShardingKeyModify(query: {
        "RegionId"?: string;
        "DbName": string;
        "TaskId": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SubmitRollbackShardingKeyModify(query: {
        "RegionId"?: string;
        "DbName": string;
        "TaskId": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SubmitSwitchTableShardingKeyModify(query: {
        "RegionId"?: string;
        "DbName": string;
        "TaskId": string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
    SubmitTableShardingKeyModify(query: {
        "RegionId"?: string;
        "DbName": string;
        "SrcTableName": string;
        "TargetTableName": string;
        "IsShard": boolean;
        "DbShardingColumnList"?: string;
        "DbShardingFunction"?: string;
        "DbRightShiftOffset"?: number;
        "TbShardingColumnList"?: string;
        "TbShardingFunction"?: string;
        "TbRightShiftOffset"?: string;
        "TbPartitions"?: string;
        "TbComputeLength"?: string;
        "DbComputeLength"?: string;
        "DrdsInstanceId": string;
    }): Promise<{}>;
}
export default DRDS;
