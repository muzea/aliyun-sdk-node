interface ACTIONTRAIL {
    DescribeRegions(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    CreateTrail(query: {
        "RegionId"?: string;
        "Name"?: string;
        "OssBucketName"?: string;
        "OssKeyPrefix"?: string;
        "RoleName"?: string;
        "SlsProjectArn"?: string;
        "SlsWriteRoleArn"?: string;
        "EventRW"?: string;
    }): Promise<{}>;
    DeleteTrail(query: {
        "RegionId"?: string;
        "Name"?: string;
    }): Promise<{}>;
    DescribeTrails(query: {
        "RegionId"?: string;
        "IncludeShadowTrails"?: boolean;
        "NameList"?: string;
    }): Promise<{}>;
    GetTrailStatus(query: {
        "RegionId"?: string;
        "Name"?: string;
    }): Promise<{}>;
    LookupEvents(query: {
        "RegionId"?: string;
        "Event"?: string;
        "Request"?: string;
        "EventType"?: string;
        "ServiceName"?: string;
        "EventName"?: string;
        "User"?: string;
        "ResourceType"?: string;
        "ResourceName"?: string;
        "EventRW"?: string;
        "EventAccessKeyId"?: string;
        "NextToken"?: string;
        "MaxResults"?: string;
        "StartTime"?: string;
        "EndTime"?: string;
    }): Promise<{}>;
    StartLogging(query: {
        "RegionId"?: string;
        "Name"?: string;
    }): Promise<{}>;
    StopLogging(query: {
        "RegionId"?: string;
        "Name"?: string;
    }): Promise<{}>;
    UpdateTrail(query: {
        "RegionId"?: string;
        "Name"?: string;
        "OssBucketName"?: string;
        "OssKeyPrefix"?: string;
        "RoleName"?: string;
        "SlsProjectArn"?: string;
        "SlsWriteRoleArn"?: string;
        "EventRW"?: string;
    }): Promise<{}>;
}
export default ACTIONTRAIL;
