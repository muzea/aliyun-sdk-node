interface POLARDB {
    CreateAccount(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "AccountName": string;
        "AccountPassword": string;
        "OwnerId"?: number;
        "AccountType"?: string;
        "AccountDescription"?: string;
        "DBName"?: string;
        "AccountPrivilege"?: string;
    }): Promise<{}>;
    CreateBackup(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    CreateDBCluster(query: {
        "RegionId": string;
        "DBType": string;
        "DBVersion": string;
        "DBNodeClass": string;
        "PayType": string;
        "OwnerId"?: number;
        "ZoneId"?: string;
        "Engine"?: string;
        "ClusterNetworkType"?: string;
        "DBClusterDescription"?: string;
        "AutoRenew"?: boolean;
        "Period"?: string;
        "UsedTime"?: string;
        "VPCId"?: string;
        "VSwitchId"?: string;
        "CreationOption"?: string;
        "SourceResourceId"?: string;
        "CloneDataPoint"?: string;
        "ClientToken"?: string;
    }): Promise<{}>;
    CreateDBClusterEndpoint(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "EndpointType": string;
        "OwnerId"?: number;
        "Nodes"?: string;
        "ReadWriteMode"?: string;
        "AutoAddNewNodes"?: string;
        "EndpointConfig"?: string;
        "ClientToken"?: string;
    }): Promise<{}>;
    CreateDBEndpointAddress(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "DBEndpointId": string;
        "NetType": string;
        "OwnerId"?: number;
        "ConnectionStringPrefix"?: string;
    }): Promise<{}>;
    CreateDBNodes(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "DBNode": string[];
        "OwnerId"?: number;
        "ClientToken"?: string;
    }): Promise<{}>;
    CreateDatabase(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "DBName": string;
        "CharacterSetName": string;
        "OwnerId"?: number;
        "DBDescription"?: string;
        "AccountName"?: string;
        "AccountPrivilege"?: string;
        "Collate"?: string;
        "Ctype"?: string;
    }): Promise<{}>;
    DeleteAccount(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "AccountName": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DeleteBackup(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "BackupId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DeleteDBCluster(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DeleteDBClusterEndpoint(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "DBEndpointId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DeleteDBEndpointAddress(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "DBEndpointId": string;
        "NetType": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DeleteDBNodes(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "DBNodeId": string[];
        "OwnerId"?: number;
        "ClientToken"?: string;
    }): Promise<{}>;
    DeleteDatabase(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "DBName": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DescribeAccounts(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "OwnerId"?: number;
        "AccountName"?: string;
    }): Promise<{}>;
    DescribeAutoRenewAttribute(query: {
        "RegionId": string;
        "OwnerId"?: number;
        "DBClusterIds"?: string;
        "PageSize"?: number;
        "PageNumber"?: number;
    }): Promise<{}>;
    DescribeBackupPolicy(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DescribeBackups(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "StartTime": string;
        "EndTime": string;
        "OwnerId"?: number;
        "BackupId"?: string;
        "BackupStatus"?: string;
        "BackupMode"?: string;
        "PageSize"?: number;
        "PageNumber"?: number;
    }): Promise<{}>;
    DescribeDBClusterAccessWhitelist(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DescribeDBClusterAttribute(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DescribeDBClusterEndpoints(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "OwnerId"?: number;
        "DBEndpointId"?: string;
    }): Promise<{}>;
    DescribeDBClusterParameters(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DescribeDBClusters(query: {
        "RegionId": string;
        "OwnerId"?: number;
        "DBClusterIds"?: string;
        "DBClusterDescription"?: string;
        "DBClusterStatus"?: string;
        "DBType"?: string;
        "Tag"?: string[];
        "PageSize"?: number;
        "PageNumber"?: number;
    }): Promise<{}>;
    DescribeDatabases(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "OwnerId"?: number;
        "DBName"?: string;
    }): Promise<{}>;
    DescribeRegions(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
    }): Promise<{}>;
    GrantAccountPrivilege(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "AccountName": string;
        "DBName": string;
        "AccountPrivilege": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    ModifyAccountDescription(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "AccountName": string;
        "AccountDescription": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    ModifyAccountPassword(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "AccountName": string;
        "NewAccountPassword": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    ModifyAutoRenewAttribute(query: {
        "RegionId": string;
        "DBClusterIds": string;
        "OwnerId"?: number;
        "RenewalStatus"?: string;
        "Duration"?: string;
        "PeriodUnit"?: string;
    }): Promise<{}>;
    ModifyBackupPolicy(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "PreferredBackupTime": string;
        "PreferredBackupPeriod": string;
        "OwnerId"?: number;
        "BackupRetentionPeriod"?: string;
    }): Promise<{}>;
    ModifyDBClusterAccessWhitelist(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "SecurityIps": string;
        "OwnerId"?: number;
        "DBClusterIPArrayName"?: string;
        "DBClusterIPArrayAttribute"?: string;
    }): Promise<{}>;
    ModifyDBClusterDescription(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "DBClusterDescription": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    ModifyDBClusterEndpoint(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "DBEndpointId": string;
        "OwnerId"?: number;
        "Nodes"?: string;
        "ReadWriteMode"?: string;
        "AutoAddNewNodes"?: string;
        "EndpointConfig"?: string;
    }): Promise<{}>;
    ModifyDBClusterMaintainTime(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "MaintainTime": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    ModifyDBClusterParameters(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "Parameters": string;
        "OwnerId"?: number;
        "EffectiveTime"?: string;
    }): Promise<{}>;
    ModifyDBDescription(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "DBName": string;
        "DBDescription": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    ModifyDBEndpointAddress(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "DBEndpointId": string;
        "NetType": string;
        "OwnerId"?: number;
        "ConnectionStringPrefix"?: string;
    }): Promise<{}>;
    ModifyDBNodeClass(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "ModifyType": string;
        "DBNodeTargetClass": string;
        "OwnerId"?: number;
        "ClientToken"?: string;
    }): Promise<{}>;
    ResetAccount(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "AccountName": string;
        "AccountPassword": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    RestartDBNode(query: {
        "RegionId"?: string;
        "DBNodeId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    RevokeAccountPrivilege(query: {
        "RegionId"?: string;
        "DBClusterId": string;
        "AccountName": string;
        "DBName": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    TagResources(query: {
        "RegionId": string;
        "ResourceType": string;
        "ResourceId": string[];
        "Tag": string[];
        "OwnerId"?: number;
    }): Promise<{}>;
    UntagResources(query: {
        "RegionId": string;
        "ResourceType": string;
        "ResourceId": string[];
        "OwnerId"?: number;
        "TagKey"?: string[];
        "All"?: boolean;
    }): Promise<{}>;
    CloseDBClusterMigration(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "DBClusterId": string;
        "ContinueEnableBinlog"?: boolean;
    }): Promise<{}>;
    DescribeDBClusterMigration(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "DBClusterId": string;
    }): Promise<{}>;
    ModifyDBClusterMigration(query: {
        "RegionId"?: string;
        "SourceRDSDBInstanceId": string;
        "NewMasterInstanceId": string;
        "OwnerId"?: number;
        "DBClusterId": string;
    }): Promise<{}>;
    ModifyDBNodeConfig(query: {
        "RegionId"?: string;
        "DBNodeId": string;
        "ConfigName": string;
        "ConfigValue": string;
        "OwnerId"?: number;
        "DBClusterId": string;
    }): Promise<{}>;
}
export default POLARDB;
