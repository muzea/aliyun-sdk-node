interface GAMESHIELD {
    CleanFlexFwdRules(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    ClearCcRouteRules(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    CreateApp(query: {
        "RegionId"?: string;
        "AppName": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    CreateAppKey(query: {
        "RegionId"?: string;
        "AppId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    CreateBiz(query: {
        "RegionId"?: string;
        "BizName": string;
        "UseCc": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "AppId"?: number;
        "AppName"?: string;
        "CcQps"?: number;
        "L4Rules"?: string;
        "Groups"?: string;
    }): Promise<{}>;
    CreateCcRouteRules(query: {
        "RegionId"?: string;
        "BizId": number;
        "RouteList": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    CreateFlexFwdRule(query: {
        "RegionId"?: string;
        "BizId": number;
        "Identity": string;
        "MasterIpList": string;
        "SlaveIpList": string;
        "SourceIp"?: string;
        "Lang"?: string;
        "Remark"?: string;
    }): Promise<{}>;
    CreateGroup(query: {
        "RegionId"?: string;
        "BizId": number;
        "GroupId": string;
        "GroupDesc": string;
        "IpList": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    CreateLayer4Rule(query: {
        "RegionId"?: string;
        "AppId": number;
        "BizId": number;
        "FrontPort": number;
        "BackPort": number;
        "Rservers": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    CreateLayer4Rules(query: {
        "RegionId"?: string;
        "BizId": number;
        "Rules": string;
        "SourceIp"?: string;
        "Lang"?: string;
        "Flush"?: number;
    }): Promise<{}>;
    DeleteApp(query: {
        "RegionId"?: string;
        "AppId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DeleteAppKey(query: {
        "RegionId"?: string;
        "AppId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DeleteBiz(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DeleteCcRouteRules(query: {
        "RegionId"?: string;
        "BizId": number;
        "RouteIdList": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DeleteFlexFwdRule(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "Identity": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DeleteGroup(query: {
        "RegionId"?: string;
        "BizId": number;
        "GroupId": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DeleteLayer4Rule(query: {
        "RegionId"?: string;
        "BizId": number;
        "FrontPort": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeAllLocalIps(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeAppList(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
        "AppId"?: number;
        "AppName"?: string;
    }): Promise<{}>;
    DescribeAppSimpleList(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeAsyncOperation(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeBgpResSummary(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeBizList(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
        "AppId"?: number;
        "BizId"?: number;
        "BizName"?: string;
    }): Promise<{}>;
    DescribeBizSimpleList(query: {
        "RegionId"?: string;
        "AppId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeFlexBackupGroups(query: {
        "RegionId"?: string;
        "BizId": number;
        "GroupId": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeFlexConfig(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeFlexFwdRules(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "Page": number;
        "PageSize": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeFlexSechedPolicy(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "GroupId": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeInstance(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeJianYuTestGet(query: {
        "RegionId"?: string;
        "StartTime": string;
        "EndTime": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeJianYuTestList(query: {
        "RegionId"?: string;
        "StartTime": string;
        "EndTime": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeJianYuTestPagination(query: {
        "RegionId"?: string;
        "StartTime": string;
        "EndTime": string;
        "Page": string;
        "PageSize": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeRequestStatisticByEsnBizInterval(query: {
        "RegionId"?: string;
        "EsnApp": string;
        "EsnBiz": string;
        "StartTime": number;
        "EndTime": number;
        "Interval": number;
        "Page": string;
        "PageSize": string;
        "SourceIp"?: string;
        "Lang"?: string;
        "Province"?: string;
        "Country"?: string;
    }): Promise<{}>;
    DescribeRequestStatisticCountByEsnBiz1Day(query: {
        "RegionId"?: string;
        "EsnApp": string;
        "EsnBiz": string;
        "StartTime": number;
        "EndTime": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeRequestStatisticCountByEsnBiz1DayProvince(query: {
        "RegionId"?: string;
        "EsnApp": string;
        "EsnBiz": string;
        "StartTime": number;
        "EndTime": number;
        "Page": string;
        "PageSize": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeRequestStatisticCountByEsnBiz1M30M(query: {
        "RegionId"?: string;
        "EsnApp": string;
        "EsnBiz": string;
        "Time": number;
        "Page": string;
        "PageSize": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeRequestStatisticCountByEsnBiz30M(query: {
        "RegionId"?: string;
        "EsnApp": string;
        "EsnBiz": string;
        "Time": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeRequestStatisticCountByEsnBizGroup30M(query: {
        "RegionId"?: string;
        "EsnApp": string;
        "EsnBiz": string;
        "Time": number;
        "Page": string;
        "PageSize": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeRequestStatisticLog(query: {
        "RegionId"?: string;
        "StartTime": number;
        "EndTime": number;
        "Page": number;
        "PageSize": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "EsnApp"?: string;
        "EsnBiz"?: string;
        "EsnGroup"?: string;
        "Source"?: string;
        "Country"?: string;
        "Province"?: string;
        "City"?: string;
        "ISP"?: string;
        "Token"?: string;
        "SDK"?: string;
        "CallResult"?: string;
        "OsType"?: string;
        "EscapedLessThan"?: number;
        "EscapedGreaterThan"?: number;
        "DetectIp"?: string;
    }): Promise<{}>;
    DescribeSDKStatisticLog(query: {
        "RegionId"?: string;
        "StartTime": number;
        "EndTime": number;
        "Page": number;
        "PageSize": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "EsnApp"?: string;
        "EsnBiz"?: string;
        "EsnGroup"?: string;
        "Source"?: string;
        "Country"?: string;
        "Province"?: string;
        "City"?: string;
        "ISP"?: string;
        "Token"?: string;
        "Result"?: string;
        "OsType"?: string;
        "DetectIp"?: string;
    }): Promise<{}>;
    DescribeSDKStatisticResultByEsnBizISP1M30M(query: {
        "RegionId"?: string;
        "EsnApp": string;
        "EsnBiz": string;
        "Time": number;
        "Page": string;
        "PageSize": string;
        "Type": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeSDKStatisticResultByEsnBizISPInterval(query: {
        "RegionId"?: string;
        "EsnApp": string;
        "EsnBiz": string;
        "StartTime": number;
        "EndTime": number;
        "Page": string;
        "PageSize": string;
        "Type": string;
        "Interval": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "Province"?: string;
    }): Promise<{}>;
    DescribeSDKStatisticResultByEsnBizProvince1Day(query: {
        "RegionId"?: string;
        "EsnApp": string;
        "EsnBiz": string;
        "StartTime": number;
        "EndTime": number;
        "Page": string;
        "PageSize": string;
        "Type": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeSDKStatisticResultByEsnBizProvince30M(query: {
        "RegionId"?: string;
        "EsnApp": string;
        "EsnBiz": string;
        "Time": number;
        "Page": string;
        "PageSize": string;
        "Type": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    SearchFlexFwdRules(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "Page": number;
        "PageSize": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "Keyword"?: string;
    }): Promise<{}>;
    UpdateFlexBackupGroups(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "GroupId": string;
        "BackupGroupPolicy": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "Backups"?: string;
        "SharedBackups"?: string;
    }): Promise<{}>;
    UpdateFlexFwdRule(query: {
        "RegionId"?: string;
        "BizId": number;
        "Identity": string;
        "MasterIpList": string;
        "SlaveIpList": string;
        "SourceIp"?: string;
        "Lang"?: string;
        "Remark"?: string;
    }): Promise<{}>;
    UpdateFlexInnerPolicy(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "GroupId": string;
        "GroupInnerPolicy": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateFlexLinkType(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "LinkType": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateFlexPorts(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "Ports": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateFlexStatus(query: {
        "RegionId"?: string;
        "BizId": number;
        "Status": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateGroupDnsStatus(query: {
        "RegionId"?: string;
        "BizId": number;
        "GroupId": string;
        "Status": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    CleanFlexAccFwdRules(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "SourceIp"?: string;
    }): Promise<{}>;
    CreateFlexAccFwdRule(query: {
        "RegionId"?: string;
        "BizId": number;
        "Identity": string;
        "ProtocolEx": string;
        "SourceIp"?: string;
        "IpList"?: string;
        "DomainList"?: string;
        "Remark"?: string;
        "MasterIpList"?: string;
        "SlaveIpList"?: string;
        "AccType"?: number;
    }): Promise<{}>;
    CreateFlexAccFwdRuleList(query: {
        "RegionId"?: string;
        "BizId": number;
        "FwdRuleList": string;
        "SourceIp"?: string;
    }): Promise<{}>;
    DeleteFlexAccFwdRule(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "Identity": string;
        "SourceIp"?: string;
    }): Promise<{}>;
    DescribeAccResSummary(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
    }): Promise<{}>;
    DescribeBpsFlow(query: {
        "RegionId"?: string;
        "BizId": number;
        "GroupId": string;
        "BeginTime": number;
        "EndTime": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeCcBlackList(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeCcDevieIpList(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeCcFlow(query: {
        "RegionId"?: string;
        "BizId": number;
        "BeginTime": number;
        "EndTime": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "Interval"?: number;
        "ApiVersion"?: string;
    }): Promise<{}>;
    DescribeCcIDCBlockSwitch(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeCcMaxFw(query: {
        "RegionId"?: string;
        "BizId": number;
        "BeginTime": number;
        "EndTime": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "Source"?: string;
        "DestPort"?: number;
        "Page"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeCcResSummary(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeCcRouteRules(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "RouteComment"?: string;
        "RouteId"?: string;
        "RouteIp"?: string;
    }): Promise<{}>;
    DescribeCcRouteSwitch(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeCcSocketDetail(query: {
        "RegionId"?: string;
        "BizId": number;
        "BeginTime": number;
        "EndTime": number;
        "Interval": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeCcTotalFw(query: {
        "RegionId"?: string;
        "BizId": number;
        "BeginTime": number;
        "EndTime": number;
        "Page": number;
        "PageSize": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "Source"?: string;
    }): Promise<{}>;
    DescribeCcTunnel(query: {
        "RegionId"?: string;
        "BizId": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeCcWhiteList(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeCcZoneBlockConfig(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeCcZones(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeDownloadUrlsForAppKey(query: {
        "RegionId"?: string;
        "AppId": number;
        "AppKeyVersion": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeDownloadUrlsForSDK(query: {
        "RegionId"?: string;
        "AppId": number;
        "SdkVersion": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeFlexAccConfig(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "SourceIp"?: string;
    }): Promise<{}>;
    DescribeFlexAccFlow(query: {
        "RegionId"?: string;
        "BizId": number;
        "BeginTime": number;
        "EndTime": number;
        "SourceIp"?: string;
        "Interval"?: number;
        "ApiVersion"?: string;
    }): Promise<{}>;
    DescribeFlexAccFwdRules(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "Page": number;
        "PageSize": number;
        "SourceIp"?: string;
        "Keyword"?: string;
    }): Promise<{}>;
    DescribeFullNodes(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
        "AppId"?: number;
        "GroupId"?: string;
        "InUse"?: number;
    }): Promise<{}>;
    DescribeFullNodesSummary(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeGfResSummary(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeGroupList(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeGroupSimpleList(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeL4EventsSelective(query: {
        "RegionId"?: string;
        "BeginTime": number;
        "EndTime": number;
        "Page": number;
        "PageSize": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "EsnAppId"?: string;
        "EsnBizId"?: string;
        "GroupId"?: string;
    }): Promise<{}>;
    DescribeLayer4Rules(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeMianLiuResSummary(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeNgSourceDiagnosisLog(query: {
        "RegionId"?: string;
        "StartTime": number;
        "EndTime": number;
        "Page": number;
        "PageSize": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "AppId"?: string;
        "BizId"?: string;
        "Source"?: string;
        "SourcePort"?: string;
        "DetectPort"?: string;
        "DetectIp"?: string;
    }): Promise<{}>;
    DescribeRemainQps(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeUploadPreSign(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeUserFlowInfo(query: {
        "RegionId"?: string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeUserFlowReport(query: {
        "RegionId"?: string;
        "EndTime": number;
        "Interval": number;
        "StartTime": number;
        "SourceIp"?: string;
        "Lang"?: string;
        "EsnGroupId"?: string;
        "EsnBizId"?: number;
        "EsnAppId"?: string;
    }): Promise<{}>;
    DescribeUserTotalFlowReport(query: {
        "RegionId"?: string;
        "EndTime": number;
        "Interval": number;
        "StartTime": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DownloadAppKeyFile(query: {
        "RegionId"?: string;
        "AppId": number;
        "Platform": string;
        "KeyVersion": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DownloadCcRouteRules(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DownloadFlexAccRulesFile(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
    }): Promise<{}>;
    DownloadLayer4Rules(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DownloadSdkFile(query: {
        "RegionId"?: string;
        "AppId": number;
        "SdkVersion": string;
        "Platform": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DownloadUserTotalFlowReport(query: {
        "RegionId"?: string;
        "StartTime": number;
        "EndTime": number;
        "Interval": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    FlushLayer4Rules(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    ReallocNgResource(query: {
        "RegionId"?: string;
        "BizId": string;
        "CcQps": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    ReplaceCcRouteRules(query: {
        "RegionId"?: string;
        "BizId": number;
        "RouteList": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateApp(query: {
        "RegionId"?: string;
        "AppName": string;
        "AppId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateCcBlackList(query: {
        "RegionId"?: string;
        "BizId": number;
        "Ips": string;
        "ActionType": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateCcIDCBlockSwitch(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateCcRouteRules(query: {
        "RegionId"?: string;
        "BizId": number;
        "Routelist": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateCcRouteSwitch(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateCcTunnelGrayAndOnlyAllow(query: {
        "RegionId"?: string;
        "BizId": string;
        "OnlyAllow": number;
        "Gray": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateCcTunnelStatus(query: {
        "RegionId"?: string;
        "BizId": string;
        "Status": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateCcUse(query: {
        "RegionId"?: string;
        "BizId": number;
        "ActionType": string;
        "SourceIp"?: string;
        "Lang"?: string;
        "CcQps"?: number;
    }): Promise<{}>;
    UpdateCcWhiteList(query: {
        "RegionId"?: string;
        "BizId": number;
        "Ips": string;
        "ActionType": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateCcZoneBlockConfig(query: {
        "RegionId"?: string;
        "BizId": number;
        "Config": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateCcZoneBlockStatus(query: {
        "RegionId"?: string;
        "BizId": number;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateFlexAccFwdRule(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "Identity": string;
        "ProtocolEx": string;
        "SourceIp"?: string;
        "IpList"?: string;
        "DomainList"?: string;
        "Remark"?: string;
    }): Promise<{}>;
    UpdateFlexAccFwdRuleV2(query: {
        "RegionId"?: string;
        "BizId": number;
        "Identity": string;
        "ProtocolEx": string;
        "AccType": number;
        "SourceIp"?: string;
        "IpList"?: string;
        "DomainList"?: string;
        "Remark"?: string;
        "MasterIpList"?: string;
        "SlaveIpList"?: string;
    }): Promise<{}>;
    UpdateFlexAccStatus(query: {
        "RegionId"?: string;
        "BizId": number;
        "Status": string;
        "SourceIp"?: string;
    }): Promise<{}>;
    UpdateFlexAccTcpPorts(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "Ports": string;
        "SourceIp"?: string;
    }): Promise<{}>;
    UpdateFlexAccUdpPorts(query: {
        "RegionId"?: string;
        "EsnBizId": number;
        "Ports": string;
        "SourceIp"?: string;
    }): Promise<{}>;
    UpdateGroup(query: {
        "RegionId"?: string;
        "BizId": number;
        "GroupId": string;
        "GroupDesc": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateGroupNodes(query: {
        "RegionId"?: string;
        "BizId": number;
        "GroupId": string;
        "IpList": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateGroupStatus(query: {
        "RegionId"?: string;
        "BizId": number;
        "GroupId": string;
        "Status": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UpdateLayer4Rule(query: {
        "RegionId"?: string;
        "BizId": number;
        "FrontPort": number;
        "Rservers": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UploadCcRouteFileForParse(query: {
        "RegionId"?: string;
        "FileKey": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UploadCcWhiteBlackList(query: {
        "RegionId"?: string;
        "BizId": number;
        "BWList": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    UploadFlexAccRulesFileForParse(query: {
        "RegionId"?: string;
        "FileKey": string;
        "SourceIp"?: string;
    }): Promise<{}>;
    UploadL4RulesFileForParse(query: {
        "RegionId"?: string;
        "FileKey": string;
        "SourceIp"?: string;
        "Lang"?: string;
    }): Promise<{}>;
    DescribeIpFlowReport(query: {
        "RegionId"?: string;
        "Ip": string;
        "EndTime": number;
        "Interval": number;
        "StartTime": number;
        "SourceIp"?: string;
        "FPort"?: number;
        "ProtocolEx"?: number;
    }): Promise<{}>;
}
export default GAMESHIELD;
