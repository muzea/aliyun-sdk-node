interface CLOUDAPI {
    DeleteApiGroup(query: {
        "RegionId"?: string;
        "GroupId": string;
        "Tag"?: string[];
    }): Promise<{}>;
    DescribeApiHistory(query: {
        "RegionId": string;
        "ApiId": string;
        "StageName": string;
        "HistoryVersion": string;
        "GroupId"?: string;
    }): Promise<{}>;
    DescribeApp(query: {
        "RegionId"?: string;
        "AppId"?: number;
    }): Promise<{}>;
    DescribeIpControls(query: {
        "RegionId"?: string;
        "IpControlId"?: string;
        "IpControlName"?: string;
        "IpControlType"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    CreateLogConfig(query: {
        "RegionId"?: string;
        "SlsLogStore": string;
        "SlsProject": string;
        "LogType"?: string;
    }): Promise<{}>;
    SetDomain(query: {
        "RegionId"?: string;
        "DomainName": string;
        "GroupId": string;
    }): Promise<{}>;
    AbolishApi(query: {
        "RegionId": string;
        "ApiId": string;
        "StageName": string;
        "GroupId"?: string;
    }): Promise<{}>;
    AddIpControlPolicyItem(query: {
        "RegionId"?: string;
        "CidrIp": string;
        "IpControlId": string;
        "AppId"?: string;
    }): Promise<{}>;
    AddTrafficSpecialControl(query: {
        "RegionId"?: string;
        "SpecialType": string;
        "SpecialKey": string;
        "TrafficValue": number;
        "TrafficControlId": string;
    }): Promise<{}>;
    CreateApi(query: {
        "RegionId": string;
        "GroupId": string;
        "ApiName": string;
        "Visibility": string;
        "RequestConfig": string;
        "ServiceConfig": string;
        "ResultType"?: string;
        "ResultSample"?: string;
        "Description"?: string;
        "AuthType"?: string;
        "RequestParameters"?: string;
        "SystemParameters"?: string;
        "ConstantParameters"?: string;
        "ServiceParameters"?: string;
        "ServiceParametersMap"?: string;
        "FailResultSample"?: string;
        "ErrorCodeSamples"?: string;
        "ResultDescriptions"?: string;
        "OpenIdConnectConfig"?: string;
        "AllowSignatureMethod"?: string;
        "WebSocketApiType"?: string;
        "ResultBodyModel"?: string;
        "ForceNonceCheck"?: boolean;
        "DisableInternet"?: boolean;
        "AppCodeAuthType"?: string;
    }): Promise<{}>;
    CreateApiGroup(query: {
        "RegionId"?: string;
        "Description"?: string;
        "GroupName": string;
        "Source"?: string;
        "InstanceId"?: string;
        "Tag"?: string[];
    }): Promise<{}>;
    CreateApiStageVariable(query: {
        "RegionId"?: string;
        "StageId": string;
        "VariableName": string;
        "GroupId": string;
        "SupportRoute"?: boolean;
        "VariableValue"?: string;
        "StageRouteModel"?: string;
    }): Promise<{}>;
    CreateApp(query: {
        "RegionId"?: string;
        "AppName": string;
        "Description"?: string;
        "Tag"?: string[];
    }): Promise<{}>;
    CreateIntranetDomain(query: {
        "RegionId"?: string;
        "GroupId": string;
        "DeleteInternetDomain"?: boolean;
    }): Promise<{}>;
    CreateIpControl(query: {
        "RegionId"?: string;
        "IpControlType": string;
        "IpControlName": string;
        "Description"?: string;
        "IpControlPolicys"?: string[];
    }): Promise<{}>;
    CreateSignature(query: {
        "RegionId"?: string;
        "SignatureKey": string;
        "SignatureSecret": string;
        "SignatureName": string;
    }): Promise<{}>;
    CreateTrafficControl(query: {
        "RegionId"?: string;
        "TrafficControlUnit": string;
        "ApiDefault": number;
        "TrafficControlName": string;
        "UserDefault"?: number;
        "AppDefault"?: number;
        "Description"?: string;
    }): Promise<{}>;
    DeleteAllTrafficSpecialControl(query: {
        "RegionId"?: string;
        "TrafficControlId": string;
    }): Promise<{}>;
    DeleteApi(query: {
        "RegionId": string;
        "ApiId": string;
        "GroupId"?: string;
    }): Promise<{}>;
    DeleteApiStageVariable(query: {
        "RegionId"?: string;
        "StageId": string;
        "VariableName": string;
        "GroupId": string;
    }): Promise<{}>;
    DeleteApp(query: {
        "RegionId"?: string;
        "AppId": number;
        "Tag"?: string[];
    }): Promise<{}>;
    DeleteDomain(query: {
        "RegionId"?: string;
        "DomainName": string;
        "GroupId": string;
    }): Promise<{}>;
    DeleteDomainCertificate(query: {
        "RegionId"?: string;
        "DomainName": string;
        "CertificateId": string;
        "GroupId": string;
    }): Promise<{}>;
    DeleteIpControl(query: {
        "RegionId"?: string;
        "IpControlId": string;
    }): Promise<{}>;
    DeleteLogConfig(query: {
        "RegionId"?: string;
        "LogType"?: string;
    }): Promise<{}>;
    DeleteSignature(query: {
        "RegionId"?: string;
        "SignatureId": string;
    }): Promise<{}>;
    DeleteTrafficControl(query: {
        "RegionId"?: string;
        "TrafficControlId": string;
    }): Promise<{}>;
    DeleteTrafficSpecialControl(query: {
        "RegionId"?: string;
        "SpecialType": string;
        "SpecialKey": string;
        "TrafficControlId": string;
    }): Promise<{}>;
    DeployApi(query: {
        "RegionId": string;
        "ApiId": string;
        "StageName": string;
        "Description": string;
        "GroupId"?: string;
    }): Promise<{}>;
    DescribeApi(query: {
        "RegionId": string;
        "ApiId": string;
        "GroupId"?: string;
    }): Promise<{}>;
    DescribeApiDoc(query: {
        "RegionId": string;
        "ApiId": string;
        "GroupId"?: string;
        "StageName"?: string;
    }): Promise<{}>;
    DescribeApiErrorData(query: {
        "RegionId": string;
        "ApiId": string;
        "StartTime": string;
        "EndTime": string;
        "GroupId"?: string;
    }): Promise<{}>;
    DescribeApiGroup(query: {
        "RegionId"?: string;
        "GroupId": string;
        "Tag"?: string[];
    }): Promise<{}>;
    DescribeApiGroups(query: {
        "RegionId": string;
        "GroupId"?: string;
        "GroupName"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
        "Tag"?: string[];
        "EnableTagAuth"?: boolean;
    }): Promise<{}>;
    DescribeApiHistories(query: {
        "RegionId": string;
        "GroupId": string;
        "StageName"?: string;
        "ApiId"?: string;
        "ApiName"?: string;
        "PageSize"?: string;
        "PageNumber"?: string;
    }): Promise<{}>;
    DescribeApiIpControls(query: {
        "RegionId"?: string;
        "GroupId": string;
        "StageName": string;
        "ApiIds"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeApiLatencyData(query: {
        "RegionId": string;
        "ApiId": string;
        "StartTime": string;
        "EndTime": string;
        "GroupId"?: string;
    }): Promise<{}>;
    DescribeApiQpsData(query: {
        "RegionId": string;
        "ApiId": string;
        "StartTime": string;
        "EndTime": string;
        "GroupId"?: string;
    }): Promise<{}>;
    DescribeApiSignatures(query: {
        "RegionId"?: string;
        "GroupId": string;
        "StageName": string;
        "ApiIds"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeApiStage(query: {
        "RegionId"?: string;
        "StageId": string;
        "GroupId": string;
    }): Promise<{}>;
    DescribeApiTrafficControls(query: {
        "RegionId"?: string;
        "GroupId": string;
        "StageName": string;
        "ApiIds"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeApiTrafficData(query: {
        "RegionId": string;
        "ApiId": string;
        "StartTime": string;
        "EndTime": string;
        "GroupId"?: string;
    }): Promise<{}>;
    DescribeApis(query: {
        "RegionId": string;
        "GroupId"?: string;
        "ApiId"?: string;
        "ApiName"?: string;
        "CatalogId"?: string;
        "Visibility"?: string;
        "PageSize"?: number;
        "PageNumber"?: number;
        "EnableTagAuth"?: boolean;
        "Tag"?: string[];
    }): Promise<{}>;
    DescribeApisByApp(query: {
        "RegionId"?: string;
        "AppId": number;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeApisByIpControl(query: {
        "RegionId"?: string;
        "IpControlId": string;
        "PageSize"?: number;
        "PageNumber"?: number;
    }): Promise<{}>;
    DescribeApisBySignature(query: {
        "RegionId"?: string;
        "SignatureId": string;
        "PageSize"?: number;
        "PageNumber"?: number;
    }): Promise<{}>;
    DescribeApisByTrafficControl(query: {
        "RegionId"?: string;
        "TrafficControlId": string;
        "PageSize"?: number;
        "PageNumber"?: number;
    }): Promise<{}>;
    DescribeAppAttributes(query: {
        "RegionId"?: string;
        "AppId"?: number;
        "AppName"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
        "Tag"?: string[];
        "EnableTagAuth"?: boolean;
    }): Promise<{}>;
    DescribeAppSecurity(query: {
        "RegionId"?: string;
        "AppId": number;
        "Tag"?: string[];
    }): Promise<{}>;
    DescribeApps(query: {
        "RegionId"?: string;
        "AppId"?: number;
        "AppOwner"?: number;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeAuthorizedApis(query: {
        "RegionId": string;
        "AppId": number;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeAuthorizedApps(query: {
        "RegionId": string;
        "ApiId": string;
        "GroupId"?: string;
        "StageName"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
        "AppId"?: number;
        "AppName"?: string;
        "AppOwnerId"?: number;
    }): Promise<{}>;
    DescribeDeployedApi(query: {
        "RegionId": string;
        "ApiId": string;
        "StageName": string;
        "GroupId"?: string;
    }): Promise<{}>;
    DescribeDeployedApis(query: {
        "RegionId": string;
        "GroupId"?: string;
        "StageName"?: string;
        "ApiId"?: string;
        "ApiName"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
        "Tag"?: string[];
        "EnableTagAuth"?: boolean;
    }): Promise<{}>;
    DescribeDomain(query: {
        "RegionId"?: string;
        "DomainName": string;
        "GroupId": string;
    }): Promise<{}>;
    DescribeDomainsResolution(query: {
        "RegionId"?: string;
        "DomainNames": string;
        "GroupId": string;
    }): Promise<{}>;
    DescribeHistoryApis(query: {
        "RegionId": string;
        "GroupId": string;
        "StageName"?: string;
        "ApiId"?: string;
        "ApiName"?: string;
        "PageSize"?: string;
        "PageNumber"?: string;
    }): Promise<{}>;
    DescribeIpControlPolicyItems(query: {
        "RegionId"?: string;
        "IpControlId"?: string;
        "PolicyItemId"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeLogConfig(query: {
        "RegionId"?: string;
        "LogType"?: string;
    }): Promise<{}>;
    DescribePurchasedApiGroup(query: {
        "RegionId"?: string;
        "GroupId": string;
    }): Promise<{}>;
    DescribePurchasedApiGroups(query: {
        "RegionId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribePurchasedApis(query: {
        "RegionId": string;
        "GroupId"?: string;
        "StageName"?: string;
        "ApiId"?: string;
        "ApiName"?: string;
        "Visibility"?: string;
        "PageSize"?: number;
        "PageNumber"?: number;
    }): Promise<{}>;
    DescribeRegions(query: {
        "RegionId": string;
        "Language"?: string;
    }): Promise<{}>;
    DescribeSignatures(query: {
        "RegionId"?: string;
        "SignatureId"?: string;
        "SignatureName"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeSignaturesByApi(query: {
        "RegionId"?: string;
        "ApiId": string;
        "StageName": string;
        "GroupId": string;
    }): Promise<{}>;
    DescribeSystemParameters(query: {
        "RegionId": string;
    }): Promise<{}>;
    DescribeTrafficControls(query: {
        "RegionId"?: string;
        "TrafficControlId"?: string;
        "GroupId"?: string;
        "ApiId"?: string;
        "StageName"?: string;
        "TrafficControlName"?: string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    DescribeTrafficControlsByApi(query: {
        "RegionId"?: string;
        "ApiId": string;
        "StageName": string;
        "GroupId": string;
    }): Promise<{}>;
    DescribeVpcAccesses(query: {
        "RegionId": string;
        "PageNumber"?: number;
        "PageSize"?: number;
    }): Promise<{}>;
    ImportSwagger(query: {
        "RegionId": string;
        "DataFormat": string;
        "Data": string;
        "Overwrite": boolean;
        "GroupId": string;
    }): Promise<{}>;
    ListTagResources(query: {
        "RegionId"?: string;
        "NextToken"?: string;
        "ResourceType": string;
        "ResourceId"?: string[];
        "Tag"?: string[];
    }): Promise<{}>;
    ModifyApi(query: {
        "RegionId"?: string;
        "ApiName": string;
        "Visibility": string;
        "RequestConfig": string;
        "ServiceConfig": string;
        "GroupId"?: string;
        "ResultType"?: string;
        "ResultSample"?: string;
        "ApiId": string;
        "Description"?: string;
        "AuthType"?: string;
        "RequestParameters"?: string;
        "SystemParameters"?: string;
        "ConstantParameters"?: string;
        "ServiceParameters"?: string;
        "ServiceParametersMap"?: string;
        "FailResultSample"?: string;
        "ErrorCodeSamples"?: string;
        "ResultDescriptions"?: string;
        "OpenIdConnectConfig"?: string;
        "AllowSignatureMethod"?: string;
        "WebSocketApiType"?: string;
        "ResultBodyModel"?: string;
        "ForceNonceCheck"?: boolean;
        "DisableInternet"?: boolean;
        "AppCodeAuthType"?: string;
    }): Promise<{}>;
    ModifyApiGroup(query: {
        "RegionId"?: string;
        "GroupId": string;
        "GroupName"?: string;
        "Description"?: string;
        "Tag"?: string[];
    }): Promise<{}>;
    ModifyApp(query: {
        "RegionId"?: string;
        "AppId": number;
        "AppName"?: string;
        "Description"?: string;
        "Tag"?: string[];
    }): Promise<{}>;
    ModifyIpControl(query: {
        "RegionId"?: string;
        "IpControlId": string;
        "IpControlName"?: string;
        "Description"?: string;
    }): Promise<{}>;
    ModifyIpControlPolicyItem(query: {
        "RegionId"?: string;
        "PolicyItemId": string;
        "CidrIp": string;
        "IpControlId": string;
        "AppId"?: string;
    }): Promise<{}>;
    ModifyLogConfig(query: {
        "RegionId"?: string;
        "SlsLogStore": string;
        "SlsProject": string;
        "LogType"?: string;
    }): Promise<{}>;
    ModifySignature(query: {
        "RegionId"?: string;
        "SignatureId": string;
        "SignatureName"?: string;
        "SignatureKey"?: string;
        "SignatureSecret"?: string;
    }): Promise<{}>;
    ModifyTrafficControl(query: {
        "RegionId"?: string;
        "TrafficControlId": string;
        "TrafficControlName"?: string;
        "TrafficControlUnit"?: string;
        "ApiDefault"?: number;
        "UserDefault"?: number;
        "AppDefault"?: number;
        "Description"?: string;
    }): Promise<{}>;
    ReactivateDomain(query: {
        "RegionId"?: string;
        "DomainName": string;
        "GroupId": string;
    }): Promise<{}>;
    RemoveApisAuthorities(query: {
        "RegionId": string;
        "AppId": number;
        "StageName": string;
        "ApiIds": string;
        "GroupId"?: string;
        "Description"?: string;
    }): Promise<{}>;
    RemoveAppsAuthorities(query: {
        "RegionId": string;
        "ApiId": string;
        "StageName": string;
        "AppIds": string;
        "GroupId"?: string;
    }): Promise<{}>;
    RemoveIpControlApis(query: {
        "RegionId"?: string;
        "GroupId": string;
        "StageName": string;
        "IpControlId": string;
        "ApiIds"?: string;
    }): Promise<{}>;
    RemoveIpControlPolicyItem(query: {
        "RegionId"?: string;
        "PolicyItemIds": string;
        "IpControlId": string;
    }): Promise<{}>;
    RemoveSignatureApis(query: {
        "RegionId"?: string;
        "GroupId": string;
        "StageName": string;
        "SignatureId": string;
        "ApiIds"?: string;
    }): Promise<{}>;
    RemoveTrafficControlApis(query: {
        "RegionId"?: string;
        "GroupId": string;
        "StageName": string;
        "TrafficControlId": string;
        "ApiIds"?: string;
    }): Promise<{}>;
    RemoveVpcAccess(query: {
        "RegionId": string;
        "VpcId": string;
        "InstanceId": string;
        "Port": number;
    }): Promise<{}>;
    ResetAppCode(query: {
        "RegionId"?: string;
        "AppCode": string;
    }): Promise<{}>;
    ResetAppSecret(query: {
        "RegionId"?: string;
        "AppKey": string;
    }): Promise<{}>;
    SdkGenerateByApp(query: {
        "RegionId"?: string;
        "Language": string;
        "AppId": number;
    }): Promise<{}>;
    SdkGenerateByGroup(query: {
        "RegionId": string;
        "GroupId": string;
        "Language": string;
    }): Promise<{}>;
    SetApisAuthorities(query: {
        "RegionId": string;
        "AppId": number;
        "StageName": string;
        "GroupId"?: string;
        "ApiIds"?: string;
        "Description"?: string;
        "AuthVaildTime"?: string;
        "AuthValidTime"?: string;
    }): Promise<{}>;
    SetAppsAuthorities(query: {
        "RegionId": string;
        "ApiId": string;
        "StageName": string;
        "AppIds": string;
        "GroupId"?: string;
        "Description"?: string;
        "AuthVaildTime"?: string;
        "AuthValidTime"?: string;
    }): Promise<{}>;
    SetDomainCertificate(query: {
        "RegionId"?: string;
        "DomainName": string;
        "CertificateName": string;
        "GroupId": string;
        "CertificateBody"?: string;
        "CertificatePrivateKey"?: string;
    }): Promise<{}>;
    SetDomainWebSocketStatus(query: {
        "RegionId"?: string;
        "DomainName": string;
        "ActionValue": string;
        "GroupId": string;
    }): Promise<{}>;
    SetIpControlApis(query: {
        "RegionId"?: string;
        "GroupId": string;
        "ApiIds": string;
        "StageName": string;
        "IpControlId": string;
    }): Promise<{}>;
    SetSignatureApis(query: {
        "RegionId"?: string;
        "GroupId": string;
        "ApiIds": string;
        "StageName": string;
        "SignatureId": string;
    }): Promise<{}>;
    SetTrafficControlApis(query: {
        "RegionId"?: string;
        "GroupId": string;
        "ApiIds": string;
        "StageName": string;
        "TrafficControlId": string;
    }): Promise<{}>;
    SetVpcAccess(query: {
        "RegionId": string;
        "Name": string;
        "VpcId": string;
        "InstanceId": string;
        "Port": number;
    }): Promise<{}>;
    SwitchApi(query: {
        "RegionId": string;
        "ApiId": string;
        "StageName": string;
        "Description": string;
        "HistoryVersion": string;
        "GroupId"?: string;
    }): Promise<{}>;
    TagResources(query: {
        "RegionId"?: string;
        "Tag": string[];
        "ResourceId": string[];
        "ResourceType": string;
    }): Promise<{}>;
    UntagResources(query: {
        "RegionId"?: string;
        "ResourceId": string[];
        "ResourceType": string;
        "TagKey"?: string[];
        "All"?: boolean;
    }): Promise<{}>;
    CreateInstance(query: {
        "RegionId": string;
        "ChargeType": string;
        "InstanceName": string;
        "InstanceSpec": string;
        "Token": string;
        "ZoneId"?: string;
        "HttpsPolicy"?: string;
        "Duration"?: number;
        "PricingCycle"?: string;
        "AutoPay"?: boolean;
    }): Promise<{}>;
    DeleteInstance(query: {
        "RegionId": string;
        "InstanceId": string;
        "Token": string;
    }): Promise<{}>;
}
export default CLOUDAPI;
