interface OSS {
    GetService(query: {
        "prefix"?: any;
        "marker"?: any;
        "max-keys"?: any;
    }): Promise<{}>;
    PutBucket(query: {
        "BucketName": any;
        "x-oss-acl"?: any;
    }): Promise<{}>;
    PutBucketACL(query: {
        "BucketName": any;
        "acl": any;
        "x-oss-acl": any;
    }): Promise<{}>;
    PutBucketLogging(query: {
        "BucketName": any;
        "logging": any;
    }): Promise<{}>;
    PutBucketWebsite(query: {
        "BucketName": any;
        "website": any;
    }): Promise<{}>;
    PutBucketReferer(query: {
        "BucketName": any;
        "referer": any;
    }): Promise<{}>;
    PutBucketLifecycle(query: {
        "BucketName": any;
        "lifecycle": any;
    }): Promise<{}>;
    GetBucket(query: {
        "BucketName": any;
        "delimiter"?: any;
        "marker"?: any;
        "max-keys"?: any;
        "prefix"?: any;
        "encoding-type"?: any;
    }): Promise<{}>;
    GetBucketAcl(query: {
        "BucketName": any;
        "acl": any;
    }): Promise<{}>;
    GetBucketLocation(query: {
        "BucketName": any;
        "location": any;
    }): Promise<{}>;
    GetBucketInfo(query: {
        "BucketName": any;
        "bucketInfo": any;
    }): Promise<{}>;
    GetBucketLogging(query: {
        "BucketName": any;
        "logging": any;
    }): Promise<{}>;
    GetBucketWebsite(query: {
        "BucketName": any;
        "website": any;
    }): Promise<{}>;
    GetBucketReferer(query: {
        "BucketName": any;
        "referer": any;
    }): Promise<{}>;
    GetBucketLifecycle(query: {
        "BucketName": any;
        "lifecycle": any;
    }): Promise<{}>;
    DeleteBucket(query: {
        "BucketName": any;
    }): Promise<{}>;
    DeleteBucketLogging(query: {
        "BucketName": any;
        "logging": any;
    }): Promise<{}>;
    DeleteBucketWebsite(query: {
        "BucketName": any;
        "website": any;
    }): Promise<{}>;
    DeleteBucketLifecycle(query: {
        "BucketName": any;
        "lifecycle": any;
    }): Promise<{}>;
    PutObject(query: {
        "BucketName": any;
        "ObjectName": any;
        "Cache-Control"?: any;
        "Content-Disposition"?: any;
        "Content-Encoding"?: any;
        "Expires"?: any;
        "x-oss-server-side-encryption"?: any;
        "x-oss-object-acl"?: any;
    }): Promise<{}>;
    CopyObject(query: {
        "BucketName": any;
        "ObjectName": any;
        "x-oss-copy-source": any;
        "x-oss-copy-source-if-match"?: any;
        "x-oss-copy-source-if-none-match"?: any;
        "x-oss-copy-source-if-unmodified-since"?: any;
        "x-oss-copy-source-if-modified-since"?: any;
        "x-oss-metadata-directive"?: any;
        "x-oss-server-side-encryption"?: any;
        "x-oss-object-acl"?: any;
    }): Promise<{}>;
    GetObject(query: {
        "BucketName": any;
        "ObjectName": any;
        "response-content-type"?: any;
        "response-content-language"?: any;
        "response-expires"?: any;
        "response-cache-control"?: any;
        "response-content-disposition"?: any;
        "response-content-encoding"?: any;
    }): Promise<{}>;
    AppendObject(query: {
        "BucketName": any;
        "ObjectName": any;
        "append": any;
        "position": any;
        "Cache-Control"?: any;
        "Content-Disposition"?: any;
        "Content-Encoding"?: any;
        "Expires"?: any;
        "x-oss-server-side-encryption"?: any;
        "x-oss-object-acl"?: any;
    }): Promise<{}>;
    DeleteObject(query: {
        "BucketName": any;
        "ObjectName": any;
    }): Promise<{}>;
    DeleteMultipleObjects(query: {
        "BucketName": any;
        "delete": any;
        "encoding-type"?: any;
    }): Promise<{}>;
    HeadObject(query: {
        "BucketName": any;
        "ObjectName": any;
        "If-Modified-Since"?: any;
        "If-Unmodified-Since"?: any;
        "If-Match"?: any;
        "If-None-Match"?: any;
    }): Promise<{}>;
    GetObjectMeta(query: {
        "BucketName": any;
        "ObjectName": any;
        "objectMeta": any;
    }): Promise<{}>;
    PutObjectACL(query: {
        "BucketName": any;
        "ObjectName": any;
        "acl": any;
        "x-oss-object-acl"?: any;
    }): Promise<{}>;
    GetObjectACL(query: {
        "BucketName": any;
        "ObjectName": any;
        "acl": any;
    }): Promise<{}>;
    PostObject(query: {
        "BucketName": any;
    }): Promise<{}>;
    PutSymlink(query: {
        "BucketName": any;
        "ObjectName": any;
        "symlink": any;
        "x-oss-symlink-target"?: any;
    }): Promise<{}>;
    GetSymlink(query: {
        "BucketName": any;
        "ObjectName": any;
        "symlink": any;
    }): Promise<{}>;
    InitiateMultipartUpload(query: {
        "BucketName": any;
        "ObjectName": any;
        "uploads": any;
        "encoding-type"?: any;
        "Cache-Control"?: any;
        "Content-Disposition"?: any;
        "Content-Encoding"?: any;
        "Expires"?: any;
        "x-oss-server-side-encryption"?: any;
    }): Promise<{}>;
    UploadPart(query: {
        "BucketName": any;
        "ObjectName": any;
        "partNumber": any;
        "uploadId": any;
    }): Promise<{}>;
    UploadPartCopy(query: {
        "BucketName": any;
        "ObjectName": any;
        "partNumber": any;
        "uploadId": any;
        "x-oss-copy-source": any;
        "x-oss-copy-source-range"?: any;
        "x-oss-copy-source-if-match"?: any;
        "x-oss-copy-source-if-none-match"?: any;
        "x-oss-copy-source-if-unmodified-since"?: any;
        "x-oss-copy-source-if-modified-since"?: any;
    }): Promise<{}>;
    CompleteMultipartUpload(query: {
        "BucketName": any;
        "ObjectName": any;
        "uploadId": any;
        "encoding-type": any;
    }): Promise<{}>;
    AbortMultipartUpload(query: {
        "BucketName": any;
        "ObjectName": any;
        "uploadId": any;
    }): Promise<{}>;
    ListMultipartUploads(query: {
        "BucketName": any;
        "uploads": any;
        "delimiter"?: any;
        "max-uploads"?: any;
        "key-marker"?: any;
        "prefix"?: any;
        "upload-id-marker"?: any;
        "encoding-type"?: any;
    }): Promise<{}>;
    ListParts(query: {
        "BucketName": any;
        "ObjectName": any;
        "uploadId": any;
        "max-parts"?: any;
        "part-number-marker"?: any;
        "encoding-type"?: any;
    }): Promise<{}>;
}
export default OSS;
