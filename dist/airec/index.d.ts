interface AIREC {
    AttachDataset(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "VersionId": string;
    }): Promise<{}>;
    CreateDiversify(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    CreateInstance(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    CreateMix(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    DeleteDataSet(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "VersionId": string;
    }): Promise<{}>;
    DeleteDiversify(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "Name": string;
    }): Promise<{}>;
    DeleteMix(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "Name": string;
    }): Promise<{}>;
    DescribeDataSetMessage(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "VersionId": string;
    }): Promise<{}>;
    DescribeDataSetReport(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "VersionId": string;
    }): Promise<{}>;
    DescribeDiversify(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "Name": string;
    }): Promise<{}>;
    DescribeInstance(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    DescribeMix(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "Name": string;
    }): Promise<{}>;
    DescribeQuota(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    ListDashboard(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "StartDate": number;
        "EndDate": number;
        "TraceId": string;
        "SceneId": string;
        "Page"?: number;
        "Size"?: number;
    }): Promise<{}>;
    ListDashboardParameters(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    ListDashboardUid(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    ListDataSet(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    ListDataSource(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    ListDiversify(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    ListInstance(query: {
        "RegionId"?: string;
        "page"?: number;
        "size"?: number;
    }): Promise<{}>;
    ListInstanceTask(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    ListMix(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    ModifyDataSource(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "TableName"?: string;
    }): Promise<{}>;
    ModifyDiversify(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "Name": string;
    }): Promise<{}>;
    ModifyInstance(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    ModifyMix(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "Name": string;
    }): Promise<{}>;
    PushDocument(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "TableName": string;
    }): Promise<{}>;
    PushIntervention(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    Recommend(query: {
        "RegionId"?: string;
        "ReturnCount": number;
        "UserId"?: string;
        "SceneId"?: string;
        "Ip"?: string;
        "Imei"?: string;
        "InstanceId": string;
        "Items"?: string;
    }): Promise<{}>;
    RunInstance(query: {
        "RegionId"?: string;
        "InstanceId"?: string;
    }): Promise<{}>;
    StopDataSet(query: {
        "RegionId"?: string;
        "InstanceId": string;
        "VersionId": string;
    }): Promise<{}>;
    UpgradeInstance(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    ValidateInstance(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    DescribeExposureSettings(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
    DescribeRegions(query: {
        "RegionId"?: string;
        "AcceptLanguage"?: string;
    }): Promise<{}>;
    ModifyExposureSettings(query: {
        "RegionId"?: string;
        "InstanceId": string;
    }): Promise<{}>;
}
export default AIREC;
