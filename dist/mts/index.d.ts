interface MTS {
    ActivateMediaWorkflow(query: {
        "RegionId"?: string;
        "MediaWorkflowId": string;
    }): Promise<{}>;
    AddAsrPipeline(query: {
        "RegionId"?: string;
        "Name": string;
        "Priority"?: number;
        "NotifyConfig"?: string;
    }): Promise<{}>;
    AddCategory(query: {
        "RegionId"?: string;
        "CateName": string;
        "ParentId"?: number;
    }): Promise<{}>;
    AddCoverPipeline(query: {
        "RegionId"?: string;
        "Name": string;
        "Priority"?: string;
        "NotifyConfig"?: string;
        "Role"?: string;
    }): Promise<{}>;
    AddMediaTag(query: {
        "RegionId"?: string;
        "MediaId": string;
        "Tag"?: string;
    }): Promise<{}>;
    AddMediaWorkflow(query: {
        "RegionId"?: string;
        "Topology": string;
        "Name": string;
        "TriggerMode"?: string;
    }): Promise<{}>;
    AddPipeline(query: {
        "RegionId"?: string;
        "Name": string;
        "Speed"?: string;
        "SpeedLevel"?: number;
        "NotifyConfig"?: string;
        "Role"?: string;
    }): Promise<{}>;
    AddPornPipeline(query: {
        "RegionId"?: string;
        "Name": string;
        "Priority"?: number;
        "NotifyConfig"?: string;
    }): Promise<{}>;
    AddTemplate(query: {
        "RegionId"?: string;
        "Name": string;
        "Container"?: string;
        "Video"?: string;
        "Audio"?: string;
        "TransConfig"?: string;
        "MuxConfig"?: string;
    }): Promise<{}>;
    AddTerrorismPipeline(query: {
        "RegionId"?: string;
        "Name": string;
        "Priority"?: number;
        "NotifyConfig"?: string;
    }): Promise<{}>;
    AddWaterMarkTemplate(query: {
        "RegionId"?: string;
        "Config": string;
        "Name": string;
    }): Promise<{}>;
    BindInputBucket(query: {
        "RegionId"?: string;
        "Bucket": string;
        "RoleArn"?: string;
    }): Promise<{}>;
    CancelJob(query: {
        "RegionId"?: string;
        "JobId": string;
    }): Promise<{}>;
    CreateSession(query: {
        "RegionId"?: string;
        "SessionTime": number;
        "MediaId": string;
        "EndUserId": string;
    }): Promise<{}>;
    DeactivateMediaWorkflow(query: {
        "RegionId"?: string;
        "MediaWorkflowId": string;
    }): Promise<{}>;
    DecryptKey(query: {
        "RegionId"?: string;
        "Rand": string;
        "CiphertextBlob": string;
    }): Promise<{}>;
    DeleteCategory(query: {
        "RegionId"?: string;
        "CateId": number;
    }): Promise<{}>;
    DeleteMedia(query: {
        "RegionId"?: string;
        "MediaIds": string;
    }): Promise<{}>;
    DeleteMediaTag(query: {
        "RegionId"?: string;
        "MediaId": string;
        "Tag"?: string;
    }): Promise<{}>;
    DeletePipeline(query: {
        "RegionId"?: string;
        "PipelineId": string;
    }): Promise<{}>;
    DeleteTemplate(query: {
        "RegionId"?: string;
        "TemplateId": string;
    }): Promise<{}>;
    GetLicense(query: {
        "RegionId"?: string;
        "Data": string;
        "MediaId": string;
        "LicenseUrl": string;
        "Header"?: string;
        "Type"?: string;
    }): Promise<{}>;
    GetPackage(query: {
        "RegionId"?: string;
        "Data": string;
    }): Promise<{}>;
    ListAllCategory(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    ListAllMediaBucket(query: {
        "RegionId"?: string;
        "NextPageToken"?: string;
        "MaximumPageSize"?: number;
    }): Promise<{}>;
    ListCensorPipeline(query: {
        "RegionId"?: string;
        "PageSize"?: number;
        "PageNumber"?: number;
        "State"?: string;
    }): Promise<{}>;
    ListCoverPipeline(query: {
        "RegionId"?: string;
        "PageSize"?: number;
        "PageNumber"?: number;
        "State"?: string;
    }): Promise<{}>;
    ListJob(query: {
        "RegionId"?: string;
        "NextPageToken"?: string;
        "MaximumPageSize"?: number;
        "State"?: string;
        "StartOfJobCreatedTimeRange"?: string;
        "EndOfJobCreatedTimeRange"?: string;
        "PipelineId"?: string;
    }): Promise<{}>;
    ListMedia(query: {
        "RegionId"?: string;
        "NextPageToken"?: string;
        "MaximumPageSize"?: number;
        "From"?: string;
        "To"?: string;
    }): Promise<{}>;
    ListPornPipeline(query: {
        "RegionId"?: string;
        "PageSize"?: number;
        "PageNumber"?: number;
        "State"?: string;
    }): Promise<{}>;
    LogicalDeleteResource(query: {
        "RegionId"?: string;
        "Pk": string;
        "Bid": string;
        "Hid": number;
        "Country": string;
        "TaskIdentifier": string;
        "TaskExtraData": string;
        "GmtWakeup": string;
        "Invoker": string;
        "Interrupt"?: boolean;
        "Success"?: boolean;
        "Message"?: string;
    }): Promise<{}>;
    PlayInfo(query: {
        "RegionId"?: string;
        "Formats": string;
        "AuthInfo": string;
        "MediaId": string;
        "AuthTimeout"?: number;
        "Rand"?: string;
        "PlayDomain"?: string;
        "HlsUriToken"?: string;
        "Terminal"?: string;
    }): Promise<{}>;
    PlayerAuth(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    QueryAnalysisJobList(query: {
        "RegionId"?: string;
        "AnalysisJobIds": string;
    }): Promise<{}>;
    QueryAsrJobList(query: {
        "RegionId"?: string;
        "JobIds": string;
    }): Promise<{}>;
    QueryAsrPipelineList(query: {
        "RegionId"?: string;
        "PipelineIds": string;
    }): Promise<{}>;
    QueryAuthConfig(query: {
        "RegionId"?: string;
    }): Promise<{}>;
    QueryCensorJobList(query: {
        "RegionId"?: string;
        "JobIds": string;
    }): Promise<{}>;
    QueryCensorPipelineList(query: {
        "RegionId"?: string;
        "PipelineIds": string;
    }): Promise<{}>;
    QueryComplexJobList(query: {
        "RegionId"?: string;
        "JobIds"?: string;
    }): Promise<{}>;
    QueryJobList(query: {
        "RegionId"?: string;
        "JobIds"?: string;
    }): Promise<{}>;
    QueryMediaDetailJobList(query: {
        "RegionId"?: string;
        "JobIds": string;
    }): Promise<{}>;
    QueryMediaInfoJobList(query: {
        "RegionId"?: string;
        "MediaInfoJobIds": string;
    }): Promise<{}>;
    QueryMediaListByURL(query: {
        "RegionId"?: string;
        "FileURLs": string;
        "IncludePlayList"?: boolean;
        "IncludeSnapshotList"?: boolean;
        "IncludeMediaInfo"?: boolean;
        "IncludeSummaryList"?: boolean;
    }): Promise<{}>;
    QueryMediaWorkflowExecutionList(query: {
        "RegionId"?: string;
        "RunIds": string;
    }): Promise<{}>;
    QueryMediaWorkflowList(query: {
        "RegionId"?: string;
        "MediaWorkflowIds": string;
    }): Promise<{}>;
    QueryPipelineList(query: {
        "RegionId"?: string;
        "PipelineIds": string;
    }): Promise<{}>;
    QueryPornJobList(query: {
        "RegionId"?: string;
        "JobIds": string;
    }): Promise<{}>;
    QueryPornPipelineList(query: {
        "RegionId"?: string;
        "PipelineIds": string;
    }): Promise<{}>;
    QuerySnapshotJobList(query: {
        "RegionId"?: string;
        "SnapshotJobIds": string;
    }): Promise<{}>;
    QuerySubtitleJobList(query: {
        "RegionId"?: string;
        "JobIds"?: string;
    }): Promise<{}>;
    QueryTemplateList(query: {
        "RegionId"?: string;
        "TemplateIds": string;
    }): Promise<{}>;
    QueryTerrorismJobList(query: {
        "RegionId"?: string;
        "JobIds": string;
    }): Promise<{}>;
    QueryTerrorismPipelineList(query: {
        "RegionId"?: string;
        "PipelineIds": string;
    }): Promise<{}>;
    QueryVideoGifJobList(query: {
        "RegionId"?: string;
        "JobIds": string;
    }): Promise<{}>;
    QueryVideoSplitJobList(query: {
        "RegionId"?: string;
        "JobIds": string;
    }): Promise<{}>;
    QueryVideoSummaryJobList(query: {
        "RegionId"?: string;
        "JobIds": string;
    }): Promise<{}>;
    QueryWaterMarkTemplateList(query: {
        "RegionId"?: string;
        "WaterMarkTemplateIds": string;
    }): Promise<{}>;
    RefreshCdnDomainConfigsCache(query: {
        "RegionId"?: string;
        "Domains": string;
    }): Promise<{}>;
    RegisterMediaDetailPerson(query: {
        "RegionId"?: string;
        "PersonName": string;
        "Images": string;
        "Category": string;
        "PersonLib"?: string;
    }): Promise<{}>;
    RegisterMediaDetailScenario(query: {
        "RegionId"?: string;
        "Scenario": string;
        "Description": string;
        "JobId": string;
    }): Promise<{}>;
    ReportAnnotationJobResult(query: {
        "RegionId"?: string;
        "Annotation": string;
        "Details": string;
        "JobId": string;
    }): Promise<{}>;
    ReportCensorJobResult(query: {
        "RegionId"?: string;
        "Label": string;
        "JobId": string;
        "Detail"?: string;
    }): Promise<{}>;
    ReportCoverJobResult(query: {
        "RegionId"?: string;
        "Result": string;
        "JobId": string;
    }): Promise<{}>;
    ReportFacerecogJobResult(query: {
        "RegionId"?: string;
        "Facerecog": string;
        "Details": string;
        "JobId": string;
    }): Promise<{}>;
    ReportFpShotJobResult(query: {
        "RegionId"?: string;
        "Result": string;
        "JobId": string;
        "Details"?: string;
    }): Promise<{}>;
    ReportPornJobResult(query: {
        "RegionId"?: string;
        "Label": string;
        "JobId": string;
        "Detail"?: string;
    }): Promise<{}>;
    ReportTagJobResult(query: {
        "RegionId"?: string;
        "Tag": string;
        "Result": string;
        "JobId": string;
    }): Promise<{}>;
    ReportTerrorismJobResult(query: {
        "RegionId"?: string;
        "Label": string;
        "JobId": string;
        "Detail"?: string;
    }): Promise<{}>;
    ReportVideoSplitJobResult(query: {
        "RegionId"?: string;
        "Result": string;
        "JobId": string;
        "Details"?: string;
    }): Promise<{}>;
    SearchMedia(query: {
        "RegionId"?: string;
        "From"?: string;
        "To"?: string;
        "KeyWord"?: string;
        "Title"?: string;
        "Description"?: string;
        "Tag"?: string;
        "CateId"?: string;
        "SortBy"?: string;
        "PageSize"?: number;
        "PageNumber"?: number;
    }): Promise<{}>;
    SearchPipeline(query: {
        "RegionId"?: string;
        "PageSize"?: number;
        "PageNumber"?: number;
        "State"?: string;
    }): Promise<{}>;
    SearchTemplate(query: {
        "RegionId"?: string;
        "PageSize"?: number;
        "PageNumber"?: number;
        "State"?: string;
    }): Promise<{}>;
    SearchWaterMarkTemplate(query: {
        "RegionId"?: string;
        "PageSize"?: number;
        "PageNumber"?: number;
        "State"?: string;
    }): Promise<{}>;
    SubmitAnalysisJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "Input": string;
        "AnalysisConfig"?: string;
        "UserData"?: string;
        "Priority"?: string;
    }): Promise<{}>;
    SubmitAnnotationJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "Input": string;
        "AnnotationConfig"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitAsrJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "Input": string;
        "AsrConfig"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitCoverJob(query: {
        "RegionId"?: string;
        "CoverConfig": string;
        "PipelineId": string;
        "Input": string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitEditingJobs(query: {
        "RegionId"?: string;
        "EditingJobOutputs": string;
        "OutputBucket": string;
        "PipelineId": string;
        "EditingInputs": string;
        "OutputLocation"?: string;
    }): Promise<{}>;
    SubmitFacerecogJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "Input": string;
        "FacerecogConfig"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitFpShotJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "Input": string;
        "FpShotConfig"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitImageQualityJob(query: {
        "RegionId"?: string;
        "Input": string;
        "PipelineId"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitMediaCensorJob(query: {
        "RegionId"?: string;
        "VideoCensorConfig": string;
        "PipelineId": string;
        "Input"?: string;
        "CoverImages"?: string;
        "Title"?: string;
        "Description"?: string;
        "Barrages"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitMediaDetailJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "MediaDetailConfig": string;
        "Input": string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitSubtitleJob(query: {
        "RegionId"?: string;
        "OutputConfig": string;
        "PipelineId": string;
        "InputConfig": string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitTagJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "Input": string;
        "TagConfig"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitTerrorismJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "Input": string;
        "TerrorismConfig"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitVideoGifJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "Input": string;
        "VideoGifConfig"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitVideoPoseJob(query: {
        "RegionId"?: string;
        "OutputConfig": string;
        "PipelineId": string;
        "Input": string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitVideoSummaryJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "Input": string;
        "VideoSummaryConfig"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    UnbindInputBucket(query: {
        "RegionId"?: string;
        "Bucket": string;
        "RoleArn"?: string;
    }): Promise<{}>;
    UnbindOutputBucket(query: {
        "RegionId"?: string;
        "Bucket": string;
    }): Promise<{}>;
    UpdateAsrPipeline(query: {
        "RegionId"?: string;
        "Name": string;
        "State": string;
        "Priority": number;
        "PipelineId": string;
        "NotifyConfig"?: string;
    }): Promise<{}>;
    UpdateCategoryName(query: {
        "RegionId"?: string;
        "CateName": string;
        "CateId": string;
    }): Promise<{}>;
    UpdateCoverPipeline(query: {
        "RegionId"?: string;
        "Name": string;
        "State": string;
        "Priority": number;
        "PipelineId": string;
        "NotifyConfig"?: string;
        "Role"?: string;
    }): Promise<{}>;
    UpdateMedia(query: {
        "RegionId"?: string;
        "MediaId": string;
        "Title"?: string;
        "Description"?: string;
        "CoverURL"?: string;
        "CateId"?: number;
        "Tags"?: string;
    }): Promise<{}>;
    UpdateMediaCategory(query: {
        "RegionId"?: string;
        "MediaId": string;
        "CateId"?: number;
    }): Promise<{}>;
    UpdateMediaPublishState(query: {
        "RegionId"?: string;
        "MediaId": string;
        "Publish"?: boolean;
    }): Promise<{}>;
    UpdateMediaWorkflow(query: {
        "RegionId"?: string;
        "Topology": string;
        "MediaWorkflowId": string;
    }): Promise<{}>;
    UpdatePipeline(query: {
        "RegionId"?: string;
        "Name": string;
        "State": string;
        "PipelineId": string;
        "NotifyConfig"?: string;
        "Role"?: string;
    }): Promise<{}>;
    UpdateTemplate(query: {
        "RegionId"?: string;
        "Name": string;
        "TemplateId": string;
        "Container"?: string;
        "Video"?: string;
        "Audio"?: string;
        "MuxConfig"?: string;
        "TransConfig"?: string;
    }): Promise<{}>;
    UpdateTerrorismPipeline(query: {
        "RegionId"?: string;
        "Name": string;
        "State": string;
        "Priority": number;
        "PipelineId": string;
        "NotifyConfig"?: string;
    }): Promise<{}>;
    AddMCTemplate(query: {
        "RegionId"?: string;
        "Name": string;
        "OwnerId"?: number;
        "Porn"?: string;
        "Terrorism"?: string;
        "Politics"?: string;
        "Ad"?: string;
        "Qrcode"?: string;
        "Live"?: string;
        "Logo"?: string;
        "Abuse"?: string;
        "Contraband"?: string;
        "spam"?: string;
    }): Promise<{}>;
    CreateMcuTemplate(query: {
        "RegionId"?: string;
        "Template": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DeleteMcuTemplate(query: {
        "RegionId"?: string;
        "TemplateId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    QueryFpCompareJobList(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "JobIds"?: string;
    }): Promise<{}>;
    QueryMCTemplateList(query: {
        "RegionId"?: string;
        "TemplateIds": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    QueryMcuJob(query: {
        "RegionId"?: string;
        "JobIds": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    QueryMcuTemplate(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "TemplateId"?: string;
    }): Promise<{}>;
    QueryMediaCensorJobList(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "JobId"?: string;
        "NextPageToken"?: string;
        "MaximumPageSize"?: number;
        "State"?: string;
        "StartOfJobCreatedTimeRange"?: string;
        "EndOfJobCreatedTimeRange"?: string;
        "PipelineId"?: string;
    }): Promise<{}>;
    QueryMediaFpDeleteJobList(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "JobIds"?: string;
    }): Promise<{}>;
    SubmitBeautifyJobs(query: {
        "RegionId"?: string;
        "BeautifyConfig": string;
        "OwnerId"?: number;
        "UserData"?: string;
        "PipelineId"?: string;
        "Async"?: boolean;
    }): Promise<{}>;
    SubmitImageSearchJob(query: {
        "RegionId"?: string;
        "InputImage": string;
        "PipelineId": string;
        "InputVideo": string;
        "OwnerId"?: number;
        "FpDBId"?: string;
        "Config"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitMCJob(query: {
        "RegionId"?: string;
        "CensorConfig": string;
        "PipelineId": string;
        "OwnerId"?: number;
        "Video"?: string;
        "Images"?: string;
        "Texts"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitMcuJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "Template": string;
        "Input": string;
        "OwnerId"?: number;
        "TemplateId"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    UpdateMCTemplate(query: {
        "RegionId"?: string;
        "Name": string;
        "TemplateId": string;
        "OwnerId"?: number;
        "Porn"?: string;
        "Terrorism"?: string;
        "Politics"?: string;
        "Ad"?: string;
        "Qrcode"?: string;
        "Live"?: string;
        "Logo"?: string;
        "Abuse"?: string;
        "Contraband"?: string;
        "spam"?: string;
    }): Promise<{}>;
    AddCensorPipeline(query: {
        "RegionId"?: string;
        "Name": string;
        "OwnerId"?: number;
        "Priority"?: number;
        "NotifyConfig"?: string;
    }): Promise<{}>;
    AddMedia(query: {
        "RegionId"?: string;
        "FileURL": string;
        "OwnerId"?: number;
        "Title"?: string;
        "Description"?: string;
        "CoverURL"?: string;
        "Tags"?: string;
        "MediaWorkflowId"?: string;
        "MediaWorkflowUserData"?: string;
        "InputUnbind"?: boolean;
        "CateId"?: number;
        "OverrideParams"?: string;
    }): Promise<{}>;
    BindOutputBucket(query: {
        "RegionId"?: string;
        "Bucket": string;
        "OwnerId"?: number;
        "RoleArn"?: string;
    }): Promise<{}>;
    CategoryTree(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
    }): Promise<{}>;
    CheckResource(query: {
        "RegionId"?: string;
        "Pk": string;
        "Bid": string;
        "Hid": number;
        "Country": string;
        "TaskIdentifier": string;
        "TaskExtraData": string;
        "GmtWakeup": string;
        "Invoker": string;
        "Interrupt"?: boolean;
        "Success"?: boolean;
        "Message"?: string;
        "Level"?: number;
        "Url"?: string;
        "Prompt"?: string;
    }): Promise<{}>;
    DeleteMCTemplate(query: {
        "RegionId"?: string;
        "TemplateId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DeleteMcuJob(query: {
        "RegionId"?: string;
        "JobIds": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DeleteMediaWorkflow(query: {
        "RegionId"?: string;
        "MediaWorkflowId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DeleteWaterMarkTemplate(query: {
        "RegionId"?: string;
        "WaterMarkTemplateId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    DescribeMtsUserResourcePackage(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
    }): Promise<{}>;
    ListAsrPipeline(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "PageSize"?: number;
        "PageNumber"?: number;
        "State"?: string;
    }): Promise<{}>;
    ListMediaWorkflowExecutions(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "MediaWorkflowId"?: string;
        "MediaWorkflowName"?: string;
        "InputFileURL"?: string;
        "NextPageToken"?: string;
        "MaximumPageSize"?: number;
    }): Promise<{}>;
    ListTerrorismPipeline(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "PageSize"?: number;
        "PageNumber"?: number;
        "State"?: string;
    }): Promise<{}>;
    PhysicalDeleteResource(query: {
        "RegionId"?: string;
        "Pk": string;
        "Bid": string;
        "Hid": number;
        "Country": string;
        "TaskIdentifier": string;
        "TaskExtraData": string;
        "GmtWakeup": string;
        "Invoker": string;
        "Interrupt"?: boolean;
        "Success"?: boolean;
        "Message"?: string;
    }): Promise<{}>;
    QueryAnnotationJobList(query: {
        "RegionId"?: string;
        "AnnotationJobIds": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    QueryCoverJobList(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "CoverJobIds"?: string;
        "NextPageToken"?: string;
        "MaximumPageSize"?: number;
        "State"?: string;
        "StartOfJobCreatedTimeRange"?: string;
        "EndOfJobCreatedTimeRange"?: string;
        "PipelineId"?: string;
    }): Promise<{}>;
    QueryCoverPipelineList(query: {
        "RegionId"?: string;
        "PipelineIds": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    QueryEditingJobList(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "JobIds"?: string;
    }): Promise<{}>;
    QueryFacerecogJobList(query: {
        "RegionId"?: string;
        "FacerecogJobIds": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    QueryFpImportResult(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "StartTime"?: number;
        "EndTime"?: number;
        "PageSize"?: number;
        "PageIndex"?: number;
    }): Promise<{}>;
    QueryFpShotJobList(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "JobIds"?: string;
        "NextPageToken"?: string;
        "MaximumPageSize"?: number;
        "State"?: string;
        "StartOfJobCreatedTimeRange"?: string;
        "EndOfJobCreatedTimeRange"?: string;
        "PrimaryKeyList"?: string;
        "PipelineId"?: string;
    }): Promise<{}>;
    QueryImageSearchJobList(query: {
        "RegionId"?: string;
        "JobIds": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    QueryMCJobList(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "JobIds"?: string;
        "NextPageToken"?: string;
        "MaximumPageSize"?: number;
        "State"?: string;
        "StartOfJobCreatedTimeRange"?: string;
        "EndOfJobCreatedTimeRange"?: string;
        "PipelineId"?: string;
    }): Promise<{}>;
    QueryMediaCensorJobDetail(query: {
        "RegionId"?: string;
        "JobId": string;
        "OwnerId"?: number;
        "NextPageToken"?: string;
        "MaximumPageSize"?: number;
    }): Promise<{}>;
    QueryMediaList(query: {
        "RegionId"?: string;
        "MediaIds": string;
        "OwnerId"?: number;
        "IncludePlayList"?: boolean;
        "IncludeSnapshotList"?: boolean;
        "IncludeMediaInfo"?: boolean;
        "IncludeSummaryList"?: boolean;
    }): Promise<{}>;
    QueryTagJobList(query: {
        "RegionId"?: string;
        "TagJobIds": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    QueryVideoPoseJobList(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "JobIds"?: string;
    }): Promise<{}>;
    ReportMediaDetailJobResult(query: {
        "RegionId"?: string;
        "Tag": string;
        "Results": string;
        "JobId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    SearchMediaWorkflow(query: {
        "RegionId"?: string;
        "OwnerId"?: number;
        "PageSize"?: number;
        "PageNumber"?: number;
        "StateList"?: string;
    }): Promise<{}>;
    SetAuthConfig(query: {
        "RegionId"?: string;
        "OwnerId"?: string;
        "Key1"?: string;
        "Key2"?: string;
    }): Promise<{}>;
    SubmitComplexJob(query: {
        "RegionId"?: string;
        "ComplexConfigs": string;
        "TranscodeOutput": string;
        "OutputBucket": string;
        "PipelineId": string;
        "Inputs": string;
        "OwnerId"?: number;
        "OutputLocation"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitFpCompareJob(query: {
        "RegionId"?: string;
        "QueryMedia": string;
        "PipelineId": string;
        "MasterMedia": string;
        "OwnerId"?: number;
        "FpDBId"?: string;
        "MatchedFrameStorage"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitJobs(query: {
        "RegionId"?: string;
        "Outputs": string;
        "OutputBucket": string;
        "PipelineId": string;
        "Input": string;
        "OwnerId"?: number;
        "OutputLocation"?: string;
    }): Promise<{}>;
    SubmitMediaFpDeleteJob(query: {
        "RegionId"?: string;
        "PrimaryKey": string;
        "FpDBId": string;
        "PipelineId": string;
        "OwnerId"?: number;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitMediaInfoJob(query: {
        "RegionId"?: string;
        "Input": string;
        "OwnerId"?: number;
        "UserData"?: string;
        "PipelineId"?: string;
        "Async"?: boolean;
    }): Promise<{}>;
    SubmitPornJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "PornConfig": string;
        "Input": string;
        "OwnerId"?: number;
        "UserData"?: string;
    }): Promise<{}>;
    SubmitSnapshotJob(query: {
        "RegionId"?: string;
        "SnapshotConfig": string;
        "Input": string;
        "OwnerId"?: number;
        "UserData"?: string;
        "PipelineId"?: string;
    }): Promise<{}>;
    SubmitVideoSplitJob(query: {
        "RegionId"?: string;
        "PipelineId": string;
        "Input": string;
        "OwnerId"?: number;
        "VideoSplitConfig"?: string;
        "UserData"?: string;
    }): Promise<{}>;
    UpdateCensorPipeline(query: {
        "RegionId"?: string;
        "Name": string;
        "State": string;
        "Priority": number;
        "PipelineId": string;
        "OwnerId"?: number;
        "NotifyConfig"?: string;
    }): Promise<{}>;
    UpdateMcuTemplate(query: {
        "RegionId"?: string;
        "Template": string;
        "TemplateId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    UpdateMediaCover(query: {
        "RegionId"?: string;
        "MediaId": string;
        "OwnerId"?: number;
        "CoverURL"?: string;
    }): Promise<{}>;
    UpdateMediaWorkflowTriggerMode(query: {
        "RegionId"?: string;
        "TriggerMode": string;
        "MediaWorkflowId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
    UpdatePornPipeline(query: {
        "RegionId"?: string;
        "Name": string;
        "State": string;
        "Priority": number;
        "PipelineId": string;
        "OwnerId"?: number;
        "NotifyConfig"?: string;
    }): Promise<{}>;
    UpdateWaterMarkTemplate(query: {
        "RegionId"?: string;
        "Name": string;
        "Config": string;
        "WaterMarkTemplateId": string;
        "OwnerId"?: number;
    }): Promise<{}>;
}
export default MTS;
