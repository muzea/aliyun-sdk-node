{"summary":"开源客户端访问云消息队列 RabbitMQ 版服务端时，需要传入用户名和密码进行权限认证，认证通过才允许访问服务端。云消息队列 RabbitMQ 版支持通过阿里云访问控制（RAM）的AccessKey和AccessKey Secret生成用户名和密码。","methods":["post"],"schemes":["http","https"],"security":[{"AK":[]}],"operationType":"readAndWrite","deprecated":false,"systemTags":{"operationType":"create"},"parameters":[{"name":"instanceId","in":"query","schema":{"description":"消息队列RabbitMQ版实例的ID，表示您需要为哪个实例创建静态用户名密码。","type":"string","required":true,"docRequired":true,"example":"amqp-cn-*********"}},{"name":"accountAccessKey","in":"query","schema":{"description":"您的阿里云账号或RAM用户的AccessKey ID。获取方式，请参见[创建AccessKey](~~116401~~)。\n\n> 如果您使用RAM用户的AccessKey创建的静态用户名密码接入消息队列RabbitMQ版并收发消息，请确保该RAM用户已被授予收发消息权限。更多信息，请参见[RAM权限策略](~~146559~~)。","type":"string","required":true,"docRequired":true,"example":"LTAI5t8be*******tEJ6vfo"}},{"name":"userName","in":"query","schema":{"description":"待创建的静态用户名。\n\n该参数值由实例ID和AccessKey ID构造的字符串经过Base64编码得出，具体计算方法，请参见本文中的**用户名计算示例代码**。\n","type":"string","required":true,"docRequired":true,"example":"LTAI5***********eRZtEJ6vfo"}},{"name":"signature","in":"query","schema":{"description":"签名，系统将根据请求参数中的签名、AccessKey Secret签名和用户名计算出静态用户密码。\n\n签名由指定的用户名创建时间戳和AccessKey ID进行HmacSHA1加密算法计算得出。具体计算方法，请参见本文中的**签名算法示例代码**。","type":"string","required":true,"docRequired":true,"example":"22c2d7d1769cb53c5a6d9213248e2de524******"}},{"name":"createTimestamp","in":"query","schema":{"description":"指定该用户名密码创建的时间戳。单位：毫秒。\n\n> 该时间戳用于计算静态用户密码，由您自定义设置。不是系统生成用户名密码时的时间戳。","type":"integer","format":"int64","required":true,"docRequired":true,"example":"1671175303522"}},{"name":"secretSign","in":"query","schema":{"description":"AccessKey Secret签名，系统将根据请求参数中的签名、AccessKey Secret签名和用户名计算出静态用户密码。\n\nAccessKey Secret签名由指定的用户名创建时间戳和AccessKey ID进行HmacSHA1加密算法计算得出。具体计算方法，请参见本文中的**签名算法示例代码**。","type":"string","required":true,"docRequired":true,"example":"4c1a6367ce4c4255e9617326f9133ac635******"}}],"responses":{"200":{"schema":{"title":"Schema of Response","description":"返回结果。","type":"object","properties":{"RequestId":{"title":"Id of the request","description":"请求ID。","type":"string","enumValueTitles":{},"example":"FEBA5E0C-50D0-4FA6-A794-4901E5465***"},"Code":{"description":"返回码。返回200代表成功。","type":"integer","format":"int32","example":"200"},"Message":{"description":"返回信息。","type":"string","example":"operation success"},"Success":{"description":"执行结果是否成功。","type":"boolean","example":"true"},"Data":{"description":"返回数据。","type":"object","properties":{"AccessKey":{"description":"创建该用户名密码所使用的AccessKey ID。","type":"string","example":"LTAI5***********eRZtEJ6vfo"},"Password":{"description":"创建的静态用户密码。","type":"string","example":"OUYwQzM2QjZBRkUxNDRFM***************MzZCNzdDQzoxNjcxNDMwMzkyODI1"},"CreateTimeStamp":{"description":"创建用户名密码的时间戳。单位：毫秒。","type":"integer","format":"int64","example":"1671175303522"},"InstanceId":{"description":"消息队列RabbitMQ版实例的ID。","type":"string","example":"amqp-cn-*********"},"MasterUId":{"description":"创建静态用户名密码的AccessKey所属的阿里云账号或RAM用户的账号ID。","type":"integer","format":"int64","example":"1565*******973901"},"UserName":{"description":"创建的静态用户名。","type":"string","example":"MjphbXFwLWNuLXVxbTJ6cjc2djAwMzpMVEFJNX*******ZNMWVSWnRFSjZ2Zm8="}}}}}}},"staticInfo":{"returnType":"synchronous"},"responseDemo":"[{\"type\":\"json\",\"example\":\"{\\n  \\\"RequestId\\\": \\\"FEBA5E0C-50D0-4FA6-A794-4901E5465***\\\",\\n  \\\"Code\\\": 200,\\n  \\\"Message\\\": \\\"operation success\\\",\\n  \\\"Success\\\": true,\\n  \\\"Data\\\": {\\n    \\\"AccessKey\\\": \\\"LTAI5***********eRZtEJ6vfo\\\",\\n    \\\"Password\\\": \\\"OUYwQzM2QjZBRkUxNDRFM***************MzZCNzdDQzoxNjcxNDMwMzkyODI1\\\",\\n    \\\"CreateTimeStamp\\\": 1671175303522,\\n    \\\"InstanceId\\\": \\\"amqp-cn-*********\\\",\\n    \\\"MasterUId\\\": 0,\\n    \\\"UserName\\\": \\\"MjphbXFwLWNuLXVxbTJ6cjc2djAwMzpMVEFJNX*******ZNMWVSWnRFSjZ2Zm8=\\\"\\n  }\\n}\",\"errorExample\":\"\"},{\"type\":\"xml\",\"example\":\"<CreateAccountResponse>\\n    <RequestId>FEBA5E0C-50D0-4FA6-A794-4901E5465***</RequestId>\\n    <Code>200</Code>\\n    <Message>operation success</Message>\\n    <Success>true</Success>\\n    <Data>\\n        <AccessKey>LTAI5***********eRZtEJ6vfo</AccessKey>\\n        <Password>OUYwQzM2QjZBRkUxNDRFM***************MzZCNzdDQzoxNjcxNDMwMzkyODI1</Password>\\n        <CreateTimeStamp>1671175303522</CreateTimeStamp>\\n        <InstanceId>amqp-cn-*********</InstanceId>\\n        <UserName>MjphbXFwLWNuLXVxbTJ6cjc2djAwMzpMVEFJNX*******ZNMWVSWnRFSjZ2Zm8=</UserName>\\n    </Data>\\n</CreateAccountResponse>\",\"errorExample\":\"\"}]","title":"创建用户名密码","description":"### 背景信息\n开源客户端访问云消息队列 RabbitMQ 版服务端时，需要传入用户名和密码进行权限认证，认证通过才允许访问服务端。\n云消息队列 RabbitMQ 版支持通过阿里云访问控制（RAM）的AccessKey和AccessKey Secret生成用户名和密码。\n### 注意事项\n- 创建静态用户名密码所属的实例需处于服务中状态。\n- 一个实例下的AccessKey和静态用户名密码一一对应，即一个实例下的一个AccessKey只能创建一个静态用户名密码。\n- 如果需要更新静态用户名密码，您可以删除该静态用户名密码后重新创建。\n### 用户名计算示例代码\n请求参数中的userName的参数值，需要由实例ID和AccessKey ID构造字符串并进行Base64编码得出。具体的计算方法如下：\n```\n    public class Base64Utils {\n         public static final Charset UTF8 = Charset.forName(\"UTF-8\");\n         /\\*\\*\n         *解码base64字符串\n         \\* @param str\n         \\* @return\n         \\*/\n         public static String decode(String str) {\n              return new String(Base64.getDecoder().decode(str.getBytes(UTF8)), UTF8);\n         }\n         /\\*\\*\n         *编码为base64字符串\n         \\* @param bytes = \"2\" + \":\" + \"{instanceId}\" + \":\" + \"{ak}\"\n         \\* @return\n         \\*/\n         public static String encode(String bytes) {\n              return new String(Base64.getEncoder().encode(bytes.getBytes(UTF8)), UTF8);\n          }\n\n         public static void main(String[] args) {\n              String example = \"this is a example\";\n              System.out.println(encode(example));\n              System.out.println(decode(encode(example)));\n\n        }\n    }\n```\n\n### 签名算法示例代码\n请求参数中signature和secretSign的参数值，需要由指定的静态用户名的创建时间戳和AccessKey ID进行加密算法计算得出。具体的算法和示例代码如下：\n```\npublic static String hamcsha1(byte[] data, byte[] key) throws NoSuchAlgorithmException, InvalidKeyException {\n        SecretKeySpec signingKey = new SecretKeySpec(key, \"HmacSHA1\");\n        Mac mac = Mac.getInstance(\"HmacSHA1\");\n        mac.init(signingKey);\n        return byte2hex(mac.doFinal(data));\n    }\n\n    public static String byte2hex(byte[] b) {\n        StringBuilder hs = new StringBuilder();\n        String stmp;\n        for (int n = 0; b != null && n < b.length; n++) {\n            stmp = Integer.toHexString(b[n] & 0XFF);\n            if (stmp.length() == 1) {\n                hs.append('0');\n            }\n            hs.append(stmp);\n       } \n       return hs.toString().toUpperCase();\n    }\n     // value1是用户名创建时间戳、value2是AccessKey ID，这样计算出来的是SecretSign，反之则是signature。\n     public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException {\n         String value1 = \"XXX\";\n         String value2 = \"XXX\";\n         System.out.println(hamcsha1(value1.getBytes(), value2.getBytes()));\n     }\n```","extraInfo":"### 控制台操作\n除了调用**CreateAccount**接口，您还可以通过云消息队列 RabbitMQ 版控制台创建静态用户名密码。具体操作，请参见[静态用户名密码管理](~~184399~~)。"}