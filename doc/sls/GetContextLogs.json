{"summary":"调用GetContextLogs接口查询指定日志前（上文）后（下文）的若干条日志。","path":"/logstores/{logstore}","methods":["get"],"schemes":["http","https"],"security":[{"AK":[]}],"consumes":["application/json"],"produces":["application/json"],"operationType":"read","deprecated":false,"systemTags":{"operationType":"get"},"parameters":[{"name":"project","in":"host","schema":{"title":"project 名称。","description":"Project名称。","type":"string","required":true,"example":"ali-test-project"}},{"name":"logstore","in":"path","schema":{"title":"logstore 名称。","description":"Logstore名称。","type":"string","required":true,"example":"test-logstore"}},{"name":"type","in":"query","schema":{"title":"Logstore中数据的类型。该接口中该参数固定为context_log。","description":"Logstore中数据的类型。该接口中该参数固定为context_log。","type":"string","required":true,"example":"context_log","default":"context_log","enum":["context_log"]}},{"name":"pack_id","in":"query","schema":{"title":"起始日志所属的LogGroup的唯一身份标识。","description":"起始日志所属的LogGroup的唯一身份标识。","type":"string","required":true,"example":"85C897C740352DC6-808"}},{"name":"pack_meta","in":"query","schema":{"title":"起始日志在对应LogGroup内的唯一上下文结构标识。","description":"起始日志在对应LogGroup内的唯一上下文结构标识。","type":"string","required":true,"example":"2|MTY1NTcwNTUzODY5MTY0MDk1Mg==|3|0"}},{"name":"back_lines","in":"query","schema":{"title":"指定起始日志往前（上文）的日志条数，取值范围为(0,100]。","description":"指定起始日志往前（上文）的日志条数，取值范围为`(0,100]`。","type":"integer","format":"int64","required":true,"example":"10"}},{"name":"forward_lines","in":"query","schema":{"title":"指定起始日志往后（下文）的日志条数，取值范围为(0,100]。","description":"指定起始日志往后（下文）的日志条数，取值范围为`(0,100]`。","type":"integer","format":"int64","required":true,"example":"10"}}],"responses":{"200":{"schema":{"title":"Schema of Response","description":"Schema of Response","type":"object","properties":{"total_lines":{"title":"返回的总日志条数，包含请求参数中所指定的起始日志。","description":"返回的总日志条数，包含请求参数中所指定的起始日志。","type":"integer","format":"int64","example":"201"},"back_lines":{"title":"向前查询到的日志条数。","description":"向前查询到的日志条数。","type":"integer","format":"int64","example":"100"},"forward_lines":{"title":"向后查询到的日志条数。","description":"向后查询到的日志条数。","type":"integer","format":"int64","example":"100"},"progress":{"title":"查询的结果是否完整。\nComplete：查询已经完成，返回结果为完整结果。\nIncomplete：查询已经完成，返回结果为不完整结果，需要重复请求以获得完整结果。","description":"查询的结果是否完整。\n\n- Complete：查询已经完成，返回结果为完整结果。\n- Incomplete：查询已经完成，返回结果为不完整结果，需要重复请求以获得完整结果。","type":"string","example":"Complete"},"logs":{"title":"获取到的日志，按上下文顺序排列。当根据指定起始日志查询不到上下文日志时，此参数为空。","description":"获取到的日志。","type":"array","items":{"title":"每一条日志是一个 map，例如 {\n            \"__index_number__\": \"-100\",\n            \"__tag__:__pack_id__\": \"895CEA449A52FE-8c8\",\n            \"__pack_meta__\": \"0|MTU1OTI4NTExMjg3NTQ2NDU1OA==|4|1\",\n            ...\n      }。","description":"获取到的日志，按上下文顺序排列。当根据指定起始日志查询不到上下文日志时，此参数为空。","type":"object","example":"{ \"__index_number__\": \"-100\",             \"__tag__:__pack_id__\": \"895CEA449A52FE-8c8\",             \"__pack_meta__\": \"0|MTU1OTI4NTExMjg3NTQ2NDU1OA==|4|1\"}"}}}}}},"responseDemo":"[{\"type\":\"json\",\"example\":\"{\\n  \\\"total_lines\\\": 201,\\n  \\\"back_lines\\\": 100,\\n  \\\"forward_lines\\\": 100,\\n  \\\"progress\\\": \\\"Complete\\\",\\n  \\\"logs\\\": [\\n    {\\n      \\\"__index_number__\\\": \\\"-100\\\",\\n      \\\"__tag__:__pack_id__\\\": \\\"895CEA449A52FE-8c8\\\",\\n      \\\"__pack_meta__\\\": \\\"0|MTU1OTI4NTExMjg3NTQ2NDU1OA==|4|1\\\"\\n    }\\n  ]\\n}\",\"errorExample\":\"\"},{\"type\":\"xml\",\"example\":\"\",\"errorExample\":\"\"}]","title":"查询上下文日志","description":"### 接口说明\n- 上下文查询的时间范围为起始日志的前后一天。\n- Host由Project名称和日志服务Endpoint构成，您需要在Host中指定Project。\n- 已创建并获取AccessKey。更多信息，请参见[访问密钥](~~29009~~)。\n\n 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维。RAM用户需具备操作日志服务资源的权限。具体操作，请参见[创建RAM用户及授权](~~47664~~)。\n- 已明确您查询日志所属的Project名称、所属地域、Logstore名称等。如何查询，请参见[管理Project](~~48984~~)和[管理Logstore](~~48990~~)。\n- 查询日志前，已配置索引。具体操作，请参见[创建索引](~~90732~~)。\n- pack\\_id和pack\\_meta字段属于内部字段，在执行查询前，您需要在日志服务控制台通过浏览器的调试功能获取字段值。\n### 鉴权资源\n下表列出了API对应的授权信息。您可以在RAM权限策略语句的Action元素中添加该信息，用于为RAM用户或RAM角色授予调用此API的权限。\n|动作（Action）  | 授权策略中的资源描述方式（Resource）  |\n| :------------ | :------------ |\n| `log:GetLogStoreContextLogs`  | `acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/logstore/{#LogstoreName}`  |\n","responseParamsDescription":"logs中的每一项都是该日志的内容（键值对），除用户日志内容外，还包含三个字段，具体如下：\n| 参数名称 | 数据类型| 示例值  | 描述  |\n| :------------ | :------------ | :------------ | :------------ |\n| `__index_number__ ` | String  |  -100| 该日志在本次查询结果中相对上下文的位置，负数表示上文，0表示起始日志，正数表示下文。例如：-100表示起始日志往前的第100条日志。  |\n|`__tag__:__pack_id__`| String  |  895CEA449A52FE-8c8 | 该日志所属的LogGroup的唯一身份标识，可作为请求参数中的pack_id进行查询。  |\n|`__pack_meta__`| String  | `0\\|MTU1OTI4NTExMjg3NTQ2NDU1OA==\\|4\\|1` | 该日志在所属LogGroup内的唯一上下文结构标识，可作为请求参数中的pack_meta进行查询。  |","extraInfo":"| HTTP 状态码 | 错误码| 错误信息  | 描述  |\n| :------------ | :------------ | :------------ | :------------ |\n|404|ProjectNotExist|Project ProjectName does not exist.|Project 不存在。|\n|404|LogstoreNotExist|logstore logstoreName does not exist.|Logstore 不存在。|\n|400|InvalidParameter|Invalid pack meta/id.|请求参数中的 pack_meta 或 pack_id 为非法值。|\n|400|InvalidParameter|back_lines or forward_lines must be postive.|请求参数中的 back_lines 或 forward_lines 中有非法值，其中至少有一个参数应为正数。|\n\n更多错误码，请参见[通用错误码](~~29013~~)。\n\n**SDK示例**\n\n此处以Java SDK为例，请使用Java SDK 0.6.38及以上的版本。 如果您通过Logtail采集方式采集日志，该方式将自动为日志附加上下文信息。 更多示例，请参见[SDK代码示例](https://github.com/aliyun/aliyun-log-java-producer/blob/a5a57cafd9e795ee5a781aa2b0c2742bce3ddef5/src/main/java/com/aliyun/openservices/aliyun/log/producer/internals/SendProducerBatchTask.java)。\n```\npackage sdksample;\n\nimport com.aliyun.openservices.log.Client;\nimport com.aliyun.openservices.log.common.LogContent;\nimport com.aliyun.openservices.log.common.LogItem;\nimport com.aliyun.openservices.log.common.QueriedLog;\nimport com.aliyun.openservices.log.common.TagContent;\nimport com.aliyun.openservices.log.exception.LogException;\nimport com.aliyun.openservices.log.request.PutLogsRequest;\nimport com.aliyun.openservices.log.response.GetContextLogsResponse;\nimport com.aliyun.openservices.log.response.GetLogsResponse;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\npublic class GetContextLogsSample {\n\n    private static int getCurrentTimestamp() {\n        return (int) (new Date().getTime() / 1000);\n    }\n\n    private static class PackInfo {\n        public String packID;\n        public String packMeta;\n\n        public PackInfo(String id, String meta) {\n            this.packID = id;\n            this.packMeta = meta;\n        }\n    }\n\n    private static PackInfo extractPackInfo(QueriedLog log) {\n        PackInfo ret = new PackInfo(\"\", \"\");\n        ArrayList<LogContent> contents = log.GetLogItem().GetLogContents();\n        for (int i = 0; i < contents.size(); ++i) {\n            LogContent content = contents.get(i);\n            if (content.GetKey().equals(\"__tag__:__pack_id__\")) {\n                ret.packID = content.GetValue();\n            } else if (content.GetKey().equals(\"__pack_meta__\")) {\n                ret.packMeta = content.GetValue();\n            }\n        }\n        return ret;\n    }\n\n    public static void main(String args[]) throws InterruptedException, LogException {\n        // 日志服务的服务接入点。此处以杭州为例，其它地域请根据实际情况填写。\n        String endpoint = \"https://cn-hangzhou.log.aliyuncs.com\"; \n       // 本示例从环境变量中获取AccessKey ID和AccessKey Secret。\n        String accessKeyId = System.getenv(\"ALIBABA_CLOUD_ACCESS_KEY_ID\")；\n        String accessKeySecret = System.getenv(\"ALIBABA_CLOUD_ACCESS_KEY_SECRET\"); \n        // 待查询的Project名称。\n        String project = \"ProjectName\"; \n       // 待查询的Logstore名称。\n        String logstore = \"logstoreName\"; \n        // 构建一个客户端实例。\n        Client client = new Client(endpoint, accessKeyId, accessKeySecret);\n\n        System.out.println(\"请确保指定的logstore已开启索引。\");\n        Thread.sleep(3000);\n\n        // 使用GetLogs并在查询语句中加上|with_pack_meta来获取起始日志的pack_id和pack_meta。\n        // 查询时间范围：最近15分钟。\n        // 起始日志：返回结果的第一条。\n        String query = \"*|with_pack_meta\";\n        GetLogsResponse response = client.GetLogs(project, logstore,\n                (int) getCurrentTimestamp() - 900, (int) getCurrentTimestamp(),\"\", query);\n        ArrayList<QueriedLog> logs = response.GetLogs();\n        if (logs.isEmpty()) {\n            System.out.println(\"未查询到任何日志。\");\n            System.exit(1);\n        }\n\n        // 提取第一条日志的pack信息。\n        PackInfo info = extractPackInfo(logs.get(0));\n        if (info.packMeta.isEmpty() || info.packID.isEmpty()) {\n            System.out.println(\"pack ID: \" + info.packID + \", pack meta: \" + info.packMeta);\n            System.out.println(\"起始日志的pack信息不完整，请确保该日志是通过logtail写入。\");\n            System.exit(1);\n        }\n\n        // 使用得到的pack信息进行上下文查询（双向查询）。\n        GetContextLogsResponse contextRes = client.getContextLogs(project, logstore,\n                info.packID, info.packMeta, 10, 10);\n        System.out.println(\"双向查询\");\n        System.out.println(\"pack ID: \" + info.packID + \", pack meta: \" + info.packMeta);\n        System.out.println(\"is complete: \" + contextRes.isCompleted());\n        System.out.println(\"total lines: \" + contextRes.getTotalLines());\n        System.out.println(\"back lines: \" + contextRes.getBackLines());\n        System.out.println(\"forward lines: \" + contextRes.getForwardLines());\n        Thread.sleep(1000);\n\n        // 使用查询结果中的第一条日志，向前查询上文（单向），至多三次。\n        List<QueriedLog> contextLogs = contextRes.getLogs();\n        for (int i = 0; i < 3 && !contextLogs.isEmpty(); i++) {\n            QueriedLog log = contextLogs.get(0);\n            info = extractPackInfo(log);\n            GetContextLogsResponse res = client.getContextLogs(project, logstore,\n                    info.packID, info.packMeta, 10, 0);\n            System.out.println(\"向前查询上文\");\n            System.out.println(\"pack ID: \" + info.packID + \", pack meta: \" + info.packMeta);\n            System.out.println(\"is complete: \" + res.isCompleted());\n            System.out.println(\"total lines: \" + res.getTotalLines());\n            System.out.println(\"back lines: \" + res.getBackLines());\n            System.out.println(\"forward lines: \" + res.getForwardLines());\n            contextLogs = res.getLogs();\n\n            Thread.sleep(1000);\n        }\n\n        // 使用查询结果中的最后一条日志，向后查询下文（单向），至多三次。\n        contextLogs = contextRes.getLogs();\n        for (int i = 0; i < 3 && !contextLogs.isEmpty(); i++) {\n            QueriedLog log = contextLogs.get(contextLogs.size() - 1);\n            info = extractPackInfo(log);\n            GetContextLogsResponse res = client.getContextLogs(project, logstore,\n                    info.packID, info.packMeta, 0, 10);\n            System.out.println(\"向后查询下文\");\n            System.out.println(\"pack ID: \" + info.packID + \", pack meta: \" + info.packMeta);\n            System.out.println(\"is complete: \" + res.isCompleted());\n            System.out.println(\"total lines: \" + res.getTotalLines());\n            System.out.println(\"back lines: \" + res.getBackLines());\n            System.out.println(\"forward lines: \" + res.getForwardLines());\n            contextLogs = res.getLogs();\n\n            Thread.sleep(1000);\n        }\n    }\n}\n```\n\n\n\n"}