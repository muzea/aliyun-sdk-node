{"summary":"在指定的Logstore上创建一个消费组。","path":"/logstores/{logstore}/consumergroups","methods":["post"],"schemes":["http","https"],"security":[{"AK":[]}],"consumes":["application/json"],"produces":[],"operationType":"write","deprecated":false,"systemTags":{"operationType":"create"},"parameters":[{"name":"logstore","in":"path","schema":{"description":"Logstore名称。","type":"string","required":true,"example":"aliyun-test-logstore"}},{"name":"project","in":"host","schema":{"description":"Project名称。","type":"string","required":true,"example":"aliyun-test-project"}},{"name":"body","in":"body","style":"json","schema":{"description":"请求体参数。","type":"object","properties":{"consumerGroup":{"description":"消费组名称，在Project下必须唯一。","type":"string","required":true,"example":"consumerGroupX"},"timeout":{"description":"超时时间。在超时时间段内没有收到心跳，消费者将被删除。单位：秒。","type":"integer","format":"int32","required":true,"example":"300"},"order":{"description":"是否按顺序消费。\n\n- true：按顺序消费。\n    - 同一个Shard内按照保留字段**\\_\\_tag\\_\\_:\\_\\_receive\\_time\\_\\_**由小到大按顺序消费。\n    - Shard分裂后，先消费原Shard数据，然后同时消费由该Shard分裂的Shard数据。\n    - Shard合并后，先消费原Shard数据，然后消费由原Shard合并后的新Shard数据。\n- false：不按顺序消费。即所有Shard同时开始消费，Shard分裂或者合并后产生的新Shard，也会立即消费。","type":"boolean","required":true,"example":"true"}},"required":true}}],"responses":{"200":{"headers":{"Server":{"schema":{"title":"服务器名称。","type":"string","example":"nginx"}},"Content-Type":{"schema":{"title":"返回的响应体的内容格式。","type":"string","example":"application/json"}},"Content-Length":{"schema":{"title":"响应内容长度。","type":"string","example":"0"}},"Connection":{"schema":{"title":"是否长链接。取值包括：  close：不是长链接，则每个HTTP请求都会重新建立TCP连接。 keep-alive：长链接，TCP连接建立后保持连接状态，节省连接所需时间和带宽。","type":"string","example":"close"}},"Date":{"schema":{"title":"返回响应的时间。","type":"string","example":"Sun, 27 May 2018 08:25:04 GMT"}},"x-log-requestid":{"schema":{"title":"服务端产生的标识，该请求的唯一ID。","type":"string","example":"5B0A6B60BB6EE39764D458B5"}}}}},"responseDemo":"[{\"errorExample\":\"\",\"example\":\"{}\",\"type\":\"json\"}]","title":"创建消费组","description":"### 接口说明\n\n- 请求语法中Host由Project名称和日志服务Endpoint构成，您需要在Host中指定Project。\n- 每个Logstore中最多创建30个消费组。消费组名称，在Project下必须唯一。\n- 已创建并获取AccessKey。更多信息，请参见[访问密钥](~~29009~~)。\n\n 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维。RAM用户需具备操作日志服务资源的权限。具体操作，请参见[创建RAM用户及授权](~~47664~~)。\n- 已明确您查询日志所属的Project名称、所属地域、Logstore名称等。如何查询，请参见[管理Project](~~48984~~)和[管理Logstore](~~48990~~)。\n- 日志服务提供基于Java SDK的普通消费和消费组消费日志使用示例。更多信息，请参见[普通消费](~~120035~~)和[通过消费组消费日志数据](~~28998~~)。\n### 鉴权资源\n下表列出了API对应的授权信息。您可以在RAM权限策略语句的Action元素中添加该信息，用于为RAM用户或RAM角色授予调用此API的权限。\n|动作（Action）  | 授权策略中的资源描述方式（Resource）  |\n| :------------ | :------------ |\n| `log:CreateConsumerGroup`  | `acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/logstore/{#logstoreName}/consumergroup/{#ConsumerGroup}`  |","extraInfo":"| HttpStatusCode  | ErrorCode  | ErrorMessage  | 错误码描述  |\n| :------------ | :------------ | :------------ | :------------ |\n| 404  | ProjectNotExist  | Project does not exist.  | Project不存在。  |\n| 404  | LogStoreNotExist  | Logstore does not exist.  | Logstore不存在。  |\n| 400  | ConsumerGroupAlreadyExist  | consumer group already exist.| 消费组已存在。  |\n| 400  |  JsonInfoInvalid |  consumerGroup or timeout is of error format. | 参数consumerGroup或timeout格式错误。  |\n|  500 |  InternalServerError |  Specified Server Error Message. | 内部服务调用错误。 |\n\n更多信息，请参见[通用错误码](~~29013~~)。"}