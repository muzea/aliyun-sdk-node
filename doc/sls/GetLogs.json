{"summary":"查询指定Project下某个Logstore中的日志数据。","path":"/logstores/{logstore}?type=log","methods":["get"],"schemes":["http","https"],"security":[{"AK":[]}],"consumes":["application/json"],"produces":["application/json"],"operationType":"read","deprecated":false,"systemTags":{"operationType":"get"},"parameters":[{"name":"project","in":"host","schema":{"title":"project 名称。","description":"Project名称。","type":"string","required":true,"example":"ali-test-project"}},{"name":"logstore","in":"path","schema":{"title":"logstore 名称。","description":"查询Logstore中的数据。","type":"string","required":true,"example":"example-logstore"}},{"name":"from","in":"query","schema":{"title":"查询开始时间点。该时间是指写入日志数据时指定的日志时间。\n\n请求参数from和to定义的时间区间遵循左闭右开原则，即该时间区间包括区间开始时间点，但不包括区间结束时间点。如果from和to的值相同，则为无效区间，函数直接返回错误。\nUnix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。","description":"查询开始时间点。该时间是指写入日志数据时指定的日志时间。\n\n- 请求参数**from**和**to**定义的时间区间遵循左闭右开原则，即该时间区间包括区间开始时间点，但不包括区间结束时间点。如果**from**和**to**的值相同，则为无效区间，函数直接返回错误。\n- Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。\n\n> 如果您要确保不漏查数据，请将查询时间对齐到分钟级别。如果您在分析语句中设置了时间范围，则查询分析时以该时间范围为准。\n\n如果您需要精确到秒，需要在分析语句中指定时间时，使用[from_unixtime函数](~~63451~~)或[to_unixtime函数](~~63451~~)转换下时间格式。例如：\n- `* | SELECT * FROM log WHERE from_unixtime(__time__) > from_unixtime(1664186624) AND from_unixtime(__time__) < now()`\n- `* | SELECT * FROM log WHERE __time__ > to_unixtime(date_parse('2022-10-19 15:46:05', '%Y-%m-%d %H:%i:%s')) AND __time__ < to_unixtime(now())`","type":"integer","format":"int32","required":true,"example":"1627268185"}},{"name":"to","in":"query","schema":{"title":"查询结束时间点。该时间是指写入日志数据时指定的日志时间。\n\n请求参数from和to定义的时间区间遵循左闭右开原则，即该时间区间包括区间开始时间点，但不包括区间结束时间点。如果from和to的值相同，则为无效区间，函数直接返回错误。\nUnix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。","description":"查询结束时间点。该时间是指写入日志数据时指定的日志时间。\n\n- 请求参数**from**和**to**定义的时间区间遵循左闭右开原则，即该时间区间包括区间开始时间点，但不包括区间结束时间点。如果**from**和**to**的值相同，则为无效区间，函数直接返回错误。\n- Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。\n\n> 如果您要确保不漏查数据，请将查询时间对齐到分钟级别。如果您在分析语句中设置了时间范围，则查询分析时以该时间范围为准。\n\n如果您需要精确到秒，需要在分析语句中指定时间时，使用[from_unixtime函数](~~63451~~)或[to_unixtime函数](~~63451~~)转换下时间格式。例如：\n- `* | SELECT * FROM log WHERE from_unixtime(__time__) > from_unixtime(1664186624) AND from_unixtime(__time__) < now()`\n- `* | SELECT * FROM log WHERE __time__ > to_unixtime(date_parse('2022-10-19 15:46:05', '%Y-%m-%d %H:%i:%s')) AND __time__ < to_unixtime(now())`","type":"integer","format":"int32","required":true,"example":"1627269085"}},{"name":"query","in":"query","schema":{"title":"查询语句或者分析语句。更多信息，请参见查询概述和分析概述。\n\n在query参数的分析语句中加上set session parallel_sql=true;，表示使用SQL独享版。例如* | set session parallel_sql=true; select count(*) as pv 。\n\n说明 当query参数中有分析语句（SQL语句）时，该接口的line参数和offset参数无效，建议设置为0，需通过SQL语句的LIMIT语法实现翻页。更多信息，请参见分页显示查询分析结果。","description":"查询语句或者分析语句。更多信息，请参见[查询概述](~~43772~~)和[分析概述](~~53608~~)。\n在query参数的分析语句中加上`set session parallel_sql=true;`，表示使用SQL独享版。例如`* | set session parallel_sql=true; select count(*) as pv` 。常见查询与分析问题，请参见[查询与分析日志的常见报错](~~61628~~)。\n\n> 当query参数中有分析语句（SQL语句）时，该接口的line参数和offset参数无效，建议设置该接口的参数为0，需通过SQL语句的LIMIT语法实现翻页。更多信息，请参见[分页显示查询分析结果](~~89994~~)。","type":"string","required":false,"example":"status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5"}},{"name":"topic","in":"query","schema":{"title":"status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5","description":"日志主题。默认值为双引号（\"\"）。更多信息，请参见[日志主题（Topic）](~~48881~~)。","type":"string","required":false,"example":"topic"}},{"name":"line","in":"query","schema":{"title":"仅当query参数为查询语句时，该参数有效，表示请求返回的最大日志条数。最小值为0，最大值为100，默认值为100。","description":"仅当query参数为查询语句时，该参数有效，表示请求返回的最大日志条数。最小值为0，最大值为100，默认值为100。","type":"integer","format":"int64","required":false,"maximum":"100","minimum":"0","example":"100","default":"100"}},{"name":"offset","in":"query","schema":{"title":"仅当query参数为查询语句时，该参数有效，表示查询开始行。默认值为0。","description":"仅当query参数为查询语句时，该参数有效，表示查询开始行。默认值为0。","type":"integer","format":"int64","required":false,"example":"0","default":"0"}},{"name":"reverse","in":"query","schema":{"title":"用于指定返回结果是否按日志时间戳降序返回日志，精确到分钟级别。\n\ntrue：按照日志时间戳降序返回日志。\nfalse（默认值）：按照日志时间戳升序返回日志。\n注意\n当query参数为查询语句时，参数reverse有效，用于指定返回日志排序方式。\n当query参数为查询和分析语句时，参数reverse无效，由SQL分析语句中order by语法指定排序方式。如果order by为asc（默认），则为升序；如果order by为desc，则为降序。","description":"用于指定返回结果是否按日志时间戳降序返回日志，精确到分钟级别。\n\n- true：按照日志时间戳降序返回日志。\n- false（默认值）：按照日志时间戳升序返回日志。\n\n><notice>\n\n- 当query参数为查询语句时，参数reverse有效，用于指定返回日志排序方式。\n- 当query参数为查询和分析语句时，参数reverse无效，由SQL分析语句中order by语法指定排序方式。如果order by为asc（默认），则为升序；如果order by为desc，则为降序。\n\n></notice>","type":"boolean","required":false,"example":"false","default":"false"}},{"name":"powerSql","in":"query","schema":{"title":"用于指定返回结果是否按日志时间戳降序返回日志，精确到分钟级别。\n\ntrue：按照日志时间戳降序返回日志。\nfalse（默认值）：按照日志时间戳升序返回日志。\n注意\n当query参数为查询语句时，参数reverse有效，用于指定返回日志排序方式。\n当query参数为查询和分析语句时，参数reverse无效，由SQL分析语句中order by语法指定排序方式。如果order by为asc（默认），则为升序；如果order by为desc，则为降序。","description":"是否使用SQL独享版。更多信息，请参见[开启SQL独享版](~~223777~~)。\n\n- true：使用SQL独享版。\n- false（默认值）：使用SQL普通版。\n\n除通过powerSql参数配置SQL独享版外，您还可以使用**query**参数。","type":"boolean","required":false,"example":"false","default":"false"}}],"responses":{"200":{"headers":{"x-log-progress":{"schema":{"title":"查询结果的状态，包括：  Complete：查询已经完成，返回结果为完整结果。 Incomplete：查询已经完成，返回结果为不完整结果，需要重复请求以获得完整结果。","type":"string","example":"Complete"}},"x-log-count":{"schema":{"title":"当前查询结果的日志总数。","type":"integer","format":"int64","example":"10000"}},"x-log-processed-rows":{"schema":{"title":"本次查询处理的行数。","type":"integer","format":"int64","example":"10000"}},"x-log-elapsed-millisecond":{"schema":{"title":"本次查询消耗的毫秒时间。","type":"integer","format":"int64","example":"5"}},"Server":{"schema":{"title":"服务器名称。","type":"string","example":"nginx"}},"Content-Type":{"schema":{"title":"返回的响应体的内容格式。","type":"string","example":"application/json"}},"Content-Length":{"schema":{"title":"响应内容长度。","type":"string","example":"0"}},"Connection":{"schema":{"title":"是否长链接。取值包括：  close：不是长链接，则每个HTTP请求都会重新建立TCP连接。 keep-alive：长链接，TCP连接建立后保持连接状态，节省连接所需时间和带宽。","type":"string","example":"close"}},"Date":{"schema":{"title":"返回响应的时间。","type":"string","example":"Sun, 27 May 2018 08:25:04 GMT"}},"x-log-requestid":{"schema":{"title":"服务端产生的标识，该请求的唯一ID。","type":"string","example":"5B0A6B60BB6EE39764D458B5"}}},"schema":{"description":"日志数组Logs，其每个元素就是一条Log。","type":"array","items":{"description":"日志数组Logs，其每个元素就是一条Log。","type":"object","example":"[{'remote_addr': '198.51.XXX.XXX', 'pv': '1', '__source__': '', '__time__': '1649902984'}, {'remote_addr': '198.51.XXX.XXX', 'pv': '1', '__source__': '', '__time__': '1649902984'}, {'remote_addr': '198.51.XXX.XXX', 'pv': '1', '__source__': '', '__time__': '1649902984'}, {'remote_addr': '198.51.XXX.XXX', 'pv': '1', '__source__': '', '__time__': '1649902984'}, {'remote_addr': '198.51.100.XXX', 'pv': '1', '__source__': '', '__time__': '1649902984'}]"}}}},"responseDemo":"[{\"type\":\"json\",\"example\":\"[\\n  {\\n    \\\"test\\\": \\\"test\\\",\\n    \\\"test2\\\": 1\\n  }\\n]\",\"errorExample\":\"\"},{\"type\":\"xml\",\"example\":\"\",\"errorExample\":\"\"}]","title":"查询日志库日志","description":"### 接口说明\n> 日志服务支持创建定时SQL任务。具体操作，请参见[创建定时SQL任务](~~286457~~)。\n\n- 请求语法中Host由Project名称和日志服务Endpoint构成，您需要在Host中指定Project。\n\n- 当查询涉及的日志数量变化非常大时，日志服务API无法预测需要调用多少次该接口来获取完整结果。所以需要您查看每次请求返回结果中的x-log-progress状态值，根据状态值来确定是否需要重复调用该接口来获取最终完整结果。每次重复调用该接口都会重新消耗相同数量的查询CU。\n- 当日志写入到Logstore中，日志服务的查询接口（GetHistograms和GetLogs）能够查到该日志的延时因写入日志类型不同而异。日志服务按日志时间戳把日志分为如下两类：\n\n      - 实时数据：日志中时间点为服务器当前时间点\\(-180秒，900秒]。例如，日志时间为UTC 2014-09-25 12:03:00，服务器收到时为UTC 2014-09-25 12:05:00，则该日志被作为实时数据处理，一般出现在正常场景下。\n     - 历史数据：日志中时间点为服务器当前时间点\\[-7x86400秒，-180秒）。例如，日志时间为UTC 2014-09-25 12:00:00，服务器收到时为UTC 2014-09-25 12:05:00，则该日志被作为历史数据处理，一般出现在补数据场景下。\n   其中，实时数据写入至可查询的最大延时为3秒，99.9%情况下1秒内即可查询完毕。\n\n> 日志服务将日志时间（字段名称为__time__）和服务器收到时间（字段名称为__tag__:__receive_time__）做差，若其差值位于\\(-180秒，900秒]范围，则为实时数据，若其差位于\\[-7x86400秒，-180秒），则为历史数据。\n\n- 日志服务提供Java和Python SDK的GetLogs查询使用示例。更多信息，请参见[Java GetLogs使用示例](~~407683~~)和[Python GetLogs使用示例](~~407684~~)。\n","extraInfo":"| HttpStatusCode  | ErrorCode  | ErrorMessage  | 错误码描述  |\n| :------------ | :------------ | :------------ | :------------ |\n| 404  | ProjectNotExist  | Project does not exist.  | Project不存在。  |\n| 404  | LogStoreNotExist  | Logstore does not exist.  | Logstore不存在。  |\n| 400  | InvalidTimeRange  |  Request time range is invalid. | 请求的时间区间无效。  |\n| 400  |  InvalidQueryString |  Query string is invalid. | 请求的查询分析语句无效。  |\n|  400 |  InvalidOffset |  Offset is invalid. | 请求的offset参数无效。  |\n|  400 |  InvalidLine |  Line is invalid. | 请求的line参数无效。  |\n|  400 |  InvalidReverse |  Reverse value is invalid.| Reverse参数的值无效。  |\n|  400 |  IndexConfigNotExist |  Logstore without index config. | Logstore未开启索引。  |\n|  400 |  ParameterInvalid |  ErrorType:OLSQueryParseError.ErrorMessage:offset is not available for pagination in sql query, please use limit x,y syntax for pagination.|当query参数中有分析语句（SQL语句）时，建议设置该接口的line参数和offset参数为0，通过SQL语句的LIMIT语法实现翻页。<br/>query参数中的SQL语句存在问题时，您可以参见[查询与分析日志的常见报错](~~61628~~)进行排查。|\n|  500 |  InternalServerError |  Specified Server Error Message. | 内部服务调用错误。 |\n\n更多信息，请参见[通用错误码](~~29013~~)。"}