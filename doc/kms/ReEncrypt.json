{"methods":["post","get"],"schemes":["https"],"security":[{"AK":[]}],"operationType":"read","deprecated":false,"systemTags":{"operationType":"get"},"parameters":[{"name":"CiphertextBlob","in":"query","schema":{"description":"待转加密的密文。  \n该参数可以为对称加密或非对称加密返回的密文数据。  \n\n- 对称加密：调用[Encrypt](~~28949~~)、[GenerateDataKey](~~28948~~)、[GenerateDataKeyWithoutPlaintext](~~134043~~)或[GenerateAndExportDataKey](~~176804~~)接口返回的密文数据。  \n\n- 非对称加密：可以是调用[GenerateAndExportDataKey](~~176804~~)接口返回的公钥加密数据，也可以是外部系统使用非对称公钥加密的数据。","type":"string","required":true,"docRequired":true,"example":"ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901q********"}},{"name":"SourceKeyId","in":"query","schema":{"description":"解密密文时使用的主密钥ID。  \n主密钥的全局唯一标识符。  \n\n> 当CiphertextBlob是非对称加密返回的公钥加密数据时需要指定该参数。","type":"string","required":false,"example":"5c438b18-05be-40ad-b6c2-3be6752c****"}},{"name":"SourceKeyVersionId","in":"query","schema":{"description":"用于解密密文的密钥版本标识符。  \n> 当CiphertextBlob是非对称加密返回的公钥加密数据时需要指定该参数。","type":"string","required":false,"example":"2ab1a983-7072-4bbc-a582-584b5bd8****"}},{"name":"SourceEncryptionAlgorithm","in":"query","schema":{"description":"CiphertextBlob是公钥加密结果时，指定公钥加密的算法。算法详情，请参见[AsymmetricDecrypt](~~148130~~)。    \n取值：\n\n- RSAES_OAEP_SHA_256\n- RSAES_OAEP_SHA_1\n- SM2PKE  \n  \n\n> 当CiphertextBlob是非对称加密返回的公钥加密数据时需要指定该参数。","type":"string","required":false,"example":"RSAES_OAEP_SHA_256"}},{"name":"SourceEncryptionContext","in":"query","style":"json","schema":{"description":"key/value的JSON字符串。如果在[Encrypt](~~28949~~)、[GenerateDataKey](~~28948~~)、[GenerateDataKeyWithoutPlaintext](~~134043~~)或[GenerateAndExportDataKey](~~176804~~) API中指定了该参数，则需要提供同样的参数才能解密，详情请参见[EncryptionContext说明](~~42975~~)。  \n> 当CiphertextBlob是对称加密返回的密文数据时需要指定该参数。","type":"object","required":false,"example":"{\"Example\":\"Example\"}"}},{"name":"DestinationKeyId","in":"query","schema":{"description":"对密文解密后再次加密时使用的对称主密钥ID。","type":"string","required":true,"docRequired":true,"example":"1234abcd-12ab-34cd-56ef-12345678****"}},{"name":"DestinationEncryptionContext","in":"query","style":"json","schema":{"description":"key/value的JSON字符串，用于目标主密钥加密时的加密上下文。","type":"object","required":false,"example":"{\"Example\":\"Example\"}"}}],"responses":{"200":{"schema":{"type":"object","properties":{"KeyId":{"description":"解密密文使用的主密钥ID。  \n主密钥的全局唯一标识符。","type":"string","example":"2ab1a983-7072-4bbc-a582-584b5bd8****"},"KeyVersionId":{"description":"主密钥下用于解密密文的密钥版本标识符。","type":"string","example":"202b9877-5a25-46e3-a763-e20791b5****"},"CiphertextBlob":{"description":"使用指定的主密钥进行再次加密得到的密文。","type":"string","example":"DZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmaaSl+TztSIMe43nbTH/Z1Wr4XfLftKhAciUmDQXuMRl4WTvKhxjMThjK****"},"RequestId":{"description":"请求ID。","type":"string","example":"207596a2-36d3-4840-b1bd-f87044699bd7"}}}}},"errorCodes":{"400":[{"errorCode":"InvalidParameter","errorMessage":"The specified parameter is not valid."}],"404":[{"errorCode":"InvalidAccessKeyId.NotFound","errorMessage":"The Access Key ID provided does not exist in our records."},{"errorCode":"Forbidden.KeyNotFound","errorMessage":"The specified Key is not found."}],"500":[{"errorCode":"InternalFailure","errorMessage":"Internal Failure."}]},"responseDemo":"[{\"type\":\"json\",\"example\":\"{\\n  \\\"KeyId\\\": \\\"2ab1a983-7072-4bbc-a582-584b5bd8****\\\",\\n  \\\"KeyVersionId\\\": \\\"202b9877-5a25-46e3-a763-e20791b5****\\\",\\n  \\\"CiphertextBlob\\\": \\\"DZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmaaSl+TztSIMe43nbTH/Z1Wr4XfLftKhAciUmDQXuMRl4WTvKhxjMThjK****\\\",\\n  \\\"RequestId\\\": \\\"207596a2-36d3-4840-b1bd-f87044699bd7\\\"\\n}\",\"errorExample\":\"\"},{\"type\":\"xml\",\"example\":\"<ReEncryptResponse>\\n    <KeyId>2ab1a983-7072-4bbc-a582-584b5bd8****</KeyId>\\n    <KeyVersionId>202b9877-5a25-46e3-a763-e20791b5****</KeyVersionId>\\n    <CiphertextBlob>DZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmaaSl+TztSIMe43nbTH/Z1Wr4XfLftKhAciUmDQXuMRl4WTvKhxjMThjK****</CiphertextBlob>\\n    <RequestId>207596a2-36d3-4840-b1bd-f87044699bd7</RequestId>\\n</ReEncryptResponse>\",\"errorExample\":\"\"}]","title":"对密文进行转加密","summary":"对密文进行转加密。即先将密文解密，然后将解密得到的数据或者数据密钥使用新的主密钥再次进行加密，返回加密结果。","description":"### 注意事项\n\n- 非KMS实例中的密钥：进行密码运算时，仅支持通过阿里云SDK调用OpenAPI。\n\n- KMS实例中的密钥：进行密码运算时，支持如下两种方式。\n\n  - 方式一（推荐）：通过KMS实例SDK调用KMS实例API。详细介绍，请参见[KMS实例SDK](~~601593~~)、[KMS实例API](~~601485~~)。\n  - 方式二：通过阿里云SDK调用OpenAPI，但认证方式仅支持可信实体为阿里云服务的RAM角色。详细信息，请参见[创建可信实体为阿里云服务的RAM角色](~~116800~~)。\n\n### QPS限制\n本接口的单用户QPS限制为750次/秒。超过限制，API调用将会被限流，这可能影响您的业务，请合理调用。\n\n\n### 详细说明\nReEncrypt使用场景如下：\n\n- 主密钥（CMK）进行轮转后，使用轮转后最新的密钥版本对数据进行重新加密。自动轮转密钥详情，请参见[自动轮转密钥](~~134270~~)。\n\n- 主密钥不变，改变加密上下文的内容，进行重新加密。\n\n- 将主密钥加密的数据或者数据密钥在KMS内部使用其它的主密钥进行重新加密。\n\n\nReEncrypt权限设置如下：\n\n- 需要有操作源主密钥的kms:ReEncryptFrom权限。\n- 需要有操作目的主密钥的kms:ReEncryptTo权限。\n- 可以设置kms:ReEncrypt*用于表示上述两个操作的权限。","requestParamsDescription":" \n","responseParamsDescription":" ","extraInfo":" "}