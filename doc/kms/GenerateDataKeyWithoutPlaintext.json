{"methods":["post","get"],"schemes":["https"],"security":[{"AK":[]}],"operationType":"read","deprecated":false,"systemTags":{"operationType":"get"},"parameters":[{"name":"KeyId","in":"query","schema":{"description":"主密钥（CMK）的全局唯一标识符。该参数也可以被指定为CMK绑定的别名，详情请参见别名使用说明。\n                           ","type":"string","required":true,"docRequired":true,"example":"1234abcd-12ab-34cd-56ef-12345678****"}},{"name":"KeySpec","in":"query","schema":{"description":" 指定生成的数据密钥的长度，取值：  \n\n- AES_256：256位的对称密钥  \n\n- AES_128：128位的对称密钥\n\n> 建议使用KeySpec或者NumberOfBytes来指定数据密钥长度。如果两者都不指定，KMS生成256位的数据密钥；如果两者都被指定，KMS会忽略KeySpec参数。","type":"string","required":false,"example":"AES_256","enum":["AES_256"," AES_128"]}},{"name":"NumberOfBytes","in":"query","schema":{"description":"指定生成的数据密钥的长度。   \n取值：1~1024。   \n单位：字节","type":"integer","format":"int32","required":false,"maximum":"1024","minimum":"0","example":"256"}},{"name":"EncryptionContext","in":"query","style":"json","schema":{"description":"key/value对的JSON字符串，如果指定了该参数，则在调用Decrypt 时需要提供同样的参数，详情请参见[EncryptionContext说明](~~42975~~)。\n                           ","type":"object","required":false,"example":"{\"Example\":\"Example\"}"}}],"responses":{"200":{"schema":{"type":"object","properties":{"KeyVersionId":{"description":"用于加密明文的密钥版本标志符。是指定CMK的主版本。","type":"string","example":"2ab1a983-7072-4bbc-a582-584b5bd8****"},"KeyId":{"description":"CMK的全局唯一标识符。  \n\n> 如果请求中的KeyId参数使用的是CMK的别名，在响应中会返回别名对应的CMK标志符。","type":"string","example":"599fa825-17de-417e-9554-bb032cc6****"},"CiphertextBlob":{"description":"数据密钥被指定CMK的主版本加密后的密文。","type":"string","example":"ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****"},"RequestId":{"description":"本次请求的ID。","type":"string","example":"7021b6ec-4be7-4d3c-8a68-1e85d4d515a0"}}}}},"errorCodes":{"400":[{"errorCode":"InvalidParameter","errorMessage":"The specified parameter is not valid."}],"404":[{"errorCode":"InvalidAccessKeyId.NotFound","errorMessage":"The Access Key ID provided does not exist in our records."},{"errorCode":"Forbidden.KeyNotFound","errorMessage":"The specified Key is not found."}]},"responseDemo":"[{\"type\":\"json\",\"example\":\"{\\n  \\\"KeyVersionId\\\": \\\"2ab1a983-7072-4bbc-a582-584b5bd8****\\\",\\n  \\\"KeyId\\\": \\\"599fa825-17de-417e-9554-bb032cc6****\\\",\\n  \\\"CiphertextBlob\\\": \\\"ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****\\\",\\n  \\\"RequestId\\\": \\\"7021b6ec-4be7-4d3c-8a68-1e85d4d515a0\\\"\\n}\",\"errorExample\":\"\"},{\"type\":\"xml\",\"example\":\"<KMS>\\n       <RequestId>7021b6ec-4be7-4d3c-8a68-1e85d4d515a0</RequestId>\\n       <CiphertextBlob>ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****</CiphertextBlob>\\n       <KeyId>599fa825-17de-417e-9554-bb032cc6****</KeyId>\\n       <KeyVersionId>2ab1a983-7072-4bbc-a582-584b5bd8****</KeyVersionId>\\n</KMS>\",\"errorExample\":\"//json response\\n{\\n        \\\"CiphertextBlob\\\": \\\"CiphertextBlob\\\",\\n        \\\"KeyId\\\": \\\"599fa825-17de-417e-9554-bb032cc6****\\\",\\n        \\\"KeyVersionId\\\": \\\"2ab1a983-7072-4bbc-a582-584b5bd8ecf3\\\",\\n        \\\"RequestId\\\": \\\"7021b6ec-4be7-4d3c-8a68-1e85d4d515a0\\\"\\n}   \"}]","title":"生成一个数据密钥，不需返回数据密钥明文内容。","summary":"生成一个随机的数据密钥。可以用数据密钥进行本地数据的加密。","description":"### 注意事项\n\n- 非KMS实例中的密钥：进行密码运算时，仅支持通过阿里云SDK调用OpenAPI。\n\n- KMS实例中的密钥：进行密码运算时，支持如下两种方式。\n\n  - 方式一（推荐）：通过KMS实例SDK调用KMS实例API。详细介绍，请参见[KMS实例SDK](~~601593~~)、[KMS实例API](~~601485~~)。\n  - 方式二：通过阿里云SDK调用OpenAPI，但认证方式仅支持可信实体为阿里云服务的RAM角色。详细信息，请参见[创建可信实体为阿里云服务的RAM角色](~~116800~~)。\n\n### QPS限制\n本接口的单用户QPS限制为750次/秒。超过限制，API调用将会被限流，这可能影响您的业务，请合理调用。\n\n\n### 详细说明\n此API随机生成一个数据密钥，并通过您指定的对称主密钥（Symmetric CMK）加密后，返回数据密钥的密文。此API和[GenerateDataKey](~~28948~~)提供完全相同的功能，唯一的区别是此API不会返回数据密钥的明文。\n\n您在请求中指定的CMK，仅用于数据密钥的加密，不会用于数据密钥的生成。KMS不会记录或存储随机生成的数据密钥。\n\n> - 此API适用于不需要立即使用数据密钥完成数据加密的系统。系统需要加密时，通过调用[Decrypt](~~28950~~)接口解开数据密钥的密文。  \n> - 此API也适用于具有不同信任等级的分布式系统。例如：您的系统将数据按照既定划分策略存储到不同的分区中。其中的一个模块会预先创建不同的数据分区，对每一个分区分别产生不同的数据密钥。这一模块完成控制平面的初始化之后，并不参与数据的生产和消费，它是密钥分发者。而数据平面的模块，在产生和消费数据的时候，首先获取分区的数据密钥密文，在解开之后使用数据密钥的明文对数据执行加密或者解密操作，随后清除内存中的数据密钥明文。在这样的系统中，密钥分发者不需要获取到数据密钥的明文，只需要使用相关CMK的GenerateDataKeyWithoutPlaintext的权限；而数据的生产和消费者，不需要产生新的数据密钥，只需要使用相关CMK的Decrypt的权限。","requestParamsDescription":" ","responseParamsDescription":" ","extraInfo":" "}