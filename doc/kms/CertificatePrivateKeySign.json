{"methods":["post","get"],"schemes":["https"],"security":[{"AK":[]}],"operationType":"read","deprecated":false,"systemTags":{"operationType":"get"},"parameters":[{"name":"CertificateId","in":"query","schema":{"description":"证书ID。证书管家中证书的全局唯一标识符。","type":"string","required":true,"docRequired":true,"example":"12345678-1234-1234-1234-12345678****"}},{"name":"Algorithm","in":"query","schema":{"description":"签名算法。取值：  \n\n- RSA_PKCS1_SHA_256  \n\n- RSA_PSS_SHA_256  \n\n- ECDSA_SHA_256  \n\n- SM2DSA  \n  \n> SM2DSA签名算法仅在中国内地使用托管密码机的地域支持。更多信息，请参见[托管密码机概述](~~125803~~)。","type":"string","required":true,"docRequired":true,"example":"ECDSA_SHA_256"}},{"name":"MessageType","in":"query","schema":{"description":"消息类型。取值：  \n\n- RAW（默认值）：原始数据。  \n\n- DIGEST：原始数据的消息摘要（哈希值）。","type":"string","required":true,"docRequired":true,"example":"RAW"}},{"name":"Message","in":"query","schema":{"description":"待签名数据。  \n\n使用Base64编码。例如：待签名数据的十六进制内容为`[0x31, 0x32, 0x33, 0x34]`，则对应的Base64编码为`MTIzNA==`。  \n\n当MessageType取值为RAW时，数据内容需小于4KB。\n\n如果待签名数据内容大于4KB，您可以将MessageType指定为DIGEST，将Message指定为本地计算的消息摘要（又称哈希值）。证书管家将使用您自己的证书应用系统计算消息摘要，使用的消息摘要算法须与指定签名算法需要的消息摘要算法保持一致。具体如下：  \n\n- RSA_PKCS1_SHA_256、RSA_PSS_SHA_256和ECDSA_SHA_256对应的消息摘要算法为SHA-256。  \n\n- SM2DSA对应的消息摘要算法为SM3。  \n\n> 当证书密钥规格为EC_SM2，并且MessageType为DIGEST时，Message值为GB/T 32918.2-2016 6.1中描述的`e`。","type":"string","required":true,"docRequired":true,"example":"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4="}}],"responses":{"200":{"schema":{"type":"object","properties":{"SignatureValue":{"description":"签名值。  \n使用Base64编码。","type":"string","example":"ZOyIygCyaOW6Gj****MlNKiuyjfzw="},"RequestId":{"description":"本次调用请求的ID，是由阿里云为该请求生成的唯一标识符，可用于排查和定位问题。","type":"string","example":"5979d897-d69f-4fc9-87dd-f3bb73c40b80"},"CertificateId":{"description":"证书ID。","type":"string","example":"12345678-1234-1234-1234-12345678****"}}}}},"errorCodes":{"400":[{"errorCode":"InvalidParameter","errorMessage":"The specified parameter is not valid."}],"404":[{"errorCode":"Certificate.NotFound","errorMessage":"The specified certificate is not found."},{"errorCode":"InvalidAccessKeyId.NotFound","errorMessage":"The Access Key ID provided does not exist in our records."}]},"responseDemo":"[{\"type\":\"json\",\"example\":\"{\\n  \\\"SignatureValue\\\": \\\"ZOyIygCyaOW6Gj****MlNKiuyjfzw=\\\",\\n  \\\"RequestId\\\": \\\"5979d897-d69f-4fc9-87dd-f3bb73c40b80\\\",\\n  \\\"CertificateId\\\": \\\"12345678-1234-1234-1234-12345678****\\\"\\n}\",\"errorExample\":\"\"},{\"type\":\"xml\",\"example\":\"<CertificatePrivateKeySignResponse>\\n    <SignatureValue>ZOyIygCyaOW6Gj****MlNKiuyjfzw=</SignatureValue>\\n    <RequestId>5979d897-d69f-4fc9-87dd-f3bb73c40b80</RequestId>\\n    <CertificateId>12345678-1234-1234-1234-12345678****</CertificateId>\\n</CertificatePrivateKeySignResponse>\",\"errorExample\":\"\"}]","title":"使用X.509数字证书私钥为消息签名","summary":"调用CertificatePrivateKeySign接口使用指定证书生成数字签名。","description":"请求参数中签名算法需要跟密钥类型对应。签名算法和密钥类型对照表如下：  \n| Algorithm  |Key Spec |\n| -------------| ----- |\n| RSA_PKCS1_SHA_256|RSA_2048 |\n| RSA_PSS_SHA_256|RSA_2048 |\n| ECDSA_SHA_256 |EC_P256 |\n| SM2DSA  |EC_SM2 |\n\n本文将提供一个示例，使用ID为`12345678-1234-1234-1234-12345678****`的证书，通过`ECDSA_SHA_256`签名算法为原始数据`VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=`生成数字签名。\n  \n","responseParamsDescription":" ","extraInfo":" "}