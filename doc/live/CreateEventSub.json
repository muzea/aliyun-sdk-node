{"summary":"调用CreateEventSub创建订阅房间消息的回调。","methods":["post"],"schemes":["http","https"],"security":[{"AK":[]}],"operationType":"write","deprecated":false,"systemTags":{},"parameters":[{"name":"AppId","in":"query","schema":{"description":"订阅的应用ID。","type":"string","required":true,"example":"9qb1****"}},{"name":"ChannelId","in":"query","schema":{"title":"要监听的频道，不填表示全部，每个appid 只允许1个全频道订阅","description":"订阅的频道ID。您可通过调用[ListEventSub](~~2628135~~)接口查询订阅的频道ID。\n\n>- 如果Users.N参数不为空，则此参数必填。- ChannelId为*或者不填，表示为全频道订阅，每个AppId只允许1个全频道订阅。- 每个AppId最多同时允许创建20个订阅。\n","type":"string","required":false,"example":"123333"}},{"name":"Users","in":"query","style":"repeatList","schema":{"title":"只监听哪些用户，不填表示全部；与ChannelId过滤同时使用才生效","description":"订阅哪些用户的消息。","type":"array","items":{"description":"订阅哪些用户的消息，参数为空表示订阅该房间全部用户（包含主播和观众）。格式如下所示：\n\n```\nUsers.1=****\nUsers.2=****\n......\n```","type":"string","required":false,"example":"user1"},"required":false,"maxItems":30}},{"name":"Events","in":"query","style":"repeatList","schema":{"title":"ChannelEvent, UserEvent","description":"订阅事件。","type":"array","items":{"description":"订阅的事件，取值：\n\n- **ChannelEvent**：频道事件。\n\n- **UserEvent**：频道内用户事件。","type":"string","required":true,"example":"ChannelEvent"},"required":true,"maxItems":5}},{"name":"CallbackUrl","in":"query","schema":{"title":"回调地址","description":"回调地址。回调内容请参见以下回调内容示例。","type":"string","required":true,"example":"http://****.com/callback"}}],"responses":{"200":{"schema":{"title":"Schema of Response","description":"Schema of Response","type":"object","properties":{"RequestId":{"title":"Id of the request","description":"请求ID。","type":"string","example":"760bad53276431c499e30dc36f6b26be"},"SubscribeId":{"description":"创建的订阅ID。","type":"string","example":"ad53276431c****"}}}}},"errorCodes":{"400":[{"errorCode":"InputInvalid","errorMessage":"%s."},{"errorCode":"QuotaLimitError","errorMessage":"%s."},{"errorCode":"ErrorInvalidCallBackUrl","errorMessage":"%s."}],"403":[{"errorCode":"NoAuth","errorMessage":"%s."}],"404":[{"errorCode":"ResourceNotExist","errorMessage":"%s."}],"500":[{"errorCode":"ServerError","errorMessage":"%s."}]},"staticInfo":{"returnType":"synchronous"},"responseDemo":"[{\"type\":\"json\",\"example\":\"{\\n  \\\"RequestId\\\": \\\"760bad53276431c499e30dc36f6b26be\\\",\\n  \\\"SubscribeId\\\": \\\"ad53276431c****\\\"\\n}\",\"errorExample\":\"\"},{\"type\":\"xml\",\"example\":\"<CreateEventSubResponse>\\n    <RequestId>760bad53276431c499e30dc36f6b26be</RequestId>\\n    <SubscribeId>ad53276431c****</SubscribeId>\\n</CreateEventSubResponse>\",\"errorExample\":\"\"}]","title":"创建订阅房间消息回调","description":"## 使用说明\n本接口用于创建订阅房间消息的回调。例如：在创建回调时，您可以配置回调地址、事件类型等参数。\n\n## QPS限制\n本接口的单用户QPS限制为100次/秒。超过限制，API调用会被限流，这可能会影响您的业务，请合理调用。","requestParamsDescription":"## CallBack\n通过用户传入的CallbackUrl，回调用户的内容，示例如下所示：\n\n```\nRequest:\n\nPOST /callbackURL\n\nBody\napplication/json\n\n{\n    \"MsgId\": \"消息ID\",\n    \"MsgTimestamp\": 12312324, // 消息发送时的Unix时间戳\n    \"SubscribeID\": \"订阅ID\",\n    \"AppId\":\"\",     // 产生该消息的appid \n    \"ChannelID\":\"\", // 产生该消息的频道\n    \"Contents\": [\n      {\n        \"Event\": \"UserEvent\",//订阅的事件：频道内用户事件\n        \"UserEvent\": {\n          \"UserId\": \"80331631628db0d1\",    // 用户ID\n          \"EventTag\": \"Publish\",    // 事件，包括Join, Leave, Publish, Unpublish, Roleupdate\n          \"SessionId\": \"0dr15rrnhkz0jnvz6o8sxo01hoondhu1\", // 产生该事件的SessionID\n          \"Timestamp\": 1609854786,    // 事件发生Unix 时间戳\n          \"Reason\": 1, // 入会、离会原因，仅Join事件有\n          \"Role\": 1, //  角色类型, 主播，观众\n          \"CurrentMedias\":\"1,2,3\"// 推流类型：用户推了哪些流\n        }\n      },\n      {\n        \"Event\": \"ChannelEvent\",//订阅的事件：频道事件\n        \"ChannelEvent\": {\n          \"ChannelId\": \"8888889999\",\n          \"EventTag\": \"Open\",   // 频道事件，包括开启与关闭Open, Close\n          \"Timestamp\": 1609854530 // 事件发生Unix 时间戳\n        }\n      }\n   ]\n}\n\nResponse \nHTTP STATUS 200\n```\n## UserEvent用户事件\n\n| 参数 | 类型 | 是否必填|描述|\n| ------ | ------ | ------ | ----- |\n| UserId |string | 是 |用户ID。 |\n| SessionId | string | 是 |用户SessionID。 |\n| EventTag | string | 是 |事件类型，取值：<br>Join：入会。<br>Leave：离会。<br>PublishVideo：开始推视频流。<br> PublishAudio：开始推音频流。<br>PublishScreen：开始屏幕共享。<br>UnpublishVideo：停止推视频流。<br>UnpublishAudio：停止推音频流。<br>UnpublishScreen：停止屏幕共享。<br>Roleupdate：角色切换。 |\n| Timestamp |number | 是 |事件发生的时间戳。 |\n| Reason | integer | 是 |入会、离会原因（仅Join事件有），取值：<br>1：正常入会、离会。<br> 2：重连入会（当前会中已有该用户实例，该用户再次入会）。<br>3：跨频道转推。<br>4：超时离会。<br>5：用户启用新的会话，当前会话被挤下线。<br>6：被踢出。<br>7：频道解散。|\n| Role | integer | 是 |角色类型，取值：<br>1：主播。<br>2：观众。 |\n| CurrentMedias| integer | 是 |推流类型，取值：<br>1：音频。<br>2：视频。<br>3：屏幕共享。 |\n\n## ChannelEvent频道事件\n| 参数 | 类型 | 是否必填|描述|\n| ------ | ------ | ------ | ------- |\n| EventTag |string | 是 |事件类型，取值：<br>Open：会议开始。<br>Close：会议结束。 |\n| Timestamp| number | 是 |事件发生的时间戳。 |\n\n## 回调鉴权说明\n事件回调鉴权功能默认开启，鉴权逻辑如下所示：\n\n- 阿里云视频直播服务发起回调请求时在HTTP(S)请求头中包含Ali-Rtc-Timestamp和Ali-Rtc-Signature字段，供回调消息接收服务端进行签名认证。Ali-Rtc-Timestamp值计算方式为：Ali-Rtc-Signature=MD5SUM(MD5CONTENT)。其中，MD5CONTENT=回调域名|Ali-Rtc-Timestamp取值|鉴权Key；回调域名指配置回调URL的域名，鉴权Key指用户创建AppId时生成的AppKey。\n- 回调消息接收服务端接收回调消息时，将回调域名、Ali-Rtc-Timestamp取值、鉴权Key进行拼接后计算MD5值，得到加密字符串，再将计算出的加密字符串与音视频通信服务发起的HTTP(S)请求头中的Ali-Rtc-Signature字段值进行对比，如果不一致，则请求非法。\n## 回调异常重试\n阿里云发起回调请求时，仅当您的业务服务器响应HTTP状态码为200时认定为回调成功。若回调失败，阿里云会重试7次，分别间隔1秒、2秒、5秒、10秒、1分钟、2分钟、5分钟。每次重试请求均会产生对应的回调记录。\n## 异常处理\n已经入会或者推流的客户端和阿里云的服务端有心跳保活机制，当客户端因为断网、App关闭异常等原因导致心跳保活失败（90秒未收到客户端心跳信息则认定为失败），服务端会判定客户端异常超时离开，并产生用户停止推流和离会的事件回调。"}